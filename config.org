#+TITLE: Work Emacs Config
#+AUTHOR: Ultrafeeder4
#+DESCRIPTION: Emacs config for work.
#+STARTUP: showeverything
#+OPTIONS: toc:2


* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#script-sourcing][Script Sourcing]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#backup][BACKUP]]
- [[#company][COMPANY]]
- [[#dashboard][DASHBOARD]]
- [[#diminish][DIMINISH]]
- [[#dired][DIRED]]
- [[#elfeed][ELFEED]]
- [[#flycheck][FLYCHECK]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#global-zoom-inout][Global Zoom In/Out]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
  - [[#disable-startup-screen][Disable startup screen]]
  - [[#themescolors][Themes/Colors]]
  - [[#display-colors-in-code-blocks][Display colors in code blocks]]
  - [[#display-colored-delimiters][Display Colored Delimiters]]
- [[#git][GIT]]
  - [[#git-time-machine][Git Time Machine]]
  - [[#magit][Magit]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#language-supportlsp][LANGUAGE SUPPORT/LSP]]
  - [[#lua][Lua]]
  - [[#tbd][Tbd]]
- [[#modeline][MODELINE]]
- [[#neotree][NEOTREE]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#qol-enhancements-in-org-mode][QOL Enhancements in Org mode]]
  - [[#enable-tempo-shortcuts][Enable tempo shortcuts]]
- [[#projectile][PROJECTILE]]
- [[#reload-emacs][RELOAD EMACS]]
  - [[#define-interactive-function-that-reloads-initel-file][Define interactive function that reloads init.el file]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#pwsh][Pwsh]]
- [[#which-key][WHICH-KEY]]

* IMPORTANT PROGRAMS TO LOAD FIRST

** Elpaca Package Manager

Sourcing the scripts that contain package definitions/configurations as well as automatically ensuring that all future packages are installed by defualt unless specified otherwise.

#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
  (add-to-list 'load-path "~\\.emacs.d\\scripts\\")
#+end_src

** Script Sourcing
#+begin_src emacs-lisp
  (require 'elpaca-setup)
  (require 'buffer-move)
#+end_src

** Load Evil Mode

#+begin_src emacs-lisp
      (use-package evil
            :init
            (setq evil-want-integration t)
            (setq evil-want-keybinding nil)
            (setq evil-vsplit-window-right t)
            (setq evil-split-window-below t)
            (evil-mode ))
      (use-package evil-collection
        :after evil
        :config
        (setq evil-collection-mode-list '(dashboard dired ibuffer))
        (evil-collection-init))
      (use-package evil-tutor

)

          ;;Turns off elpaca-use-package-mode current declaration
          ;;Note this will cause evaluate the declaration immediately. It is not deferred.
          ;;Useful for configuring built-in emacs features.
          (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
  ;; Don't install anything. Defer execution of BODY
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))
  (setq org-return-follows-link t)
          
#+end_src

** General Keybindings

#+begin_src emacs-lisp
    (use-package general
        :config
      (general-evil-setup)
      (general-create-definer ult/leader-keys
        :states '(normal insert visual emacs)
        :keymaps 'override
        :prefix "SPC"
        :global-prefix "M-SPC")
      (ult/leader-keys
        "." '(find-file :wk "Find file")
        "TAB TAB" '(comment-line :wk "Comment lines")
  	  "p s" '(powershell :wk "Powershell")
  	  "o e" '(elfeed :wk "Open Elfeed"))
      (ult/leader-keys
        "b" '(:ignore t :wk "buffer")
        "b b" '(switch-to-buffer :wk "Switch buffer")
        "b i" '(ibuffer :wk "Ibuffer")
        "b k" '(kill-current-buffer :wk "Kill this buffer")
        "b n" '(next-buffer :wk "Next buffer")
        "b p" '(previous-buffer :wk "Previous buffer")
        "b r" '(revert-buffer :wk "Reload buffer"))
      (ult/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired"))
  (ult/leader-keys
      "e" '(:ignore t :wk "Evaluate")
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e" '(eval-expression :wk "Evaluate an elisp expresssion")
      "e h" '(counsel-esh-history :wk "Eshell history")
      "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e r" '(eval-region :wk "Evaluate elisp in region")
      "e s" '(eshell :wk "Eshell"))
  (ult/leader-keys
    "f" '(:ignore t :wk "Files")    
    "f c" '((lambda () (interactive)
              (find-file "~/.config/emacs/config.org")) 
            :wk "Open emacs config.org")
    "f e" '((lambda () (interactive)
              (dired "~/.config/emacs/")) 
            :wk "Open user-emacs-directory in dired")
    "f d" '(find-grep-dired :wk "Search for string in files in DIR")
    "f g" '(counsel-grep-or-swiper :wk "Search for string current file")
    "f i" '((lambda () (interactive)
              (find-file "~/.config/emacs/init.el")) 
            :wk "Open emacs init.el")
    "f j" '(counsel-file-jump :wk "Jump to a file below current directory")
    "f l" '(counsel-locate :wk "Locate a file")
    "f r" '(counsel-recentf :wk "Find recent files")
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit file"))
    (ult/leader-keys
    "g" '(:ignore t :wk "Git")    
    "g /" '(magit-dispatch :wk "Magit dispatch")
    "g ." '(magit-file-dispatch :wk "Magit file dispatch")
    "g b" '(magit-branch-checkout :wk "Switch branch")
    "g c" '(:ignore t :wk "Create") 
    "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
    "g c c" '(magit-commit-create :wk "Create commit")
    "g c f" '(magit-commit-fixup :wk "Create fixup commit")
    "g C" '(magit-clone :wk "Clone repo")
    "g f" '(:ignore t :wk "Find") 
    "g f c" '(magit-show-commit :wk "Show commit")
    "g f f" '(magit-find-file :wk "Magit find file")
    "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
    "g F" '(magit-fetch :wk "Git fetch")
    "g g" '(magit-status :wk "Magit status")
    "g i" '(magit-init :wk "Initialize git repo")
    "g l" '(magit-log-buffer-file :wk "Magit buffer log")
    "g r" '(vc-revert :wk "Git revert file")
    "g s" '(magit-stage-file :wk "Git stage file")
    "g t" '(git-timemachine :wk "Git time machine")
    "g u" '(magit-stage-file :wk "Git unstage file"))
  (ult/leader-keys

    "h" '(:ignore t :wk "Help")
    "h a" '(counsel-apropos :wk "Apropos")
    "h b" '(describe-bindings :wk "Describe bindings")
    "h c" '(describe-char :wk "Describe character under cursor")
    "h d" '(:ignore t :wk "Emacs documentation")
    "h d a" '(about-emacs :wk "About Emacs")
    "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
    "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
    "h d m" '(info-emacs-manual :wk "The Emacs manual")
    "h d n" '(view-emacs-news :wk "View Emacs news")
    "h d o" '(describe-distribution :wk "How to obtain Emacs")
    "h d p" '(view-emacs-problems :wk "View Emacs problems")
    "h d t" '(view-emacs-todo :wk "View Emacs todo")
    "h d w" '(describe-no-warranty :wk "Describe no warranty")
    "h e" '(view-echo-area-messages :wk "View echo area messages")
    "h f" '(describe-function :wk "Describe function")
    "h F" '(describe-face :wk "Describe face")
    "h g" '(describe-gnu-project :wk "Describe GNU Project")
    "h i" '(info :wk "Info")
    "h I" '(describe-input-method :wk "Describe input method")
    "h k" '(describe-key :wk "Describe key")
    "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
    "h L" '(describe-language-environment :wk "Describe language environment")
    "h m" '(describe-mode :wk "Describe mode")
    "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive)
                (load-file "~/.emacs.d/init.el")
                (ignore (elpaca-process-queues)))
              :wk "Reload emacs config")
    "h t" '(load-theme :wk "Load theme")
    "h v" '(describe-variable :wk "Describe variable")
    "h w" '(where-is :wk "Prints keybinding for command if set")
    "h x" '(describe-command :wk "Display full documentation for command"))

      (ult/leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org agenda")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list"))

  (ult/leader-keys
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

  (ult/leader-keys
    "m d" '(:ignore t :wk "Date/deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp"))
  (ult/leader-keys
    "o" '(:ignore t :wk "Open")
    "o d" '(dashboard-open :wk "Dashboard")
    "o e" '(elfeed :wk "Elfeed RSS")
    "o f" '(make-frame :wk "Open buffer in new frame")
    "o F" '(select-frame-by-name :wk "Select frame by name"))
  (ult/leader-keys
    "p" '(projectile-command-map :wk "Projectile"))
  (ult/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t e" '(eshell-toggle :wk "Toggle eshell")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t n" '(neotree-toggle :wk "Toggle neotree file viewer")
    "t t" '(visual-line-mode :wk "Toggle truncated lines"))
    (ult/leader-keys
    "s" '(:ignore t :wk "Search")
    "s d" '(dictionary-search :wk "Search dictionary")
    "s m" '(man :wk "Man pages")
    "s t" '(tldr :wk "Lookup TLDR docs for a command")
    "s w" '(woman :wk "Similar to man but doesn't require man"))
  (ult/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))
      ) 
#+end_src

* ALL THE ICONS

#+begin_src emacs-lisp
    (use-package nerd-icons
      ;; (nerd-icons-font-family "Tinos Nerd Font")
  )
    (use-package nerd-icons-dired
      :hook (dired-mode . nerd-icons-dired-mode ))
#+end_src

* BACKUP

#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~\\.backups")))
#+end_src

* COMPANY

#+begin_src emacs-lisp
    (use-package company
      :defer 2
      :diminish
      :custom
      (company-begin-commands '(self-insert-command))
      (comany-idle-delay .1)
      (company-minimum-prefix-length 2)
      (company-show-numbers t)
      (company-tooltip-align-annotations 't)
      (global-company-mode t))
  (use-package company-box
    :after company
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src

* DASHBOARD

#+begin_src emacs-lisp
  (use-package dashboard
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Many bugs to catch!")
    (setq dashboard-startup-banner "~/.emacs.d/themes/pngegg.png")
    (setq dashboard-center-content nil)
    (setq dashboard-items '((recents . 5)
  			  (agenda . 5)
  			  (bookmarks . 3)
  			  (projects . 3)
 			  (registers . 3)))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
  				    (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))
#+end_src

* DIMINISH

#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

* DIRED
#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)
#+end_src

* ELFEED
#+begin_src emacs-lisp
    (use-package elfeed
      :config
      (setq elfeed-search-feed-face ":foreground #ffffff :weight bold"
            elfeed-feeds (quote
                           (("https://www.reddit.com/r/linux.rss" reddit linux)
                            ("https://www.reddit.com/r/commandline.rss" reddit commandline)
                            ("https://www.reddit.com/r/distrotube.rss" reddit distrotube)
                            ("https://www.reddit.com/r/emacs.rss" reddit emacs)
                            ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
                            ("https://hackaday.com/blog/feed/" hackaday linux)
                            ("https://opensource.com/feed" opensource linux)
                            ("https://linux.softpedia.com/backend.xml" softpedia linux)
                            ("https://itsfoss.com/feed/" itsfoss linux)
                            ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
                            ("https://www.phoronix.com/rss.php" phoronix linux)
                            ("http://feeds.feedburner.com/d0od" omgubuntu linux)
                            ("https://www.computerworld.com/index.rss" computerworld linux)
                            ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
                            ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
                            ("https://betanews.com/feed" betanews linux)
                            ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
                            ("https://distrowatch.com/news/dwd.xml" distrowatch linux)))))

    (use-package elfeed-goodies
      :init
      (elfeed-goodies/setup)
      :config
      (setq elfeed-goodies/entry-pane-size 0.5))
#+end_src
* FLYCHECK

#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :diminish
    :init (global-flycheck-mode))
#+end_src

* FONTS

** Setting the Font Face

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :family "BigBlueTerm437 Nerd Font Mono"
    :height 110
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :family "BigBlueTerm437 Nerd Font Mono"
    :height 120
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :family "BigBlueTerm437 Nerd Font Mono"
    :height 110
    :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "BigBlueTerm437 Nerd Font Mono"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)
#+end_src

** Global Zoom In/Out
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
R
* GRAPHICAL USER INTERFACE TWEAKS

** Disable Menubar, toolbars and Scrollbars

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

** Disable startup screen
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src
** Themes/Colors
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (use-package doom-themes
  :custom
  (doom-themes-enable-bold t )   ; if nil, bold is universally disabled
      (doom-themes-enable-italic t)
      :config
  (load-theme 'doom-sourcerer t)
  )  ;
#+end_src

** Display colors in code blocks
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :diminish
    :hook org-mode prog-mode)
#+end_src
** Display Colored Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
  	 (clojure-mode . rainbow-delimiters-mode)))
#+end_src

* GIT 
** Git Time Machine
#+begin_src emacs-lisp
  (use-package git-timemachine
    :after git-timemachine
    :hook (evil-normalize-keymaps . git-timemachine-hook)
    :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)
#+end_src

** Magit
#+begin_src emacs-lisp
(use-package transient)
(use-package magit :after transient)
#+end_src

* IVY (COUNSEL)

#+begin_src emacs-lisp
        (use-package counsel
  	:diminish
          :after ivy
          :config (counsel-mode))
      (use-package ivy
        :diminish
        :bind
        (("C-c C-r" . ivy-resume)
         ("C-x B" . ivy-switch-buffer-other-window))
        :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
  (ivy-mode))
  (use-package nerd-icons-ivy-rich
    :diminish
    :init (nerd-icons-ivy-rich-mode 1))
  (use-package ivy-rich
    :diminish
    :after ivy
    :init (ivy-rich-mode 1)
    :custom
    (ivy-virtual-abbreviate 'full
  			  ivy-rich-switch-buffer-align-virtual-buffer t
  			  ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
  			       'ivy-rich-switch-buffer-transformer))
#+end_src

* LANGUAGE SUPPORT/LSP

** Lua
#+begin_src emacs-lisp
(use-package lua-mode)
#+end_src

** Tbd

* MODELINE
#+begin_src emacs-lisp
  (use-package doom-modeline
  	      :init (doom-modeline-mode 1)
  	      :config
  	      (setq doom-modeline-height 20
  		    doom-modeline-bar-width 5
  		    doom-modeline-persp-name t
  		    doom-modeline-persp-icon t))
#+end_src
* NEOTREE
#+begin_src emacs-lisp
(use-package neotree
  :config
  (setq neo-smart-open t
        neo-show-hidden-files t
        neo-window-width 55
        neo-window-fixed-size nil
        inhibit-compacting-font-caches 
t
        projectile-switch-project-action 'neotree-projectile-action) 
        ;; truncate long file names in neotree
        (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil))))
(evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
    (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
    (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
    (evil-define-key 'normal neotree-mode-map (kbd "j") 'neotree-next-line)
    (evil-define-key 'normal neotree-mode-map (kbd "k") 'neotree-previous-line)
    (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
    (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)
(evil-define-key 'insert neotree-mode-map (kbd "j") 'neotree-next-line)
    (evil-define-key 'insert neotree-mode-map (kbd "k") 'neotree-previous-line)
)
#+end_src
* ORG MODE

** Enabling Table of Contents

#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** QOL Enhancements in Org mode
#+begin_src emacs-lisp
(electric-indent-mode -1)
(electric-pair-mode 1)
(add-hook 'org-mode-hook (lambda ()
			   (setq-local electric-pair-inhibit-predicate
				       '(lambda (c)
					  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
(global-auto-revert-mode t)
(setq org-edit-src-content-indentation 0)
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src 

** Enable tempo shortcuts

#+begin_src emacs-lisp 
  (require 'org-tempo)
#+end_src

* PROJECTILE

#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode 1))
#+end_src

* RELOAD EMACS

** Define interactive function that reloads init.el file
#+begin_src emacs-lisp
  (defun reload-init-file ()
    (interactive)
    (load-file user-init-file)
    (load-file user-init-file))
#+end_src

* SHELLS AND TERMINALS

** Eshell
#+begin_src emacs-lisp
    ;; on windows, make pwsh the default shell
  (when (eq system-type 'windows-nt)
    (let ((xlist
           '(
            "~/AppData/Local/Microsoft/WindowsApps/pwsh.exe"
            "C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe"
            ))
          xfound)
      (setq xfound (seq-some (lambda (x) (if (file-exists-p x) x nil)) xlist))
      (when xfound (setq explicit-shell-file-name xfound))))
      (use-package eshell-syntax-highlighting
      :after esh-mode
      :config
      (eshell-syntax-highlighting-global-mode +1))
      
    (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
          eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
          eshell-history-size 5000
          eshell-buffer-maximum-lines 5000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t
          eshell-destroy-buffer-when-process-dies t
          eshell-visual-commands '("bash", "fish", "htop", "ssh", "top", "zsh"))
#+end_src
** Pwsh
#+begin_src emacs-lisp
 (require 'shell)
(autoload 'powershell "powershell" "Run powershell as a shell within emacs." t)

(defun powershell-gen-window-width-string ()
  (concat  "$a = (Get-Host).UI.RawUI\n" 
            "$b = $a.WindowSize\n"
            "$b.Width = " (number-to-string  (window-width)) "\n"
            "$a.BufferSize = $b\n"
            "$a.WindowSize = $b")
  )
  

(defvar powershell-prompt-pattern  "PS [^#$%>]+>" 
  "Regexp for powershell prompt.  This isn't really used, because I couldn't figure out how to get it to work."
  )

(defgroup powershell nil
  "Running shell from within Emacs buffers."
  :group 'processes
  )


(defcustom powershell-need-rawui-resize t
  "set when powershell needs to be resized"
  :group 'powershell
)

;;;###autoload
(defun powershell (&optional buffer)
  "Run an inferior powershell, by invoking the shell function. See the help for shell for more details.
\(Type \\[describe-mode] in the shell buffer for a list of commands.)"
  (interactive
   (list
    (and current-prefix-arg
         (read-buffer "Shell buffer: "
                      (generate-new-buffer-name "*PowerShell*")))))
  ; get a name for the buffer
  (setq buffer (get-buffer-create (or buffer "*PowerShell*")))

  (let (
        (tmp-shellfile explicit-shell-file-name)
        )
                                        ; set arguments for the powershell exe.
                                        ; This needs to be tunable.
    (setq explicit-shell-file-name "c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe")  
    (setq explicit-powershell.exe-args '("-Command" "-" )) ; interactive, but no command prompt
  
                                        ; launch the shell
    (shell buffer)

    ; restore the original shell
    (if explicit-shell-file-name
        (setq explicit-shell-file-name tmp-shellfile)
      )
    )
  
  (let (
        (proc (get-buffer-process buffer))
        )
    
    ; This sets up the powershell RawUI screen width. By default,
    ; the powershell v1.0 assumes terminal width of 80 chars.
    ;This means input gets wrapped at the 80th column.  We reset the
    ; width of the PS terminal to the window width. 
    (add-hook 'window-size-change-functions 'powershell-window-size-changed)

    (powershell-window-size-changed)
    
    ; ask for initial prompt
    (comint-simple-send proc "prompt")
    )

  ; hook the kill-buffer action so we can kill the inferior process?
  (add-hook 'kill-buffer-hook 'powershell-delete-process)

  ; wrap the comint-input-sender with a PS version
  ; must do this after launching the shell! 
  (make-local-variable 'comint-input-sender)
  (setq comint-input-sender 'powershell-simple-send)

  ; set a preoutput filter for powershell.  This will trim newlines after the prompt.
  (add-hook 'comint-preoutput-filter-functions 'powershell-preoutput-filter-for-prompt)

  ;(run-hooks 'powershell-launch-hook)

  ; return the buffer created
  buffer
)


(defun powershell-window-size-changed (&optional frame)
  ; do not actually resize here. instead just set a flag.
  (setq powershell-need-rawui-resize t)
)



(defun powershell-delete-process (&optional proc)
  (or proc
      (setq proc (get-buffer-process (current-buffer))))
  (and (processp proc)
       (delete-process proc))
  )



;; This function trims the newline from the prompt that we
;; get back from powershell.  It is set into the preoutput
;; filters, so the newline is trimmed before being put into
;; the output buffer.
(defun powershell-preoutput-filter-for-prompt (string)
   (if
       ; not sure why, but I have not succeeded in using a variable here???  
       ;(string-match  powershell-prompt-pattern  string)

       (string-match  "PS [^#$%>]+>" string)
       (substring string 0 -1)
     
     string

     )
   )



(defun powershell-simple-send (proc string)
  "Override of the comint-simple-send function, specific for powershell.
This just sends STRING, plus the prompt command. Normally powershell is in
noninteractive model when run as an inferior shell with stdin/stdout
redirected, which is the case when running as a shell within emacs.
This function insures we get and display the prompt. "
  ; resize if necessary. We do this by sending a resize string to the shell,
  ; before sending the actual command to the shell. 
  (if powershell-need-rawui-resize
      (and
       (comint-simple-send proc (powershell-gen-window-width-string))
       (setq powershell-need-rawui-resize nil)
       )
    )
  (comint-simple-send proc string)
  (comint-simple-send proc "prompt")
) 
#+end_src

# ** Vterm
# #+begin_src emacs-lisp
#   (use-package vterm
#     :config
#   (setq shell-file-name "C:\\Program Files\\Git\\git-bash.exe"
#         vterm-max-scrollback 5000))
# #+end_src

# ** Vterm-Toggle
# #+begin_src emacs-lisp
#   (use-package vterm-toggle
#     :after vterm
#     :config
#     (setq vterm-toggle-fullscreen-p nil)
#     (setq vterm-toggle-scope 'project)
#     (add-to-list 'display-buffer-alist
#   		     '((lambda (buffer-or-name _)
#   		 (let ((buffer (get-buffer buffer-or-name)))
#   		   (with-current-buffer buffer
#   		     (or (equal major-mode 'vterm-mode)
#   			 (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
#   	       (display-buffer-reuse-window display-buffer-at-bottom)
#   	       (reusable-frams . visible)
#   	       (window-height . 0.3))))
# #+end_src

* WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :init
     (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
      which-key-sort-order #'which-key-key-order-alpha
      whick-key-sort-uppercase-first nil
      which-key-add-column-padding 1
      which-key-max-display-columns nil
      which-key-min-display-lines 6
      which-key-side-window-slot -10
      which-key-side-window-max-height 0.25
      which-key-idle-delay 0.8
      which-key-max-description-length 25
      which-key-allow-imprecise-window-fit t
      which-key-separator " > " ))
 #+end_src
