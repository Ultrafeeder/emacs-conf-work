;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[[nil nil #17=(headline (:standard-properties [134 134 160 1872 1872 0 #2=(:title) nil element t nil 162 1872 1 nil [org-element-deferred org-element--headline-deferred nil t] nil #3=(org-data (:standard-properties [1 1 1 22382 22382 0 nil org-data nil t nil 3 22382 nil nil nil nil nil] :path "c:/Users/stratjm/.emacs.d/config.org" :fragile-cache nil :CATEGORY "config"))] :pre-blank 0 :raw-value #1=[org-element-deferred org-element--headline-parse-title (t) t] :title #1# :level #1# :priority #1# :tags #1# :todo-keyword #1# :todo-type #1# :footnote-section-p #1# :archivedp #1# :commentedp #1#)) 0] [nil nil #40=(headline (:standard-properties [1908 1908 1935 2240 2240 0 #2# section element t nil 1937 2238 2 nil nil nil #7=(headline (:standard-properties [1872 1872 1908 6925 6925 0 #2# nil element t nil 1910 6923 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 34) t] :title #4=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #6=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil :fragile-cache nil))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 25) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #7# 0] [[nil nil #44=(headline (:standard-properties [2344 2344 2363 3174 3174 0 #2# nil element t nil 2365 3172 2 nil nil nil #7#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 17) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #48=(headline (:standard-properties [6925 6925 6942 7145 7145 0 (:title) nil element t nil 6944 7143 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 15) t] :title [org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p [org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp [org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] #47=(headline (:standard-properties [3174 3174 3198 6925 6925 0 (:title) nil nil t nil 3200 6923 2 nil nil nil #7#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 22) t] :title [org-element-deferred org-element-property-2 (:raw-value) nil] :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p [org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp [org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil :fragile-cache nil)) 0] #42=(headline (:standard-properties [2240 2240 2259 2344 2344 0 #2# nil element t nil 2261 2342 2 nil nil nil #7#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 18) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[[nil nil #53=(headline (:standard-properties [7245 7245 7256 7695 7695 0 #2# nil element t nil 7258 7693 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 9) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #56=(headline (:standard-properties [8364 8364 8376 8435 8435 0 #2# nil element t nil 8378 8433 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #54=(headline (:standard-properties [7695 7695 7708 8364 8364 0 #2# nil element t nil 7710 8362 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 11) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[nil nil #60=(headline (:standard-properties [9232 9232 9244 9363 9363 0 #2# nil element t nil 9246 9361 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #63=(headline (:standard-properties [9372 9372 9398 10516 10516 0 #2# section element t nil 9400 10514 2 nil nil nil #8=(headline (:standard-properties [9363 9363 9372 10792 10792 0 #2# nil element t nil 9374 10790 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 7) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 24) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #8# 0] #58=(headline (:standard-properties [8435 8435 8443 9232 9232 0 #2# nil element t nil 8445 9230 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 7) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #50=(headline (:standard-properties [7145 7145 7155 7245 7245 0 #2# nil element t nil 7157 7243 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 8) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[[[[nil nil #9=(headline (:standard-properties [10792 10792 10827 11650 11650 0 #2# nil element t nil 10829 11648 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 33) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil :fragile-cache nil)) 0] [nil nil #68=(headline (:standard-properties [10965 10965 11009 11108 11108 0 #2# nil element t nil 11011 11106 2 nil nil nil #9#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 43) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #66=(headline (:standard-properties [10827 10827 10872 10965 10965 0 #2# section element t nil 10874 10963 2 nil nil nil #9#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 43) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[nil nil #73=(headline (:standard-properties [11201 11201 11218 11511 11511 0 #2# nil nil t nil 11220 11509 2 nil nil nil #9#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 16) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil :fragile-cache nil)) 0] [nil nil #77=(headline (:standard-properties [11650 11650 11666 12518 12518 0 #2# nil element t nil 11668 12516 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 15) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #74=(headline (:standard-properties [11511 11511 11544 11650 11650 0 #10=(:title) nil element t nil 11546 11648 2 nil nil nil #9#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 32) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #69=(headline (:standard-properties [11108 11108 11134 11201 11201 0 #2# nil element t nil 11136 11199 2 nil nil nil #9#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 25) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[nil [nil nil #80=(headline (:standard-properties [12606 12606 nil nil 12614 1 #10# nil element t nil nil nil 2 nil [org-element-deferred org-element--headline-deferred nil t] nil #12=(headline (:standard-properties [12518 12518 12542 12614 12614 0 #2# nil element t nil 12544 12612 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 22) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil))] :pre-blank 0 :raw-value #11=[org-element-deferred org-element--headline-parse-title (t) t] :title #11# :level #11# :priority #11# :tags #11# :todo-keyword #11# :todo-type #11# :footnote-section-p #11# :archivedp #11# :commentedp #11#)) 0] #79=(headline (:standard-properties [12542 12542 12549 12606 12606 0 #2# section element t nil 12551 12604 2 nil nil nil #12#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 6) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 1] [nil nil #83=(headline (:standard-properties [12887 12887 12897 14399 14399 0 #2# nil element t nil 12899 14397 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 9) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #81=(headline (:standard-properties [12614 12614 12625 12887 12887 0 #2# nil element t nil 12627 12885 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) -1] #12# 0] [[[nil nil #85=(headline (:standard-properties [14411 14411 14442 14581 14581 0 #10# section element t nil 14444 14579 2 nil nil nil #13=(headline (:standard-properties [14399 14399 14411 14949 14949 0 #10# nil element t nil 14413 14947 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 29) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #91=(headline (:standard-properties [14774 14774 14801 14864 14864 0 #10# nil element t nil 14803 14862 2 nil nil nil #13#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 26) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #86=(headline (:standard-properties [14581 14581 14606 14774 14774 0 #10# nil element t nil 14608 14772 2 nil nil nil #13#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 23) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[[nil nil #94=(headline (:standard-properties [14949 14949 14963 15054 15054 0 #10# nil element t nil 14965 15052 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 12) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #96=(headline (:standard-properties [15070 15070 15127 15271 15271 0 #10# section element t nil 15129 15269 2 nil nil nil #14=(headline (:standard-properties [15054 15054 15070 15271 15271 0 #10# nil element t nil 15072 15269 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 14) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 56) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #14# 0] [[nil nil #97=(headline (:standard-properties [15295 15295 15305 16341 16341 0 #10# section element t nil 15307 16339 2 nil nil nil #15=(headline (:standard-properties [15271 15271 15295 21759 21759 0 #10# nil element t nil 15297 21757 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 22) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 9) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #102=(headline (:standard-properties [21759 21759 21771 22382 22382 0 #10# nil element t nil 21773 22380 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 11) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #100=(headline (:standard-properties [16341 16341 16349 21759 21759 0 #10# nil element t nil 16351 21757 2 nil nil nil #15#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 7) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #15# 0] #92=(headline (:standard-properties [14864 14864 14891 14949 14949 0 #10# nil element t nil 14893 14947 2 nil nil nil #13#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 25) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 1] #13# 0] #64=(headline (:standard-properties [10516 10516 10538 10792 10792 0 #2# nil element t nil 10540 10790 2 nil nil nil #8#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 21) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[[[[nil nil #3# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 28 0 nil top-comment element t nil nil nil nil nil nil nil #16=(section (:standard-properties [1 1 1 134 134 0 nil first-section element t nil 1 134 nil nil nil nil #3#]))] :key "TITLE" :value "Work Emacs Config")) 0] #16# 0] [[nil nil (keyword (:standard-properties [51 51 nil nil 89 0 nil nil element t nil nil nil nil nil nil nil #16#] :key "DESCRIPTION" :value "Emacs config for work.")) 0] [nil nil (keyword (:standard-properties [115 115 nil nil 134 2 nil nil element t nil nil nil nil nil nil nil #16#] :key "OPTIONS" :value "toc:2")) 0] (keyword (:standard-properties [89 89 nil nil 115 0 nil nil element t nil nil nil nil nil nil nil #16#] :key "STARTUP" :value "showeverything")) 0] (keyword (:standard-properties [28 28 nil nil 51 0 nil nil element t nil nil nil nil nil nil nil #16#] :key "AUTHOR" :value "Ultrafeeder4")) 0] [[[nil nil #19=(section (:standard-properties [160 160 160 1872 1872 0 nil section element t nil 160 1872 nil nil nil nil #17#])) 0] [nil nil #21=(item (:standard-properties [160 160 162 422 422 0 #26=(:tag) item element t nil nil nil nil nil nil #18=((160 0 "- " nil nil nil 422) (234 2 "- " nil nil nil 290) (290 2 "- " nil nil nil 332) (332 2 "- " nil nil nil 372) (372 2 "- " nil nil nil 422) (422 0 "- " nil nil nil 458) (458 0 "- " nil nil nil 480) (480 0 "- " nil nil nil 504) (504 0 "- " nil nil nil 532) (532 0 "- " nil nil nil 558) (558 0 "- " nil nil nil 578) (578 0 "- " nil nil nil 604) (604 0 "- " nil nil nil 725) (624 2 "- " nil nil nil 678) (678 2 "- " nil nil nil 725) (725 0 "- " nil nil nil 1143) (797 2 "- " nil nil nil 888) (888 2 "- " nil nil nil 980) (980 2 "- " nil nil nil 1036) (1036 2 "- " nil nil nil 1073) (1073 2 "- " nil nil nil 1143) (1143 0 "- " nil nil nil 1177) (1177 0 "- " nil nil nil 1262) (1226 2 "- " nil nil nil 1244) (1244 2 "- " nil nil nil 1262) (1262 0 "- " nil nil nil 1288) (1288 0 "- " nil nil nil 1312) (1312 0 "- " nil nil nil 1568) (1338 2 "- " nil nil nil 1402) (1402 2 "- " nil nil nil 1454) (1454 2 "- " nil nil nil 1512) (1512 2 "- " nil nil nil 1568) (1568 0 "- " nil nil nil 1598) (1598 0 "- " nil nil nil 1749) (1632 2 "- " nil nil nil 1749) (1749 0 "- " nil nil nil 1843) (1799 2 "- " nil nil nil 1823) (1823 2 "- " nil nil nil 1843) (1843 0 "- " nil nil nil 1871)) #20=(plain-list (:standard-properties [160 160 160 1871 1872 1 nil planning element t nil nil nil nil nil nil #18# #19#] :type unordered))] :bullet #27="- " :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] #20# 0] [nil nil #22=(plain-list (:standard-properties [234 234 234 422 422 0 nil nil element t nil nil nil nil nil nil #18# #21#] :type unordered)) 0] (paragraph (:standard-properties [162 162 162 234 234 0 nil nil element t nil nil nil nil nil nil nil #21#])) -1] #17# 0] [[[nil nil (item (:standard-properties [290 290 294 332 332 0 #23=(:tag) item element t nil nil nil nil nil nil #18# #22#] :bullet #24="- " :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil [nil nil (paragraph (:standard-properties [376 376 376 422 422 0 nil nil element t nil nil nil nil nil nil nil #25=(item (:standard-properties [372 372 376 422 422 0 #23# item element t nil nil nil nil nil nil #18# #22#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] #25# 1] (item (:standard-properties [332 332 336 372 372 0 #23# item element t nil nil nil nil nil nil #18# #22#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 1] [[nil nil (item (:standard-properties [458 458 460 480 480 0 #26# item element t nil nil nil nil nil nil #18# #20#] :bullet #27# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (item (:standard-properties [504 504 506 532 532 0 #26# item element t nil nil nil nil nil nil #18# #20#] :bullet #27# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [480 480 482 504 504 0 #26# item element t nil nil nil nil nil nil #18# #20#] :bullet #27# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [422 422 424 458 458 0 #26# item element t nil nil nil nil nil nil #18# #20#] :bullet #27# :checkbox nil :counter nil :pre-blank 0 :tag nil)) -1] (item (:standard-properties [234 234 238 290 290 0 #23# item element t nil nil nil nil nil nil #18# #22#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[[[nil nil (item (:standard-properties [558 558 560 578 578 0 #26# item element t nil nil nil nil nil nil #18# #20#] :bullet #27# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil #28=(item (:standard-properties [604 604 606 725 725 0 #26# item element t nil nil nil nil nil nil #18# #20#] :bullet #27# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [578 578 580 604 604 0 #26# item element t nil nil nil nil nil nil #18# #20#] :bullet #27# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[nil nil #29=(plain-list (:standard-properties [624 624 624 725 725 0 nil nil element t nil nil nil nil nil nil #18# #28#] :type unordered)) 0] [nil nil (item (:standard-properties [678 678 682 725 725 0 #23# item element t nil nil nil nil nil nil #18# #29#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [624 624 628 678 678 0 #23# item element t nil nil nil nil nil nil #18# #29#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (paragraph (:standard-properties [606 606 606 624 624 0 nil nil element t nil nil nil nil nil nil nil #28#])) 0] [[nil nil (paragraph (:standard-properties [727 727 727 797 797 0 nil nil element t nil nil nil nil nil nil nil #30=(item (:standard-properties [725 725 727 1143 1143 0 #26# item element t nil nil nil nil nil nil #18# #20#] :bullet #27# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] [nil nil (item (:standard-properties [797 797 801 888 888 0 #26# item element t nil nil nil nil nil nil #18# #31=(plain-list (:standard-properties [797 797 797 1143 1143 0 nil nil element t nil nil nil nil nil nil #18# #30#] :type unordered))] :bullet #27# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] #31# 0] #30# -1] (item (:standard-properties [532 532 534 558 558 0 #26# item element t nil nil nil nil nil nil #18# #20#] :bullet #27# :checkbox nil :counter nil :pre-blank 0 :tag nil)) -1] [[[[[[nil nil (item (:standard-properties [980 980 984 1036 1036 0 #26# item element t nil nil nil nil nil nil #18# #31#] :bullet #27# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (paragraph (:standard-properties [1040 1040 1040 1073 1073 0 nil nil element t nil nil nil nil nil nil nil #32=(item (:standard-properties [1036 1036 1040 1073 1073 0 #26# item element t nil nil nil nil nil nil #18# #31#] :bullet #27# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] #32# 0] [nil nil (item (:standard-properties [1143 1143 1145 1177 1177 0 #23# item element t nil nil nil nil nil nil #18# #20#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1073 1073 1077 1143 1143 0 #23# item element t nil nil nil nil nil nil #18# #31#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) -1] [[[nil nil (paragraph (:standard-properties [1179 1179 1179 1226 1226 0 nil nil element t nil nil nil nil nil nil nil #33=(item (:standard-properties [1177 1177 1179 1262 1262 0 #23# item element t nil nil nil nil nil nil #18# #20#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] [nil nil (item (:standard-properties [1226 1226 1230 1244 1244 0 #23# item element t nil nil nil nil nil nil #18# #34=(plain-list (:standard-properties [1226 1226 1226 1262 1262 0 nil nil element t nil nil nil nil nil nil #18# #33#] :type unordered))] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] #34# 0] [nil nil (item (:standard-properties [1262 1262 1264 1288 1288 0 #23# item element t nil nil nil nil nil nil #18# #20#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1244 1244 1248 1262 1262 0 #23# item element t nil nil nil nil nil nil #18# #34#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) -1] #33# 0] [[[[[nil nil #35=(item (:standard-properties [1312 1312 1314 1568 1568 0 #23# item element t nil nil nil nil nil nil #18# #20#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil #36=(plain-list (:standard-properties [1338 1338 1338 1568 1568 0 nil nil element t nil nil nil nil nil nil #18# #35#] :type unordered)) 0] (paragraph (:standard-properties [1314 1314 1314 1338 1338 0 nil nil element t nil nil nil nil nil nil nil #35#])) 0] [nil nil (item (:standard-properties [1402 1402 1406 1454 1454 0 #23# item element t nil nil nil nil nil nil #18# #36#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1338 1338 1342 1402 1402 0 #23# item element t nil nil nil nil nil nil #18# #36#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) -1] [[[nil nil (item (:standard-properties [1512 1512 1516 1568 1568 0 #23# item element t nil nil nil nil nil nil #18# #36#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil #37=(item (:standard-properties [1598 1598 1600 1749 1749 0 #23# item element t nil nil nil nil nil nil #18# #20#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1568 1568 1570 1598 1598 0 #23# item element t nil nil nil nil nil nil #18# #20#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (plain-list (:standard-properties [1632 1632 1632 1749 1749 0 nil nil element t nil nil nil nil nil nil #18# #37#] :type unordered)) 0] (paragraph (:standard-properties [1600 1600 1600 1632 1632 0 nil nil element t nil nil nil nil nil nil nil #37#])) -1] (item (:standard-properties [1454 1454 1458 1512 1512 0 #23# item element t nil nil nil nil nil nil #18# #36#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[[nil nil (paragraph (:standard-properties [1751 1751 1751 1799 1799 0 nil nil element t nil nil nil nil nil nil nil #38=(item (:standard-properties [1749 1749 1751 1843 1843 0 #23# item element t nil nil nil nil nil nil #18# #20#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] [[nil nil (item (:standard-properties [1799 1799 1803 1823 1823 0 #23# item element t nil nil nil nil nil nil #18# #39=(plain-list (:standard-properties [1799 1799 1799 1843 1843 0 nil nil element t nil nil nil nil nil nil #18# #38#] :type unordered))] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (item (:standard-properties [1843 1843 1845 1871 1871 0 #23# item element t nil nil nil nil nil nil #18# #20#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1823 1823 1827 1843 1843 0 #23# item element t nil nil nil nil nil nil #18# #39#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] #39# 1] [[nil nil #40# 0] [nil nil (paragraph (:standard-properties [1935 1935 1935 2116 2117 1 nil planning element t nil nil nil nil nil nil nil #41=(section (:standard-properties [1935 1935 1935 2240 2240 0 nil section element t nil 1935 2240 nil nil nil nil #40#]))])) 0] #41# 0] #7# -1] #38# 0] (item (:standard-properties [1288 1288 1290 1312 1312 0 #23# item element t nil nil nil nil nil nil #18# #20#] :bullet #24# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 1] [[[[[nil nil #42# 0] [nil nil (src-block (:standard-properties [2259 2259 nil nil 2344 1 nil planning element t nil nil nil nil nil nil nil #43=(section (:standard-properties [2259 2259 2259 2344 2344 0 nil section element t nil 2259 2344 nil nil nil nil #42#]))] :language #46="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (require 'elpaca-setup)\12  (require 'buffer-move)\12")) 0] #43# 0] [[nil nil #45=(section (:standard-properties [2363 2363 2363 3174 3174 0 nil section element t nil 2363 3174 nil nil nil nil #44#])) 0] nil (src-block (:standard-properties [2363 2363 nil nil 3174 1 nil planning element t nil nil nil nil nil nil nil #45#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package evil\12          :init\12          (setq evil-want-integration t)\12          (setq evil-want-keybinding nil)\12          (setq evil-vsplit-window-right t)\12          (setq evil-split-window-below t)\12          (evil-mode ))\12    (use-package evil-collection\12      :after evil\12      :config\12      (setq evil-collection-mode-list '(dashboard dired ibuffer))\12      (evil-collection-init))\12    (use-package evil-tutor)\12\12        ;;Turns off elpaca-use-package-mode current declaration\12        ;;Note this will cause evaluate the declaration immediately. It is not deferred.\12        ;;Useful for configuring built-in emacs features.\12        (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))\12;; Don't install anything. Defer execution of BODY\12        \12")) -1] #44# 0] [[[nil nil #49=(section (:standard-properties [3198 3198 3198 6925 6925 0 nil section element t nil 3198 6925 nil nil nil nil #47#] :fragile-cache nil)) 0] [[nil nil #48# 0] nil #52=(section (:standard-properties [6942 6942 6942 7145 7145 0 nil section element t nil 6942 7145 nil nil nil nil #48#])) -1] (src-block (:standard-properties [3198 3198 nil nil 6925 1 nil planning element t nil nil nil nil nil nil nil #49#] :language "emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package general\12        :config\12      (general-evil-setup)\12      (general-create-definer ult/leader-keys\12        :states '(normal insert visual emacs)\12        :keymaps 'override\12        :prefix \"SPC\"\12        :global-prefix \"M-SPC\")\12      (ult/leader-keys\12        \".\" '(find-file :wk \"Find file\")\12        \"f c\" '((lambda () (interactive) (find-file \"~/.emacs.d/config.org\")) :wk \"Edit emacs config\")\12        \"f r\" '(counsel-recentf :wk \"Find recent files\" )\12        \"TAB TAB\" '(comment-line :wk \"Comment lines\")\12  \11  \"p s\" '(powershell :wk \"Powershell\"))\12      (ult/leader-keys\12        \"b\" '(:ignore t :wk \"buffer\")\12        \"b b\" '(switch-to-buffer :wk \"Switch buffer\")\12        \"b i\" '(ibuffer :wk \"Ibuffer\")\12        \"b k\" '(kill-current-buffer :wk \"Kill this buffer\")\12        \"b n\" '(next-buffer :wk \"Next buffer\")\12        \"b p\" '(previous-buffer :wk \"Previous buffer\")\12        \"b r\" '(revert-buffer :wk \"Reload buffer\"))\12      (ult/leader-keys\12    \"d\" '(:ignore t :wk \"Dired\")\12    \"d d\" '(dired :wk \"Open dired\")\12    \"d j\" '(dired-jump :wk \"Dired jump to current\")\12    \"d n\" '(neotree-dir :wk \"Open directory in neotree\")\12    \"d p\" '(peep-dired :wk \"Peep-dired\"))\12  (ult/leader-keys\12      \"e\" '(:ignore t :wk \"Evaluate\")\12      \"e b\" '(eval-buffer :wk \"Evaluate elisp in buffer\")\12      \"e d\" '(eval-defun :wk \"Evaluate defun containing or after point\")\12      \"e e\" '(eval-expression :wk \"Evaluate an elisp expresssion\")\12      \"e h\" '(counsel-esh-history :wk \"Eshell history\")\12      \"e l\" '(eval-last-sexp :wk \"Evaluate elisp expression before point\")\12      \"e r\" '(eval-region :wk \"Evaluate elisp in region\")\12      \"e s\" '(eshell :wk \"Eshell\"))\12  (ult/leader-keys\12    \"h\" '(:ignore t :wk \"Help\")\12    \"h f\" '(describe-function :wk \"Describe function\")\12    \"h v\" '(describe-variable :wk \"Describe variable\")\12    \"h r r\" '((lambda () (interactive)\12  \11      (load-file \"~/.config/emacs/init.el\")\12  \11      (ignore (elpaca-process-queues)))\12  \11    :wk \"Reload Emacs\"))\12  (ult/leader-keys\12    \"m\" '(:ignore t :wk \"Org\")\12    \"m a\" '(org-agenda :wk \"Org agenda\")\12    \"m e\" '(org-export-dispatch :wk \"Org export dispatch\")\12    \"m i\" '(org-toggle-item :wk \"Org toggle item\")\12    \"m t\" '(org-todo :wk \"Org todo\")\12    \"m B\" '(org-babel-tangle :wk \"Org babel tangle\")\12    \"m T\" '(org-todo-list :wk \"Org todo list\"))\12\12  (ult/leader-keys\12    \"m b\" '(:ignore t :wk \"Tables\")\12    \"m b -\" '(org-table-insert-hline :wk \"Insert hline in table\"))\12\12  (ult/leader-keys\12    \"m d\" '(:ignore t :wk \"Date/deadline\")\12    \"m d t\" '(org-time-stamp :wk \"Org time stamp\"))\12\12  (ult/leader-keys\12    \"p\" '(projectile-command-map :wk \"Projectile\"))\12  (ult/leader-keys\12    \"t\" '(:ignore t :wk \"Toggle\")\12    \"t e\" '(eshell-toggle :wk \"Toggle eshell\")\12    \"t l\" '(display-line-numbers-mode :wk \"Toggle line numbers\")\12    \"t n\" '(neotree-toggle :wk \"Toggle neotree file viewer\")\12    \"t t\" '(visual-line-mode :wk \"Toggle truncated lines\"))\12  (ult/leader-keys\12    \"w\" '(:ignore t :wk \"Windows\")\12    ;; Window splits\12    \"w c\" '(evil-window-delete :wk \"Close window\")\12    \"w n\" '(evil-window-new :wk \"New window\")\12    \"w s\" '(evil-window-split :wk \"Horizontal split window\")\12    \"w v\" '(evil-window-vsplit :wk \"Vertical split window\")\12    ;; Window motions\12    \"w h\" '(evil-window-left :wk \"Window left\")\12    \"w j\" '(evil-window-down :wk \"Window down\")\12    \"w k\" '(evil-window-up :wk \"Window up\")\12    \"w l\" '(evil-window-right :wk \"Window right\")\12    \"w w\" '(evil-window-next :wk \"Goto next window\")\12    ;; Move Windows\12    \"w H\" '(buf-move-left :wk \"Buffer move left\")\12    \"w J\" '(buf-move-down :wk \"Buffer move down\")\12    \"w K\" '(buf-move-up :wk \"Buffer move up\")\12    \"w L\" '(buf-move-right :wk \"Buffer move right\"))\12      ) \12")) 1] [[nil nil #50# 0] [nil nil (src-block (:standard-properties [7155 7155 nil nil 7245 1 nil planning element t nil nil nil nil nil nil nil #51=(section (:standard-properties [7155 7155 7155 7245 7245 0 nil section element t nil 7155 7245 nil nil nil nil #50#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(setq backup-directory-alist '((\".*\" . \"~\\\\.backups\")))\12")) 0] #51# 0] (src-block (:standard-properties [6942 6942 nil nil 7145 1 nil planning element t nil nil nil nil nil nil nil #52#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package nerd-icons\12      ;; (nerd-icons-font-family \"Tinos Nerd Font\")\12  )\12    (use-package nerd-icons-dired\12      :hook (dired-mode . nerd-icons-dired-mode ))\12")) -1] #47# 1] [[[[nil nil #55=(section (:standard-properties [7256 7256 7256 7695 7695 0 nil section element t nil 7256 7695 nil nil nil nil #53#])) 0] [nil nil #54# 0] (src-block (:standard-properties [7256 7256 nil nil 7695 1 nil planning element t nil nil nil nil nil nil nil #55#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package company\12      :defer 2\12      :diminish\12      :custom\12      (company-begin-commands '(self-insert-command))\12      (comany-idle-delay .1)\12      (company-minimum-prefix-length 2)\12      (company-show-numbers t)\12      (company-tooltip-align-annotations 't)\12      (global-company-mode t))\12  (use-package company-box\12    :after company\12    :diminish\12    :hook (company-mode . company-box-mode))\12")) 0] [[nil nil (src-block (:standard-properties [7708 7708 nil nil 8364 1 nil planning element t nil nil nil nil nil nil nil #57=(section (:standard-properties [7708 7708 7708 8364 8364 0 nil section element t nil 7708 8364 nil nil nil nil #54#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package dashboard\12    :init\12    (setq initial-buffer-choice 'dashboard-open)\12    (setq dashboard-set-heading-icons t)\12    (setq dashboard-set-file-icons t)\12    (setq dashboard-banner-logo-title \"Welcome to the Cockpit!\")\12    (setq dashboard-startup-banner \"~/.emacs.d/themes/pngegg.png\")\12    (setq dashboard-center-content nil)\12    (setq dashboard-items '((recents . 5)\12  \11\11\11  (agenda . 5)\12  \11\11\11  (bookmarks . 3)\12  \11\11\11  (projects . 3)\12  \11\11\11  (registers . 3)))\12    :custom\12    (dashboard-modify-heading-icons '((recents . \"file-text\")\12  \11\11\11\11    (bookmarks . \"book\")))\12    :config\12    (dashboard-setup-startup-hook))\12")) 0] [nil nil #62=(section (:standard-properties [8376 8376 8376 8435 8435 0 nil section element t nil 8376 8435 nil nil nil nil #56#])) 0] #56# 0] #57# 0] [[[nil nil #58# 0] [nil nil (src-block (:standard-properties [8443 8443 nil nil 9232 0 nil planning element t nil nil nil nil nil nil nil #59=(section (:standard-properties [8443 8443 8443 9232 9232 0 nil section element t nil 8443 9232 nil nil nil nil #58#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package dired-open\12  :config\12  (setq dired-open-extensions '((\"gif\" . \"sxiv\")\12                                (\"jpg\" . \"sxiv\")\12                                (\"png\" . \"sxiv\")\12                                (\"mkv\" . \"mpv\")\12                                (\"mp4\" . \"mpv\"))))\12\12(use-package peep-dired\12  :after dired\12  :hook (evil-normalize-keymaps . peep-dired-hook)\12  :config\12    (evil-define-key 'normal dired-mode-map (kbd \"h\") 'dired-up-directory)\12    (evil-define-key 'normal dired-mode-map (kbd \"l\") 'dired-open-file) ; use dired-find-file instead if not using dired-open package\12    (evil-define-key 'normal peep-dired-mode-map (kbd \"j\") 'peep-dired-next-file)\12    (evil-define-key 'normal peep-dired-mode-map (kbd \"k\") 'peep-dired-prev-file)\12)\12")) 0] #59# 0] [[nil nil #61=(section (:standard-properties [9244 9244 9244 9363 9363 0 nil section element t nil 9244 9363 nil nil nil nil #60#])) 0] [nil nil #8# 0] (src-block (:standard-properties [9244 9244 nil nil 9363 1 nil planning element t nil nil nil nil nil nil nil #61#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package flycheck\12    :defer t\12    :diminish\12    :init (global-flycheck-mode))\12")) 0] #60# 0] (src-block (:standard-properties [8376 8376 nil nil 8435 1 nil planning element t nil nil nil nil nil nil nil #62#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package diminish)\12")) 0] #53# -1] (src-block (:standard-properties [2117 2117 nil nil 2240 1 nil nil element t nil nil nil nil nil nil nil #41#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq use-package-always-ensure t)\12  (add-to-list 'load-path \"~\\\\.emacs.d\\\\scripts\\\\\")\12")) 0] (item (:standard-properties [888 888 892 980 980 0 #26# item element t nil nil nil nil nil nil #18# #31#] :bullet #27# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 1] [[[[[[nil nil #65=(section (:standard-properties [9398 9398 9398 10516 10516 0 nil section element t nil 9398 10516 nil nil nil nil #63#])) 0] [nil nil #64# 0] (src-block (:standard-properties [9398 9398 nil nil 10516 1 nil planning element t nil nil nil nil nil nil nil #65#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (set-face-attribute 'default nil\12    :family \"BigBlueTerm437 Nerd Font Mono\"\12    :height 110\12    :weight 'medium)\12  (set-face-attribute 'variable-pitch nil\12    :family \"BigBlueTerm437 Nerd Font Mono\"\12    :height 120\12    :weight 'medium)\12  (set-face-attribute 'fixed-pitch nil\12    :family \"BigBlueTerm437 Nerd Font Mono\"\12    :height 110\12    :weight 'medium)\12  ;; Makes commented text and keywords italics.\12  ;; This is working in emacsclient but not emacs.\12  ;; Your font must have an italic face available.\12  (set-face-attribute 'font-lock-comment-face nil\12    :slant 'italic)\12  (set-face-attribute 'font-lock-keyword-face nil\12    :slant 'italic)\12\12  ;; This sets the default font on all graphical frames created after restarting Emacs.\12  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts\12  ;; are not right unless I also add this method of setting the default font.\12  (add-to-list 'default-frame-alist '(font . \"BigBlueTerm437 Nerd Font Mono\"))\12\12  ;; Uncomment the following line if line spacing needs adjusting.\12  (setq-default line-spacing 0.12)\12")) 0] [[nil nil (src-block (:standard-properties [10538 10538 nil nil 10792 1 nil planning element t nil nil nil nil nil nil nil #67=(section (:standard-properties [10538 10538 10538 10792 10792 0 nil section element t nil 10538 10792 nil nil nil nil #64#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(global-set-key (kbd \"C-=\") 'text-scale-increase)\12(global-set-key (kbd \"C--\") 'text-scale-decrease)\12(global-set-key (kbd \"<C-wheel-up>\") 'text-scale-increase)\12(global-set-key (kbd \"<C-wheel-down>\") 'text-scale-decrease)\12")) 0] [nil nil #66# 0] #9# 0] #67# 0] [[[nil nil (src-block (:standard-properties [10872 10872 nil nil 10965 1 nil planning element t nil nil nil nil nil nil nil #72=(section (:standard-properties [10872 10872 10872 10965 10965 0 nil section element t nil 10872 10965 nil nil nil nil #66#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(menu-bar-mode -1)\12(tool-bar-mode -1)\12(scroll-bar-mode -1)\12")) 0] [nil nil #71=(section (:standard-properties [11009 11009 11009 11108 11108 0 nil section element t nil 11009 11108 nil nil nil nil #68#])) 0] #68# 0] [[nil nil #69# 0] [nil nil (src-block (:standard-properties [11134 11134 nil nil 11201 0 nil planning element t nil nil nil nil nil nil nil #70=(section (:standard-properties [11134 11134 11134 11201 11201 0 nil section element t nil 11134 11201 nil nil nil nil #69#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq inhibit-startup-screen t)\12")) 0] #70# 0] (src-block (:standard-properties [11009 11009 nil nil 11108 1 nil planning element t nil nil nil nil nil nil nil #71#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(global-display-line-numbers-mode 1)\12(global-visual-line-mode t)\12")) 0] #72# 0] [[[[nil nil #75=(section (:standard-properties [11218 11218 11218 11511 11511 0 nil section element t nil 11218 11511 nil nil nil nil #73#] :fragile-cache nil)) 0] [nil nil #74# 0] (src-block (:standard-properties [11218 11218 nil nil 11511 0 nil planning element t nil nil nil nil nil nil nil #75#] :language #87="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (add-to-list 'custom-theme-load-path \"~/.emacs.d/themes/\")\12  (use-package doom-themes\12  :custom\12  (doom-themes-enable-bold t )   ; if nil, bold is universally disabled\12      (doom-themes-enable-italic t)\12      :config\12  (load-theme 'doom-sourcerer t)\12  )  ;\12")) 0] [nil nil (src-block (:standard-properties [11544 11544 nil nil 11650 1 nil planning element t nil nil nil nil nil nil nil #76=(section (:standard-properties [11544 11544 11544 11650 11650 0 nil section element t nil 11544 11650 nil nil nil nil #74#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package rainbow-mode\12    :diminish\12    :hook org-mode prog-mode)\12")) 0] #76# -1] [[nil nil #78=(section (:standard-properties [11666 11666 11666 12518 12518 0 nil section element t nil 11666 12518 nil nil nil nil #77#])) 0] [nil nil #12# 0] (src-block (:standard-properties [11666 11666 nil nil 12518 1 nil planning element t nil nil nil nil nil nil nil #78#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "        (use-package counsel\12  \11:diminish\12          :after ivy\12          :config (counsel-mode))\12      (use-package ivy\12        :diminish\12        :bind\12        ((\"C-c C-r\" . ivy-resume)\12         (\"C-x B\" . ivy-switch-buffer-other-window))\12        :custom\12    (setq ivy-use-virtual-buffers t)\12    (setq ivy-count-format \"(%d/%d) \")\12    (setq enable-recursive-minibuffers t)\12    :config\12  (ivy-mode))\12  (use-package nerd-icons-ivy-rich\12    :diminish\12    :init (nerd-icons-ivy-rich-mode 1))\12  (use-package ivy-rich\12    :diminish\12    :after ivy\12    :init (ivy-rich-mode 1)\12    :custom\12    (ivy-virtual-abbreviate 'full\12  \11\11\11  ivy-rich-switch-buffer-align-virtual-buffer t\12  \11\11\11  ivy-rich-path-style 'abbrev)\12    :config\12    (ivy-set-display-transformer 'ivy-switch-buffer\12  \11\11\11       'ivy-rich-switch-buffer-transformer))\12")) 0] #77# -1] #73# 0] [[[[[nil nil #82=(section (:standard-properties [12549 12549 12549 12606 12606 0 nil section element t nil 12549 12606 nil nil nil nil #79#])) 0] [[nil nil #80# 0] nil #81# -1] (src-block (:standard-properties [12549 12549 nil nil 12606 1 nil planning element t nil nil nil nil nil nil nil #82#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package lua-mode)\12")) 1] [[nil nil (src-block (:standard-properties [12625 12625 nil nil 12887 0 nil planning element t nil nil nil nil nil nil nil #84=(section (:standard-properties [12625 12625 12625 12887 12887 0 nil section element t nil 12625 12887 nil nil nil nil #81#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package doom-modeline\12  \11      :init (doom-modeline-mode 1)\12  \11      :config\12  \11      (setq doom-modeline-height 20\12  \11\11    doom-modeline-bar-width 5\12  \11\11    doom-modeline-persp-name t\12  \11\11    doom-modeline-persp-icon t))\12")) 0] [nil nil #90=(section (:standard-properties [12897 12897 12897 14399 14399 0 nil section element t nil 12897 14399 nil nil nil nil #83#])) 0] #83# 0] #84# -1] [[[nil nil #13# 0] [nil nil #89=(section (:standard-properties [14442 14442 14442 14581 14581 0 nil section element t nil 14442 14581 nil nil nil nil #85#])) 0] #85# 0] [[nil nil #86# 0] [nil nil (src-block (:standard-properties [14606 14606 nil nil 14774 1 nil planning element t nil nil nil nil nil nil nil #88=(section (:standard-properties [14606 14606 14606 14774 14774 0 nil section element t nil 14606 14774 nil nil nil nil #86#]))] :language #87# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (add-hook 'org-mode-hook 'org-indent-mode)\12  (use-package org-bullets)\12  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))\12")) 0] #88# 0] (src-block (:standard-properties [14442 14442 nil nil 14581 1 nil planning element t nil nil nil nil nil nil nil #89#] :language #87# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package toc-org\12    :commands toc-org-enable\12    :init (add-hook 'org-mode-hook 'toc-org-enable))\12")) 0] (src-block (:standard-properties [12897 12897 nil nil 14399 0 nil planning element t nil nil nil nil nil nil nil #90#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package neotree\12  :config\12  (setq neo-smart-open t\12        neo-show-hidden-files t\12        neo-window-width 55\12        neo-window-fixed-size nil\12        inhibit-compacting-font-caches t\12        projectile-switch-project-action 'neotree-projectile-action) \12        ;; truncate long file names in neotree\12        (add-hook 'neo-after-create-hook\12           #'(lambda (_)\12               (with-current-buffer (get-buffer neo-buffer-name)\12                 (setq truncate-lines t)\12                 (setq word-wrap nil)\12                 (make-local-variable 'auto-hscroll-mode)\12                 (setq auto-hscroll-mode nil))))\12(evil-define-key 'normal neotree-mode-map (kbd \"TAB\") 'neotree-enter)\12    (evil-define-key 'normal neotree-mode-map (kbd \"SPC\") 'neotree-quick-look)\12    (evil-define-key 'normal neotree-mode-map (kbd \"q\") 'neotree-hide)\12    (evil-define-key 'normal neotree-mode-map (kbd \"RET\") 'neotree-enter)\12    (evil-define-key 'normal neotree-mode-map (kbd \"g\") 'neotree-refresh)\12    (evil-define-key 'normal neotree-mode-map (kbd \"j\") 'neotree-next-line)\12    (evil-define-key 'normal neotree-mode-map (kbd \"k\") 'neotree-previous-line)\12    (evil-define-key 'normal neotree-mode-map (kbd \"A\") 'neotree-stretch-toggle)\12    (evil-define-key 'normal neotree-mode-map (kbd \"H\") 'neotree-hidden-file-toggle)\12(evil-define-key 'insert neotree-mode-map (kbd \"j\") 'neotree-next-line)\12    (evil-define-key 'insert neotree-mode-map (kbd \"k\") 'neotree-previous-line)\12)\12")) -1] [[[[[nil nil #93=(section (:standard-properties [14801 14801 14801 14864 14864 0 nil section element t nil 14801 14864 nil nil nil nil #91#])) 0] [nil nil #92# 0] (src-block (:standard-properties [14801 14801 nil nil 14864 1 nil planning element t nil nil nil nil nil nil nil #93#] :language #87# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (electric-indent-mode -1)\12")) 0] [[nil nil (src-block (:standard-properties [14891 14891 nil nil 14949 1 nil planning element t nil nil nil nil nil nil nil #95=(section (:standard-properties [14891 14891 14891 14949 14949 0 nil section element t nil 14891 14949 nil nil nil nil #92#]))] :language #87# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (require 'org-tempo)\12")) 0] [nil nil #99=(section (:standard-properties [14963 14963 14963 15054 15054 0 nil section element t nil 14963 15054 nil nil nil nil #94#])) 0] #94# 0] #95# 0] [[[nil nil #14# 0] [nil nil #98=(section (:standard-properties [15127 15127 15127 15271 15271 0 nil section element t nil 15127 15271 nil nil nil nil #96#])) 0] #96# 0] [[nil nil #15# 0] [nil nil #104=(section (:standard-properties [15305 15305 15305 16341 16341 0 nil section element t nil 15305 16341 nil nil nil nil #97#])) 0] #97# 0] (src-block (:standard-properties [15127 15127 nil nil 15271 1 nil planning element t nil nil nil nil nil nil nil #98#] :language #87# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun reload-init-file ()\12    (interactive)\12    (load-file user-init-file)\12    (load-file user-init-file))\12")) 0] (src-block (:standard-properties [14963 14963 nil nil 15054 1 nil planning element t nil nil nil nil nil nil nil #99#] :language #87# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package projectile\12  :config\12  (projectile-mode 1))\12")) 0] [[[nil nil #100# 0] [[nil nil (src-block (:standard-properties [16349 16349 nil nil 20940 1 nil planning element t nil nil nil nil nil nil nil #101=(section (:standard-properties [16349 16349 16349 21759 21759 0 nil section element t nil 16349 21759 nil nil nil nil #100#]))] :language #87# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value " (require 'shell)\12(autoload 'powershell \"powershell\" \"Run powershell as a shell within emacs.\" t)\12\12(defun powershell-gen-window-width-string ()\12  (concat  \"$a = (Get-Host).UI.RawUI\\n\" \12            \"$b = $a.WindowSize\\n\"\12            \"$b.Width = \" (number-to-string  (window-width)) \"\\n\"\12            \"$a.BufferSize = $b\\n\"\12            \"$a.WindowSize = $b\")\12  )\12  \12\12(defvar powershell-prompt-pattern  \"PS [^#$%>]+>\" \12  \"Regexp for powershell prompt.  This isn't really used, because I couldn't figure out how to get it to work.\"\12  )\12\12(defgroup powershell nil\12  \"Running shell from within Emacs buffers.\"\12  :group 'processes\12  )\12\12\12(defcustom powershell-need-rawui-resize t\12  \"set when powershell needs to be resized\"\12  :group 'powershell\12)\12\12;;;###autoload\12(defun powershell (&optional buffer)\12  \"Run an inferior powershell, by invoking the shell function. See the help for shell for more details.\12\\(Type \\\\[describe-mode] in the shell buffer for a list of commands.)\"\12  (interactive\12   (list\12    (and current-prefix-arg\12         (read-buffer \"Shell buffer: \"\12                      (generate-new-buffer-name \"*PowerShell*\")))))\12  ; get a name for the buffer\12  (setq buffer (get-buffer-create (or buffer \"*PowerShell*\")))\12\12  (let (\12        (tmp-shellfile explicit-shell-file-name)\12        )\12                                        ; set arguments for the powershell exe.\12                                        ; This needs to be tunable.\12    (setq explicit-shell-file-name \"c:\\\\windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\")  \12    (setq explicit-powershell.exe-args '(\"-Command\" \"-\" )) ; interactive, but no command prompt\12  \12                                        ; launch the shell\12    (shell buffer)\12\12    ; restore the original shell\12    (if explicit-shell-file-name\12        (setq explicit-shell-file-name tmp-shellfile)\12      )\12    )\12  \12  (let (\12        (proc (get-buffer-process buffer))\12        )\12    \12    ; This sets up the powershell RawUI screen width. By default,\12    ; the powershell v1.0 assumes terminal width of 80 chars.\12    ;This means input gets wrapped at the 80th column.  We reset the\12    ; width of the PS terminal to the window width. \12    (add-hook 'window-size-change-functions 'powershell-window-size-changed)\12\12    (powershell-window-size-changed)\12    \12    ; ask for initial prompt\12    (comint-simple-send proc \"prompt\")\12    )\12\12  ; hook the kill-buffer action so we can kill the inferior process?\12  (add-hook 'kill-buffer-hook 'powershell-delete-process)\12\12  ; wrap the comint-input-sender with a PS version\12  ; must do this after launching the shell! \12  (make-local-variable 'comint-input-sender)\12  (setq comint-input-sender 'powershell-simple-send)\12\12  ; set a preoutput filter for powershell.  This will trim newlines after the prompt.\12  (add-hook 'comint-preoutput-filter-functions 'powershell-preoutput-filter-for-prompt)\12\12  ;(run-hooks 'powershell-launch-hook)\12\12  ; return the buffer created\12  buffer\12)\12\12\12(defun powershell-window-size-changed (&optional frame)\12  ; do not actually resize here. instead just set a flag.\12  (setq powershell-need-rawui-resize t)\12)\12\12\12\12(defun powershell-delete-process (&optional proc)\12  (or proc\12      (setq proc (get-buffer-process (current-buffer))))\12  (and (processp proc)\12       (delete-process proc))\12  )\12\12\12\12;; This function trims the newline from the prompt that we\12;; get back from powershell.  It is set into the preoutput\12;; filters, so the newline is trimmed before being put into\12;; the output buffer.\12(defun powershell-preoutput-filter-for-prompt (string)\12   (if\12       ; not sure why, but I have not succeeded in using a variable here???  \12       ;(string-match  powershell-prompt-pattern  string)\12\12       (string-match  \"PS [^#$%>]+>\" string)\12       (substring string 0 -1)\12     \12     string\12\12     )\12   )\12\12\12\12(defun powershell-simple-send (proc string)\12  \"Override of the comint-simple-send function, specific for powershell.\12This just sends STRING, plus the prompt command. Normally powershell is in\12noninteractive model when run as an inferior shell with stdin/stdout\12redirected, which is the case when running as a shell within emacs.\12This function insures we get and display the prompt. \"\12  ; resize if necessary. We do this by sending a resize string to the shell,\12  ; before sending the actual command to the shell. \12  (if powershell-need-rawui-resize\12      (and\12       (comint-simple-send proc (powershell-gen-window-width-string))\12       (setq powershell-need-rawui-resize nil)\12       )\12    )\12  (comint-simple-send proc string)\12  (comint-simple-send proc \"prompt\")\12) \12")) 0] [nil nil (comment (:standard-properties [21129 21129 nil nil 21759 1 nil nil element t nil nil nil nil nil nil nil #101#] :value "** Vterm-Toggle\12#+begin_src emacs-lisp\12  (use-package vterm-toggle\12    :after vterm\12    :config\12    (setq vterm-toggle-fullscreen-p nil)\12    (setq vterm-toggle-scope 'project)\12    (add-to-list 'display-buffer-alist\12  \11\11     '((lambda (buffer-or-name _)\12  \11\11 (let ((buffer (get-buffer buffer-or-name)))\12  \11\11   (with-current-buffer buffer\12  \11\11     (or (equal major-mode 'vterm-mode)\12  \11\11\11 (string-prefix-p vterm-buffer-name (buffer-name buffer))))))\12  \11       (display-buffer-reuse-window display-buffer-at-bottom)\12  \11       (reusable-frams . visible)\12  \11       (window-height . 0.3))))\12#+end_src")) 0] (comment (:standard-properties [20940 20940 nil nil 21129 1 nil nil element t nil nil nil nil nil nil nil #101#] :value "** Vterm\12#+begin_src emacs-lisp\12  (use-package vterm\12    :config\12  (setq shell-file-name \"C:\\\\Program Files\\\\Git\\\\git-bash.exe\"\12        vterm-max-scrollback 5000))\12#+end_src")) 0] #101# 1] [nil [nil nil (src-block (:standard-properties [21771 21771 nil nil 22382 0 nil planning element t nil nil nil nil nil nil nil #103=(section (:standard-properties [21771 21771 21771 22382 22382 0 nil section element t nil 21771 22382 nil nil nil nil #102#]))] :language #87# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package which-key\12    :diminish\12    :init\12     (which-key-mode 1)\12    :config\12    (setq which-key-side-window-location 'bottom\12      which-key-sort-order #'which-key-key-order-alpha\12      whick-key-sort-uppercase-first nil\12      which-key-add-column-padding 1\12      which-key-max-display-columns nil\12      which-key-min-display-lines 6\12      which-key-side-window-slot -10\12      which-key-side-window-max-height 0.25\12      which-key-idle-delay 0.8\12      which-key-max-description-length 25\12      which-key-allow-imprecise-window-fit t\12      which-key-separator \" > \" ))\12")) 0] #103# 1] #102# -1] (src-block (:standard-properties [15305 15305 nil nil 16341 0 nil planning element t nil nil nil nil nil nil nil #104#] :language #87# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    ;; on windows, make pwsh the default shell\12  (when (eq system-type 'windows-nt)\12    (let ((xlist\12           '(\12            \"~/AppData/Local/Microsoft/WindowsApps/pwsh.exe\"\12            \"C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe\"\12            ))\12          xfound)\12      (setq xfound (seq-some (lambda (x) (if (file-exists-p x) x nil)) xlist))\12      (when xfound (setq explicit-shell-file-name xfound))))\12      (use-package eshell-syntax-highlighting\12      :after esh-mode\12      :config\12      (eshell-syntax-highlighting-global-mode +1))\12      \12    (setq eshell-rc-script (concat user-emacs-directory \"eshell/profile\")\12          eshell-aliases-file (concat user-emacs-directory \"eshell/aliases\")\12          eshell-history-size 5000\12          eshell-buffer-maximum-lines 5000\12          eshell-hist-ignoredups t\12          eshell-scroll-to-bottom-on-input t\12          eshell-destroy-buffer-when-process-dies t\12          eshell-visual-commands '(\"bash\", \"fish\", \"htop\", \"ssh\", \"top\", \"zsh\"))\12")) 0] #91# 0] #79# 1] #63# -1] nil nil 0] org-element--cache-compare)) ((version "2.3")))