;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[[nil nil #16=(headline (:standard-properties [134 134 160 1740 1740 0 #2=(:title) nil element t nil 162 1740 1 nil #10=[org-element-deferred org-element--headline-deferred nil t] nil #3=(org-data (:standard-properties [1 1 1 23583 23583 0 nil org-data nil t nil 3 23583 nil nil nil nil nil] :path "c:/Users/stratjm/.emacs.d/config.org" :CATEGORY "config"))] :pre-blank 0 :raw-value #1=[org-element-deferred org-element--headline-parse-title (t) t] :title #1# :level #1# :priority #1# :tags #1# :todo-keyword #1# :todo-type #1# :footnote-section-p #1# :archivedp #1# :commentedp #1#)) 0] [nil nil #35=(headline (:standard-properties [1776 1776 1803 4752 4752 0 #2# section element t nil 1805 4750 2 nil nil nil #7=(headline (:standard-properties [1740 1740 1776 8478 8478 0 #2# nil element t nil 1778 8476 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 34) t] :title #4=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #6=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 25) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #7# 0] [[nil nil #40=(headline (:standard-properties [5592 5592 5616 8478 8478 0 #2# nil element t nil 5618 8476 2 nil nil nil #7#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 22) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #43=(headline (:standard-properties [8697 8697 8711 11310 11310 0 #2# nil element t nil 8713 11308 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 13) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #41=(headline (:standard-properties [8478 8478 8494 8697 8697 0 #2# nil element t nil 8496 8695 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 15) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #36=(headline (:standard-properties [4752 4752 4771 5592 5592 0 #2# nil element t nil 4773 5590 2 nil nil nil #7#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 17) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[[nil nil #47=(headline (:standard-properties [11760 11760 11773 12429 12429 0 #2# nil element t nil 11775 12427 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 11) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #51=(headline (:standard-properties [12500 12500 12512 12631 12631 0 #2# nil element t nil 12514 12629 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #48=(headline (:standard-properties [12429 12429 12441 12500 12500 0 #2# nil element t nil 12443 12498 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[nil nil #52=(headline (:standard-properties [12640 12640 12666 13784 13784 0 #2# section element t nil 12668 13782 2 nil nil nil #8=(headline (:standard-properties [12631 12631 12640 14060 14060 0 #2# nil element t nil 12642 14058 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 7) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 24) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #9=(headline (:standard-properties [14060 14060 14095 14743 14743 0 #2# nil element t nil 14097 14741 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 33) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #54=(headline (:standard-properties [13784 13784 13806 14060 14060 0 #2# nil element t nil 13808 14058 2 nil nil nil #8#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 21) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #8# 0] #45=(headline (:standard-properties [11310 11310 11321 11760 11760 0 #2# nil element t nil 11323 11758 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 9) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[[[nil nil #59=(headline (:standard-properties [14233 14233 14277 14376 14376 0 #2# nil element t nil 14279 14374 2 nil nil nil #9#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 43) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #62=(headline (:standard-properties [14469 14469 14486 14604 14604 0 #2# nil element t nil 14488 14602 2 nil nil nil #9#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 16) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #60=(headline (:standard-properties [14376 14376 14402 14469 14469 0 #2# nil element t nil 14404 14467 2 nil nil nil #9#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 25) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[nil nil #66=(headline (:standard-properties [14743 14743 14759 15611 15611 0 #2# nil element t nil 14761 15609 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 15) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil [nil nil #70=(headline (:standard-properties [15699 15699 nil nil 15707 1 #2# nil element t nil nil nil 2 nil #10# nil #11=(headline (:standard-properties [15611 15611 15635 15707 15707 0 #2# nil element t nil 15637 15705 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 22) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil))] :pre-blank 0 :raw-value #1# :title #1# :level #1# :priority #1# :tags #1# :todo-keyword #1# :todo-type #1# :footnote-section-p #1# :archivedp #1# :commentedp #1#)) 0] #69=(headline (:standard-properties [15635 15635 15642 15699 15699 0 #2# section element t nil 15644 15697 2 nil nil nil #11#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 6) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 1] #11# 1] #64=(headline (:standard-properties [14604 14604 14637 14743 14743 0 #2# nil element t nil 14639 14741 2 nil nil nil #9#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 32) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 1] [[[nil nil #72=(headline (:standard-properties [15719 15719 15750 15889 15889 0 #2# section element t nil 15752 15887 2 nil nil nil #12=(headline (:standard-properties [15707 15707 15719 16257 16257 0 #2# nil element t nil 15721 16255 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 29) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #75=(headline (:standard-properties [16082 16082 16109 16172 16172 0 #2# nil element t nil 16111 16170 2 nil nil nil #12#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 26) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #73=(headline (:standard-properties [15889 15889 15914 16082 16082 0 #2# nil element t nil 15916 16080 2 nil nil nil #12#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 23) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[[nil nil #13=(headline (:standard-properties [16257 16257 16272 16472 16472 0 #2# nil element t nil 16274 16470 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 14) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #14=(headline (:standard-properties [16472 16472 16496 22960 22960 0 #2# nil element t nil 16498 22958 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 22) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #80=(headline (:standard-properties [16272 16272 16329 16472 16472 0 #2# section element t nil 16331 16470 2 nil nil nil #13#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 56) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil [nil nil #86=(headline (:standard-properties [22960 22960 22972 23583 23583 0 #2# nil element t nil 22974 23581 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 11) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #84=(headline (:standard-properties [17542 17542 17550 22960 22960 0 #2# nil element t nil 17552 22958 2 nil nil nil #14#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 7) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 1] #82=(headline (:standard-properties [16496 16496 16506 17542 17542 0 #2# section element t nil 16508 17540 2 nil nil nil #14#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 9) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #76=(headline (:standard-properties [16172 16172 16199 16257 16257 0 #2# nil element t nil 16201 16255 2 nil nil nil #12#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 25) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 1] #12# 0] #56=(headline (:standard-properties [14095 14095 14140 14233 14233 0 #2# section element t nil 14142 14231 2 nil nil nil #9#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 43) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[[[[nil nil #3# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 28 0 nil top-comment element t nil nil nil nil nil nil nil #15=(section (:standard-properties [1 1 1 134 134 0 nil first-section element t nil 1 134 nil nil nil nil #3#]))] :key "TITLE" :value "Work Emacs Config")) 0] #15# 0] [[nil nil (keyword (:standard-properties [51 51 nil nil 89 0 nil nil element t nil nil nil nil nil nil nil #15#] :key "DESCRIPTION" :value "Emacs config for work.")) 0] [nil nil (keyword (:standard-properties [115 115 nil nil 134 2 nil nil element t nil nil nil nil nil nil nil #15#] :key "OPTIONS" :value "toc:2")) 0] (keyword (:standard-properties [89 89 nil nil 115 0 nil nil element t nil nil nil nil nil nil nil #15#] :key "STARTUP" :value "showeverything")) 0] (keyword (:standard-properties [28 28 nil nil 51 0 nil nil element t nil nil nil nil nil nil nil #15#] :key "AUTHOR" :value "Ultrafeeder4")) 0] [[nil nil #18=(section (:standard-properties [160 160 160 1740 1740 0 nil section element t nil 160 1740 nil nil nil nil #16#])) 0] [nil nil #20=(item (:standard-properties [160 160 162 380 380 0 #21=(:tag) item element t nil nil nil nil nil nil #17=((160 0 "- " nil nil nil 380) (234 2 "- " nil nil nil 290) (290 2 "- " nil nil nil 330) (330 2 "- " nil nil nil 380) (380 0 "- " nil nil nil 416) (416 0 "- " nil nil nil 448) (448 0 "- " nil nil nil 472) (472 0 "- " nil nil nil 500) (500 0 "- " nil nil nil 526) (526 0 "- " nil nil nil 552) (552 0 "- " nil nil nil 673) (572 2 "- " nil nil nil 626) (626 2 "- " nil nil nil 673) (673 0 "- " nil nil nil 1091) (745 2 "- " nil nil nil 836) (836 2 "- " nil nil nil 928) (928 2 "- " nil nil nil 984) (984 2 "- " nil nil nil 1021) (1021 2 "- " nil nil nil 1091) (1091 0 "- " nil nil nil 1125) (1125 0 "- " nil nil nil 1210) (1174 2 "- " nil nil nil 1192) (1192 2 "- " nil nil nil 1210) (1210 0 "- " nil nil nil 1466) (1236 2 "- " nil nil nil 1300) (1300 2 "- " nil nil nil 1352) (1352 2 "- " nil nil nil 1410) (1410 2 "- " nil nil nil 1466) (1466 0 "- " nil nil nil 1617) (1500 2 "- " nil nil nil 1617) (1617 0 "- " nil nil nil 1711) (1667 2 "- " nil nil nil 1691) (1691 2 "- " nil nil nil 1711) (1711 0 "- " nil nil nil 1739)) #19=(plain-list (:standard-properties [160 160 160 1739 1740 1 nil planning element t nil nil nil nil nil nil #17# #18#] :type unordered))] :bullet #23="- " :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] #19# 0] #16# -1] [[[[nil nil #22=(plain-list (:standard-properties [234 234 234 380 380 0 nil nil element t nil nil nil nil nil nil #17# #20#] :type unordered)) 0] [nil nil (item (:standard-properties [290 290 294 330 330 0 #21# item element t nil nil nil nil nil nil #17# #22#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [234 234 238 290 290 0 #21# item element t nil nil nil nil nil nil #17# #22#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[nil nil (item (:standard-properties [380 380 382 416 416 0 #21# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (item (:standard-properties [448 448 450 472 472 0 #21# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [416 416 418 448 448 0 #21# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [330 330 334 380 380 0 #21# item element t nil nil nil nil nil nil #17# #22#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[[nil nil (item (:standard-properties [500 500 502 526 526 0 #21# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil #24=(item (:standard-properties [552 552 554 673 673 0 #21# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [526 526 528 552 552 0 #21# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[nil nil #25=(plain-list (:standard-properties [572 572 572 673 673 0 nil nil element t nil nil nil nil nil nil #17# #24#] :type unordered)) 0] [nil nil (item (:standard-properties [626 626 630 673 673 0 #21# item element t nil nil nil nil nil nil #17# #25#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [572 572 576 626 626 0 #21# item element t nil nil nil nil nil nil #17# #25#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (paragraph (:standard-properties [554 554 554 572 572 0 nil nil element t nil nil nil nil nil nil nil #24#])) 0] (item (:standard-properties [472 472 474 500 500 0 #21# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (paragraph (:standard-properties [162 162 162 234 234 0 nil nil element t nil nil nil nil nil nil nil #20#])) 0] [[[[[nil nil (paragraph (:standard-properties [675 675 675 745 745 0 nil nil element t nil nil nil nil nil nil nil #26=(item (:standard-properties [673 673 675 1091 1091 0 #21# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] [nil nil (item (:standard-properties [745 745 749 836 836 0 #21# item element t nil nil nil nil nil nil #17# #27=(plain-list (:standard-properties [745 745 745 1091 1091 0 nil nil element t nil nil nil nil nil nil #17# #26#] :type unordered))] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] #27# 0] [[nil nil (item (:standard-properties [928 928 932 984 984 0 #21# item element t nil nil nil nil nil nil #17# #27#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (item (:standard-properties [1021 1021 1025 1091 1091 0 #21# item element t nil nil nil nil nil nil #17# #27#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [984 984 988 1021 1021 0 #21# item element t nil nil nil nil nil nil #17# #27#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [836 836 840 928 928 0 #21# item element t nil nil nil nil nil nil #17# #27#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[[nil nil #28=(item (:standard-properties [1125 1125 1127 1210 1210 0 #21# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil #29=(plain-list (:standard-properties [1174 1174 1174 1210 1210 0 nil nil element t nil nil nil nil nil nil #17# #28#] :type unordered)) 0] (paragraph (:standard-properties [1127 1127 1127 1174 1174 0 nil nil element t nil nil nil nil nil nil nil #28#])) 0] [[nil nil (item (:standard-properties [1192 1192 1196 1210 1210 0 #21# item element t nil nil nil nil nil nil #17# #29#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (paragraph (:standard-properties [1212 1212 1212 1236 1236 0 nil nil element t nil nil nil nil nil nil nil #30=(item (:standard-properties [1210 1210 1212 1466 1466 0 #21# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] #30# 0] (item (:standard-properties [1174 1174 1178 1192 1192 0 #21# item element t nil nil nil nil nil nil #17# #29#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1091 1091 1093 1125 1125 0 #21# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[[[nil nil (item (:standard-properties [1236 1236 1240 1300 1300 0 #21# item element t nil nil nil nil nil nil #17# #31=(plain-list (:standard-properties [1236 1236 1236 1466 1466 0 nil nil element t nil nil nil nil nil nil #17# #30#] :type unordered))] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (item (:standard-properties [1352 1352 1356 1410 1410 0 #21# item element t nil nil nil nil nil nil #17# #31#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1300 1300 1304 1352 1352 0 #21# item element t nil nil nil nil nil nil #17# #31#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[nil nil #32=(item (:standard-properties [1466 1466 1468 1617 1617 0 #21# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (plain-list (:standard-properties [1500 1500 1500 1617 1617 0 nil nil element t nil nil nil nil nil nil #17# #32#] :type unordered)) 0] (paragraph (:standard-properties [1468 1468 1468 1500 1500 0 nil nil element t nil nil nil nil nil nil nil #32#])) 0] (item (:standard-properties [1410 1410 1414 1466 1466 0 #21# item element t nil nil nil nil nil nil #17# #31#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[nil nil (paragraph (:standard-properties [1619 1619 1619 1667 1667 0 nil nil element t nil nil nil nil nil nil nil #33=(item (:standard-properties [1617 1617 1619 1711 1711 0 #21# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] [[nil nil (item (:standard-properties [1667 1667 1671 1691 1691 0 #21# item element t nil nil nil nil nil nil #17# #34=(plain-list (:standard-properties [1667 1667 1667 1711 1711 0 nil nil element t nil nil nil nil nil nil #17# #33#] :type unordered))] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (item (:standard-properties [1711 1711 1713 1739 1739 0 #21# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1691 1691 1695 1711 1711 0 #21# item element t nil nil nil nil nil nil #17# #34#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] #34# 1] #33# 0] #31# 0] #26# 0] [[[nil [nil nil #38=(section (:standard-properties [1803 1803 1803 4752 4752 0 nil section element t nil 1803 4752 nil nil nil nil #35#])) 0] #35# 1] [[nil nil #36# 0] [nil nil (src-block (:standard-properties [4771 4771 nil nil 5592 1 nil planning element t nil nil nil nil nil nil nil #37=(section (:standard-properties [4771 4771 4771 5592 5592 0 nil section element t nil 4771 5592 nil nil nil nil #36#]))] :language #39="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "              (use-package evil\12          :init\12          (setq evil-want-integration t)\12          (setq evil-want-keybinding nil)\12          (setq evil-vsplit-window-right t)\12          (setq evil-split-window-below t)\12          (evil-mode ))\12    (use-package evil-collection\12      :after evil\12      :config\12      (setq evil-collection-mode-list '(dashboard dired ibuffer))\12      (evil-collection-init))\12    (use-package evil-tutor)\12\12        ;;Turns off elpaca-use-package-mode current declaration\12        ;;Note this will cause evaluate the declaration immediately. It is not deferred.\12        ;;Useful for configuring built-in emacs features.\12        (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))\12;; Don't install anything. Defer execution of BODY\12        \12")) 0] #37# 0] (src-block (:standard-properties [1803 1803 nil nil 4752 1 nil planning element t nil nil nil nil nil nil nil #38#] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq use-package-always-ensure t)\12  (defvar elpaca-installer-version 0.11)\12  (defvar elpaca-directory (expand-file-name \"elpaca/\" user-emacs-directory))\12  (defvar elpaca-builds-directory (expand-file-name \"builds/\" elpaca-directory))\12  (defvar elpaca-repos-directory (expand-file-name \"repos/\" elpaca-directory))\12  (defvar elpaca-order '(elpaca :repo \"https://github.com/progfolio/elpaca.git\"\12                                :ref nil :depth 1 :inherit ignore\12                                :files (:defaults \"elpaca-test.el\" (:exclude \"extensions\"))\12                                :build (:not elpaca--activate-package)))\12  (let* ((repo  (expand-file-name \"elpaca/\" elpaca-repos-directory))\12         (build (expand-file-name \"elpaca/\" elpaca-builds-directory))\12         (order (cdr elpaca-order))\12         (default-directory repo))\12    (add-to-list 'load-path (if (file-exists-p build) build repo))\12    (unless (file-exists-p repo)\12      (make-directory repo t)\12      (when (<= emacs-major-version 28) (require 'subr-x))\12      (condition-case-unless-debug err\12          (if-let* ((buffer (pop-to-buffer-same-window \"*elpaca-bootstrap*\"))\12                    ((zerop (apply #'call-process `(\"git\" nil ,buffer t \"clone\"\12                                                    ,@(when-let* ((depth (plist-get order :depth)))\12                                                        (list (format \"--depth=%d\" depth) \"--no-single-branch\"))\12                                                    ,(plist-get order :repo) ,repo))))\12                    ((zerop (call-process \"git\" nil buffer t \"checkout\"\12                                          (or (plist-get order :ref) \"--\"))))\12                    (emacs (concat invocation-directory invocation-name))\12                    ((zerop (call-process emacs nil buffer nil \"-Q\" \"-L\" \".\" \"--batch\"\12                                          \"--eval\" \"(byte-recompile-directory \\\".\\\" 0 'force)\")))\12                    ((require 'elpaca))\12                    ((elpaca-generate-autoloads \"elpaca\" repo)))\12              (progn (message \"%s\" (buffer-string)) (kill-buffer buffer))\12            (error \"%s\" (with-current-buffer buffer (buffer-string))))\12        ((error) (warn \"%s\" err) (delete-directory repo 'recursive))))\12    (unless (require 'elpaca-autoloads nil t)\12      (require 'elpaca)\12      (elpaca-generate-autoloads \"elpaca\" repo)\12      (let ((load-source-file-function nil)) (load \"./elpaca-autoloads\"))))\12  (add-hook 'after-init-hook #'elpaca-process-queues)\12  (elpaca `(,@elpaca-order))\12\12  ;; Uncomment for systems which cannot create symlinks:\12   (elpaca-no-symlink-mode)\12    ;; Install use-package support\12        (elpaca elpaca-use-package\12          ;; Enable use-package :ensure support for Elpaca.\12          (elpaca-use-package-mode)\12          ;; Expands to: (elpaca evil (use-package evil :demand t))\12      (setq elpaca-use-package-by-default t))\12    (elpaca-wait)\12\12")) 0] [[[[nil nil #42=(section (:standard-properties [5616 5616 5616 8478 8478 0 nil section element t nil 5616 8478 nil nil nil nil #40#])) 0] [nil nil #41# 0] (src-block (:standard-properties [5616 5616 nil nil 8478 1 nil planning element t nil nil nil nil nil nil nil #42#] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "        (use-package general\12            :config\12          (general-evil-setup)\12          (general-create-definer ult/leader-keys\12            :states '(normal insert visual emacs)\12            :keymaps 'override\12            :prefix \"SPC\"\12            :global-prefix \"M-SPC\")\12          (ult/leader-keys\12            \".\" '(find-file :wk \"Find file\")\12            \"f c\" '((lambda () (interactive) (find-file \"~/.emacs.d/config.org\")) :wk \"Edit emacs config\")\12            \"f r\" '(counsel-recentf :wk \"Find recent files\" )\12            \"TAB TAB\" '(comment-line :wk \"Comment lines\")\12  \11  \"p s\" '(powershell :wk \"Powershell\"))\12          (ult/leader-keys\12            \"b\" '(:ignore t :wk \"buffer\")\12            \"b b\" '(switch-to-buffer :wk \"Switch buffer\")\12            \"b i\" '(ibuffer :wk \"Ibuffer\")\12            \"b k\" '(kill-current-buffer :wk \"Kill this buffer\")\12            \"b n\" '(next-buffer :wk \"Next buffer\")\12            \"b p\" '(previous-buffer :wk \"Previous buffer\")\12            \"b r\" '(revert-buffer :wk \"Reload buffer\"))\12      (ult/leader-keys\12          \"e\" '(:ignore t :wk \"Evaluate\")\12          \"e b\" '(eval-buffer :wk \"Evaluate elisp in buffer\")\12          \"e d\" '(eval-defun :wk \"Evaluate defun containing or after point\")\12          \"e e\" '(eval-expression :wk \"Evaluate an elisp expresssion\")\12          \"e h\" '(counsel-esh-history :wk \"Eshell history\")\12          \"e l\" '(eval-last-sexp :wk \"Evaluate elisp expression before point\")\12          \"e r\" '(eval-region :wk \"Evaluate elisp in region\")\12          \"e s\" '(eshell :wk \"Eshell\"))\12      (ult/leader-keys\12        \"h\" '(:ignore t :wk \"Help\")\12        \"h f\" '(describe-function :wk \"Describe function\")\12        \"h v\" '(describe-variable :wk \"Describe variable\")\12        \"h r r\" '(reload-init-file :wk \"Reloads emacs config\"))\12      (ult/leader-keys\12        \"t\" '(:ignore t :wk \"Toggle\")\12        \"t l\" '(display-line-numbers-mode :wk \"Toggle line numbers\")\12        \"t t\" '(visual-line-mode :wk \"Toggle truncated lines\"))\12      (ult/leader-keys\12        \"w\" '(:ignore t :wk \"Windows\")\12        ;; Window splits\12        \"w c\" '(evil-window-delete :wk \"Close window\")\12        \"w n\" '(evil-window-new :wk \"New window\")\12        \"w s\" '(evil-window-split :wk \"Horizontal split window\")\12        \"w v\" '(evil-window-vsplit :wk \"Vertical split window\")\12        ;; Window motions\12        \"w h\" '(evil-window-left :wk \"Window left\")\12        \"w j\" '(evil-window-down :wk \"Window down\")\12        \"w k\" '(evil-window-up :wk \"Window up\")\12        \"w l\" '(evil-window-right :wk \"Window right\")\12        \"w w\" '(evil-window-next :wk \"Goto next window\")\12        ;; Move Windows\12        \"w H\" '(buf-move-left :wk \"Buffer move left\")\12        \"w J\" '(buf-move-down :wk \"Buffer move down\")\12        \"w K\" '(buf-move-up :wk \"Buffer move up\")\12        \"w L\" '(buf-move-right :wk \"Buffer move right\"))\12          ) \12")) 0] [[nil nil (src-block (:standard-properties [8494 8494 nil nil 8697 1 nil planning element t nil nil nil nil nil nil nil #44=(section (:standard-properties [8494 8494 8494 8697 8697 0 nil section element t nil 8494 8697 nil nil nil nil #41#]))] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package nerd-icons\12      ;; (nerd-icons-font-family \"Tinos Nerd Font\")\12  )\12    (use-package nerd-icons-dired\12      :hook (dired-mode . nerd-icons-dired-mode ))\12")) 0] [nil nil #50=(section (:standard-properties [8711 8711 8711 11310 11310 0 nil section element t nil 8711 11310 nil nil nil nil #43#])) 0] #43# 0] #44# 0] [[[nil nil #45# 0] [nil nil (src-block (:standard-properties [11321 11321 nil nil 11760 1 nil planning element t nil nil nil nil nil nil nil #46=(section (:standard-properties [11321 11321 11321 11760 11760 0 nil section element t nil 11321 11760 nil nil nil nil #45#]))] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package company\12      :defer 2\12      :diminish\12      :custom\12      (company-begin-commands '(self-insert-command))\12      (comany-idle-delay .1)\12      (company-minimum-prefix-length 2)\12      (company-show-numbers t)\12      (company-tooltip-align-annotations 't)\12      (global-company-mode t))\12  (use-package company-box\12    :after company\12    :diminish\12    :hook (company-mode . company-box-mode))\12")) 0] #46# 0] [[nil nil #49=(section (:standard-properties [11773 11773 11773 12429 12429 0 nil section element t nil 11773 12429 nil nil nil nil #47#])) 0] [nil nil #48# 0] (src-block (:standard-properties [11773 11773 nil nil 12429 1 nil planning element t nil nil nil nil nil nil nil #49#] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package dashboard\12    :init\12    (setq initial-buffer-choice 'dashboard-open)\12    (setq dashboard-set-heading-icons t)\12    (setq dashboard-set-file-icons t)\12    (setq dashboard-banner-logo-title \"Welcome to the Cockpit!\")\12    (setq dashboard-startup-banner \"~/.emacs.d/themes/pngegg.png\")\12    (setq dashboard-center-content nil)\12    (setq dashboard-items '((recents . 5)\12  \11\11\11  (agenda . 5)\12  \11\11\11  (bookmarks . 3)\12  \11\11\11  (projects . 3)\12  \11\11\11  (registers . 3)))\12    :custom\12    (dashboard-modify-heading-icons '((recents . \"file-text\")\12  \11\11\11\11    (bookmarks . \"book\")))\12    :config\12    (dashboard-setup-startup-hook))\12")) 0] #47# 0] (src-block (:standard-properties [8711 8711 nil nil 11310 1 nil planning element t nil nil nil nil nil nil nil #50#] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(require 'windmove)\12\12;;;###autoload\12(defun buf-move-up ()\12  \"Swap the current buffer and the buffer above the split.\12If there is no split, ie now window above the current one, an\12error is signaled.\"\12;;  \"Switches between the current buffer, and the buffer above the\12;;  split, if possible.\"\12  (interactive)\12  (let* ((other-win (windmove-find-other-window 'up))\12\11 (buf-this-buf (window-buffer (selected-window))))\12    (if (null other-win)\12        (error \"No window above this one\")\12      ;; swap top with this one\12      (set-window-buffer (selected-window) (window-buffer other-win))\12      ;; move this one to top\12      (set-window-buffer other-win buf-this-buf)\12      (select-window other-win))))\12\12;;;###autoload\12(defun buf-move-down ()\12\"Swap the current buffer and the buffer under the split.\12If there is no split, ie now window under the current one, an\12error is signaled.\"\12  (interactive)\12  (let* ((other-win (windmove-find-other-window 'down))\12\11 (buf-this-buf (window-buffer (selected-window))))\12    (if (or (null other-win) \12            (string-match \"^ \\\\*Minibuf\" (buffer-name (window-buffer other-win))))\12        (error \"No window under this one\")\12      ;; swap top with this one\12      (set-window-buffer (selected-window) (window-buffer other-win))\12      ;; move this one to top\12      (set-window-buffer other-win buf-this-buf)\12      (select-window other-win))))\12\12;;;###autoload\12(defun buf-move-left ()\12\"Swap the current buffer and the buffer on the left of the split.\12If there is no split, ie now window on the left of the current\12one, an error is signaled.\"\12  (interactive)\12  (let* ((other-win (windmove-find-other-window 'left))\12\11 (buf-this-buf (window-buffer (selected-window))))\12    (if (null other-win)\12        (error \"No left split\")\12      ;; swap top with this one\12      (set-window-buffer (selected-window) (window-buffer other-win))\12      ;; move this one to top\12      (set-window-buffer other-win buf-this-buf)\12      (select-window other-win))))\12\12;;;###autoload\12(defun buf-move-right ()\12\"Swap the current buffer and the buffer on the right of the split.\12If there is no split, ie now window on the right of the current\12one, an error is signaled.\"\12  (interactive)\12  (let* ((other-win (windmove-find-other-window 'right))\12\11 (buf-this-buf (window-buffer (selected-window))))\12    (if (null other-win)\12        (error \"No right split\")\12      ;; swap top with this one\12      (set-window-buffer (selected-window) (window-buffer other-win))\12      ;; move this one to top\12      (set-window-buffer other-win buf-this-buf)\12      (select-window other-win))))\12")) 0] #40# 1] #7# -1] [[[[[[nil nil (src-block (:standard-properties [12441 12441 nil nil 12500 1 nil planning element t nil nil nil nil nil nil nil #88=(section (:standard-properties [12441 12441 12441 12500 12500 0 nil section element t nil 12441 12500 nil nil nil nil #48#]))] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package diminish)\12")) 0] [nil nil #53=(section (:standard-properties [12512 12512 12512 12631 12631 0 nil section element t nil 12512 12631 nil nil nil nil #51#])) 0] #51# 0] [[nil nil #8# 0] [nil nil #58=(section (:standard-properties [12666 12666 12666 13784 13784 0 nil section element t nil 12666 13784 nil nil nil nil #52#])) 0] #52# 0] (src-block (:standard-properties [12512 12512 nil nil 12631 1 nil planning element t nil nil nil nil nil nil nil #53#] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package flycheck\12    :defer t\12    :diminish\12    :init (global-flycheck-mode))\12")) 0] [[[nil nil #54# 0] [nil nil (src-block (:standard-properties [13806 13806 nil nil 14060 1 nil planning element t nil nil nil nil nil nil nil #55=(section (:standard-properties [13806 13806 13806 14060 14060 0 nil section element t nil 13806 14060 nil nil nil nil #54#]))] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(global-set-key (kbd \"C-=\") 'text-scale-increase)\12(global-set-key (kbd \"C--\") 'text-scale-decrease)\12(global-set-key (kbd \"<C-wheel-up>\") 'text-scale-increase)\12(global-set-key (kbd \"<C-wheel-down>\") 'text-scale-decrease)\12")) 0] #55# 0] [[nil nil #56# 0] [nil nil (src-block (:standard-properties [14140 14140 nil nil 14233 1 nil planning element t nil nil nil nil nil nil nil #57=(section (:standard-properties [14140 14140 14140 14233 14233 0 nil section element t nil 14140 14233 nil nil nil nil #56#]))] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(menu-bar-mode -1)\12(tool-bar-mode -1)\12(scroll-bar-mode -1)\12")) 0] #57# 0] #9# 0] (src-block (:standard-properties [12666 12666 nil nil 13784 1 nil planning element t nil nil nil nil nil nil nil #58#] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (set-face-attribute 'default nil\12    :family \"BigBlueTerm437 Nerd Font Mono\"\12    :height 110\12    :weight 'medium)\12  (set-face-attribute 'variable-pitch nil\12    :family \"BigBlueTerm437 Nerd Font Mono\"\12    :height 120\12    :weight 'medium)\12  (set-face-attribute 'fixed-pitch nil\12    :family \"BigBlueTerm437 Nerd Font Mono\"\12    :height 110\12    :weight 'medium)\12  ;; Makes commented text and keywords italics.\12  ;; This is working in emacsclient but not emacs.\12  ;; Your font must have an italic face available.\12  (set-face-attribute 'font-lock-comment-face nil\12    :slant 'italic)\12  (set-face-attribute 'font-lock-keyword-face nil\12    :slant 'italic)\12\12  ;; This sets the default font on all graphical frames created after restarting Emacs.\12  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts\12  ;; are not right unless I also add this method of setting the default font.\12  (add-to-list 'default-frame-alist '(font . \"BigBlueTerm437 Nerd Font Mono\"))\12\12  ;; Uncomment the following line if line spacing needs adjusting.\12  (setq-default line-spacing 0.12)\12")) 0] [[[[nil nil #61=(section (:standard-properties [14277 14277 14277 14376 14376 0 nil section element t nil 14277 14376 nil nil nil nil #59#])) 0] [nil nil #60# 0] (src-block (:standard-properties [14277 14277 nil nil 14376 1 nil planning element t nil nil nil nil nil nil nil #61#] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(global-display-line-numbers-mode 1)\12(global-visual-line-mode t)\12")) 0] [[nil nil (src-block (:standard-properties [14402 14402 nil nil 14469 0 nil planning element t nil nil nil nil nil nil nil #63=(section (:standard-properties [14402 14402 14402 14469 14469 0 nil section element t nil 14402 14469 nil nil nil nil #60#]))] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq inhibit-startup-screen t)\12")) 0] [nil nil #68=(section (:standard-properties [14486 14486 14486 14604 14604 0 nil section element t nil 14486 14604 nil nil nil nil #62#])) 0] #62# 0] #63# 0] [[[nil nil #64# 0] [nil nil (src-block (:standard-properties [14637 14637 nil nil 14743 1 nil planning element t nil nil nil nil nil nil nil #65=(section (:standard-properties [14637 14637 14637 14743 14743 0 nil section element t nil 14637 14743 nil nil nil nil #64#]))] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package rainbow-mode\12    :diminish\12    :hook org-mode prog-mode)\12")) 0] #65# 0] [[nil nil #67=(section (:standard-properties [14759 14759 14759 15611 15611 0 nil section element t nil 14759 15611 nil nil nil nil #66#])) 0] [nil nil #11# 0] (src-block (:standard-properties [14759 14759 nil nil 15611 1 nil planning element t nil nil nil nil nil nil nil #67#] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "        (use-package counsel\12  \11:diminish\12          :after ivy\12          :config (counsel-mode))\12      (use-package ivy\12        :diminish\12        :bind\12        ((\"C-c C-r\" . ivy-resume)\12         (\"C-x B\" . ivy-switch-buffer-other-window))\12        :custom\12    (setq ivy-use-virtual-buffers t)\12    (setq ivy-count-format \"(%d/%d) \")\12    (setq enable-recursive-minibuffers t)\12    :config\12  (ivy-mode))\12  (use-package nerd-icons-ivy-rich\12    :diminish\12    :init (nerd-icons-ivy-rich-mode 1))\12  (use-package ivy-rich\12    :diminish\12    :after ivy\12    :init (ivy-rich-mode 1)\12    :custom\12    (ivy-virtual-abbreviate 'full\12  \11\11\11  ivy-rich-switch-buffer-align-virtual-buffer t\12  \11\11\11  ivy-rich-path-style 'abbrev)\12    :config\12    (ivy-set-display-transformer 'ivy-switch-buffer\12  \11\11\11       'ivy-rich-switch-buffer-transformer))\12")) 0] #66# 0] (src-block (:standard-properties [14486 14486 nil nil 14604 0 nil planning element t nil nil nil nil nil nil nil #68#] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(add-to-list 'custom-theme-load-path \"~/.emacs.d/themes/\")\12(load-theme 'Backender t)\12")) 0] #59# 0] [[[[[nil nil #71=(section (:standard-properties [15642 15642 15642 15699 15699 0 nil section element t nil 15642 15699 nil nil nil nil #69#])) 0] [[nil nil #70# 0] nil #12# -1] (src-block (:standard-properties [15642 15642 nil nil 15699 1 nil planning element t nil nil nil nil nil nil nil #71#] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package lua-mode)\12")) 1] [[nil nil #74=(section (:standard-properties [15750 15750 15750 15889 15889 0 nil section element t nil 15750 15889 nil nil nil nil #72#])) 0] [nil nil #73# 0] (src-block (:standard-properties [15750 15750 nil nil 15889 1 nil planning element t nil nil nil nil nil nil nil #74#] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package toc-org\12    :commands toc-org-enable\12    :init (add-hook 'org-mode-hook 'toc-org-enable))\12")) 0] #72# -1] [[[nil nil (src-block (:standard-properties [15914 15914 nil nil 16082 1 nil planning element t nil nil nil nil nil nil nil #79=(section (:standard-properties [15914 15914 15914 16082 16082 0 nil section element t nil 15914 16082 nil nil nil nil #73#]))] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (add-hook 'org-mode-hook 'org-indent-mode)\12  (use-package org-bullets)\12  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))\12")) 0] [nil nil #78=(section (:standard-properties [16109 16109 16109 16172 16172 0 nil section element t nil 16109 16172 nil nil nil nil #75#])) 0] #75# 0] [[nil nil #76# 0] [nil nil (src-block (:standard-properties [16199 16199 nil nil 16257 1 nil planning element t nil nil nil nil nil nil nil #77=(section (:standard-properties [16199 16199 16199 16257 16257 0 nil section element t nil 16199 16257 nil nil nil nil #76#]))] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (require 'org-tempo)\12")) 0] #77# 0] (src-block (:standard-properties [16109 16109 nil nil 16172 1 nil planning element t nil nil nil nil nil nil nil #78#] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (electric-indent-mode -1)\12")) 0] #79# -1] [[[[nil nil #80# 0] [nil nil (src-block (:standard-properties [16329 16329 nil nil 16472 0 nil planning element t nil nil nil nil nil nil nil #81=(section (:standard-properties [16329 16329 16329 16472 16472 0 nil section element t nil 16329 16472 nil nil nil nil #80#]))] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun reload-init-file ()\12    (interactive)\12    (load-file user-init-file)\12    (load-file user-init-file))\12")) 0] #81# 0] [[nil nil #82# 0] [nil nil (src-block (:standard-properties [16506 16506 nil nil 17542 0 nil planning element t nil nil nil nil nil nil nil #83=(section (:standard-properties [16506 16506 16506 17542 17542 0 nil section element t nil 16506 17542 nil nil nil nil #82#]))] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    ;; on windows, make pwsh the default shell\12  (when (eq system-type 'windows-nt)\12    (let ((xlist\12           '(\12            \"~/AppData/Local/Microsoft/WindowsApps/pwsh.exe\"\12            \"C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe\"\12            ))\12          xfound)\12      (setq xfound (seq-some (lambda (x) (if (file-exists-p x) x nil)) xlist))\12      (when xfound (setq explicit-shell-file-name xfound))))\12      (use-package eshell-syntax-highlighting\12      :after esh-mode\12      :config\12      (eshell-syntax-highlighting-global-mode +1))\12      \12    (setq eshell-rc-script (concat user-emacs-directory \"eshell/profile\")\12          eshell-aliases-file (concat user-emacs-directory \"eshell/aliases\")\12          eshell-history-size 5000\12          eshell-buffer-maximum-lines 5000\12          eshell-hist-ignoredups t\12          eshell-scroll-to-bottom-on-input t\12          eshell-destroy-buffer-when-process-dies t\12          eshell-visual-commands '(\"bash\", \"fish\", \"htop\", \"ssh\", \"top\", \"zsh\"))\12")) 0] #83# 0] #14# 0] [[[nil nil #85=(section (:standard-properties [17550 17550 17550 22960 22960 0 nil section element t nil 17550 22960 nil nil nil nil #84#])) 0] [nil [nil nil (comment (:standard-properties [22330 22330 nil nil 22960 1 nil nil element t nil nil nil nil nil nil nil #85#] :value "** Vterm-Toggle\12#+begin_src emacs-lisp\12  (use-package vterm-toggle\12    :after vterm\12    :config\12    (setq vterm-toggle-fullscreen-p nil)\12    (setq vterm-toggle-scope 'project)\12    (add-to-list 'display-buffer-alist\12  \11\11     '((lambda (buffer-or-name _)\12  \11\11 (let ((buffer (get-buffer buffer-or-name)))\12  \11\11   (with-current-buffer buffer\12  \11\11     (or (equal major-mode 'vterm-mode)\12  \11\11\11 (string-prefix-p vterm-buffer-name (buffer-name buffer))))))\12  \11       (display-buffer-reuse-window display-buffer-at-bottom)\12  \11       (reusable-frams . visible)\12  \11       (window-height . 0.3))))\12#+end_src")) 0] (comment (:standard-properties [22141 22141 nil nil 22330 1 nil nil element t nil nil nil nil nil nil nil #85#] :value "** Vterm\12#+begin_src emacs-lisp\12  (use-package vterm\12    :config\12  (setq shell-file-name \"C:\\\\Program Files\\\\Git\\\\git-bash.exe\"\12        vterm-max-scrollback 5000))\12#+end_src")) 1] (src-block (:standard-properties [17550 17550 nil nil 22141 1 nil planning element t nil nil nil nil nil nil nil #85#] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value " (require 'shell)\12(autoload 'powershell \"powershell\" \"Run powershell as a shell within emacs.\" t)\12\12(defun powershell-gen-window-width-string ()\12  (concat  \"$a = (Get-Host).UI.RawUI\\n\" \12            \"$b = $a.WindowSize\\n\"\12            \"$b.Width = \" (number-to-string  (window-width)) \"\\n\"\12            \"$a.BufferSize = $b\\n\"\12            \"$a.WindowSize = $b\")\12  )\12  \12\12(defvar powershell-prompt-pattern  \"PS [^#$%>]+>\" \12  \"Regexp for powershell prompt.  This isn't really used, because I couldn't figure out how to get it to work.\"\12  )\12\12(defgroup powershell nil\12  \"Running shell from within Emacs buffers.\"\12  :group 'processes\12  )\12\12\12(defcustom powershell-need-rawui-resize t\12  \"set when powershell needs to be resized\"\12  :group 'powershell\12)\12\12;;;###autoload\12(defun powershell (&optional buffer)\12  \"Run an inferior powershell, by invoking the shell function. See the help for shell for more details.\12\\(Type \\\\[describe-mode] in the shell buffer for a list of commands.)\"\12  (interactive\12   (list\12    (and current-prefix-arg\12         (read-buffer \"Shell buffer: \"\12                      (generate-new-buffer-name \"*PowerShell*\")))))\12  ; get a name for the buffer\12  (setq buffer (get-buffer-create (or buffer \"*PowerShell*\")))\12\12  (let (\12        (tmp-shellfile explicit-shell-file-name)\12        )\12                                        ; set arguments for the powershell exe.\12                                        ; This needs to be tunable.\12    (setq explicit-shell-file-name \"c:\\\\windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\")  \12    (setq explicit-powershell.exe-args '(\"-Command\" \"-\" )) ; interactive, but no command prompt\12  \12                                        ; launch the shell\12    (shell buffer)\12\12    ; restore the original shell\12    (if explicit-shell-file-name\12        (setq explicit-shell-file-name tmp-shellfile)\12      )\12    )\12  \12  (let (\12        (proc (get-buffer-process buffer))\12        )\12    \12    ; This sets up the powershell RawUI screen width. By default,\12    ; the powershell v1.0 assumes terminal width of 80 chars.\12    ;This means input gets wrapped at the 80th column.  We reset the\12    ; width of the PS terminal to the window width. \12    (add-hook 'window-size-change-functions 'powershell-window-size-changed)\12\12    (powershell-window-size-changed)\12    \12    ; ask for initial prompt\12    (comint-simple-send proc \"prompt\")\12    )\12\12  ; hook the kill-buffer action so we can kill the inferior process?\12  (add-hook 'kill-buffer-hook 'powershell-delete-process)\12\12  ; wrap the comint-input-sender with a PS version\12  ; must do this after launching the shell! \12  (make-local-variable 'comint-input-sender)\12  (setq comint-input-sender 'powershell-simple-send)\12\12  ; set a preoutput filter for powershell.  This will trim newlines after the prompt.\12  (add-hook 'comint-preoutput-filter-functions 'powershell-preoutput-filter-for-prompt)\12\12  ;(run-hooks 'powershell-launch-hook)\12\12  ; return the buffer created\12  buffer\12)\12\12\12(defun powershell-window-size-changed (&optional frame)\12  ; do not actually resize here. instead just set a flag.\12  (setq powershell-need-rawui-resize t)\12)\12\12\12\12(defun powershell-delete-process (&optional proc)\12  (or proc\12      (setq proc (get-buffer-process (current-buffer))))\12  (and (processp proc)\12       (delete-process proc))\12  )\12\12\12\12;; This function trims the newline from the prompt that we\12;; get back from powershell.  It is set into the preoutput\12;; filters, so the newline is trimmed before being put into\12;; the output buffer.\12(defun powershell-preoutput-filter-for-prompt (string)\12   (if\12       ; not sure why, but I have not succeeded in using a variable here???  \12       ;(string-match  powershell-prompt-pattern  string)\12\12       (string-match  \"PS [^#$%>]+>\" string)\12       (substring string 0 -1)\12     \12     string\12\12     )\12   )\12\12\12\12(defun powershell-simple-send (proc string)\12  \"Override of the comint-simple-send function, specific for powershell.\12This just sends STRING, plus the prompt command. Normally powershell is in\12noninteractive model when run as an inferior shell with stdin/stdout\12redirected, which is the case when running as a shell within emacs.\12This function insures we get and display the prompt. \"\12  ; resize if necessary. We do this by sending a resize string to the shell,\12  ; before sending the actual command to the shell. \12  (if powershell-need-rawui-resize\12      (and\12       (comint-simple-send proc (powershell-gen-window-width-string))\12       (setq powershell-need-rawui-resize nil)\12       )\12    )\12  (comint-simple-send proc string)\12  (comint-simple-send proc \"prompt\")\12) \12")) 1] [nil [nil nil (src-block (:standard-properties [22972 22972 nil nil 23583 0 nil planning element t nil nil nil nil nil nil nil #87=(section (:standard-properties [22972 22972 22972 23583 23583 0 nil section element t nil 22972 23583 nil nil nil nil #86#]))] :language #39# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package which-key\12    :diminish\12    :init\12     (which-key-mode 1)\12    :config\12    (setq which-key-side-window-location 'bottom\12      which-key-sort-order #'which-key-key-order-alpha\12      whick-key-sort-uppercase-first nil\12      which-key-add-column-padding 1\12      which-key-max-display-columns nil\12      which-key-min-display-lines 6\12      which-key-side-window-slot -10\12      which-key-side-window-max-height 0.25\12      which-key-idle-delay 0.8\12      which-key-max-description-length 25\12      which-key-allow-imprecise-window-fit t\12      which-key-separator \" > \" ))\12")) 0] #87# 1] #86# -1] #84# 1] #13# 0] #69# 1] #88# 0] nil nil 0] org-element--cache-compare)) ((version "2.3")))