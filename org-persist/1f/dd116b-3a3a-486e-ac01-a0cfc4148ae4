;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[[[nil nil #30=(headline (:standard-properties [134 134 160 2050 2050 0 #2=(:title) nil nil t nil 162 2050 1 nil [org-element-deferred org-element--headline-deferred nil t] nil #3=(org-data (:standard-properties [1 1 1 29572 29572 0 nil org-data nil t nil 3 29572 nil nil nil nil nil] :path "c:/Users/stratjm/.emacs.d/config.org" :CATEGORY "config" :fragile-cache nil))] :pre-blank 0 :raw-value #1=[org-element-deferred org-element--headline-parse-title (t) t] :title #1# :level #1# :priority #1# :tags #1# :todo-keyword #1# :todo-type #1# :footnote-section-p #1# :archivedp #1# :commentedp #1#)) 0] [nil nil #54=(headline (:standard-properties [2086 2086 2113 2418 2418 0 #5=(:title) section element t nil 2115 2416 2 nil nil nil #4=(headline (:standard-properties [2050 2050 2086 11211 11211 0 #2# nil element t nil 2088 11209 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 34) t] :title #9=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #10=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #11=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil :fragile-cache nil))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 25) t] :title #6=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #8=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] #4# 0] [nil nil #59=(headline (:standard-properties [2522 2522 2541 3626 3626 0 #5# nil element t nil 2543 3624 2 nil nil nil #4#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 17) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil :fragile-cache nil)) 0] #56=(headline (:standard-properties [2418 2418 2437 2522 2522 0 #5# nil element t nil 2439 2520 2 nil nil nil #4#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 18) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] [[[nil nil #62=(headline (:standard-properties [11211 11211 11228 11431 11431 0 #22=(:title) nil element t nil 11230 11429 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 15) t] :title #23=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #24=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #25=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] nil #65=(headline (:standard-properties [11431 11431 11441 11531 11531 0 #5# nil element t nil 11443 11529 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 8) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] [[nil nil #68=(headline (:standard-properties [11981 11981 11994 12645 12645 0 #5# nil element t nil 11996 12643 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 11) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil :fragile-cache nil)) 0] [nil nil #71=(headline (:standard-properties [12716 12716 12724 13514 13514 0 #5# nil element t nil 12726 13512 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 7) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #70=(headline (:standard-properties [12645 12645 12657 12716 12716 0 #2# nil element t nil 12659 12714 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #9# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #10# :archivedp #11# :commentedp nil)) 0] #67=(headline (:standard-properties [11531 11531 11542 11981 11981 0 #5# nil element t nil 11544 11979 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 9) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #61=(headline (:standard-properties [3626 3626 3650 11211 11211 0 #5# nil element t nil 3652 11209 2 nil nil nil #4#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 22) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil :fragile-cache nil)) 0] [[[nil nil #76=(headline (:standard-properties [15388 15388 15400 15519 15519 0 #5# nil element t nil 15402 15517 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #79=(headline (:standard-properties [15528 15528 15554 16672 16672 0 #5# section element t nil 15556 16670 2 nil nil nil #12=(headline (:standard-properties [15519 15519 15528 16949 16949 0 #13=(:title) nil nil t nil 15530 16947 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 7) t] :title #14=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #15=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #16=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 24) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #12# 0] [[nil nil #17=(headline (:standard-properties [16949 16949 16984 18007 18007 0 #13# nil element t nil 16986 18005 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 33) t] :title #14# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #15# :archivedp #16# :commentedp nil)) 0] [nil nil #85=(headline (:standard-properties [17122 17122 17166 17265 17265 0 #5# nil element t nil 17168 17263 2 nil nil nil #17#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 43) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #83=(headline (:standard-properties [16984 16984 17029 17122 17122 0 #5# section element t nil 17031 17120 2 nil nil nil #17#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 43) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #80=(headline (:standard-properties [16672 16672 16694 16949 16949 0 #13# nil nil t nil 16696 16947 2 nil nil nil #12#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 21) t] :title #14# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #15# :archivedp #16# :commentedp nil)) 0] #75=(headline (:standard-properties [13514 13514 13523 15388 15388 0 #5# nil element t nil 13525 15386 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 8) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil :fragile-cache nil)) -1] [[[[[nil nil #88=(headline (:standard-properties [17358 17358 17375 17669 17669 0 #2# nil nil t nil 17377 17667 2 nil nil nil #17#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 16) t] :title #9# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #10# :archivedp #11# :commentedp nil)) 0] [nil nil #93=(headline (:standard-properties [17807 17807 17837 18007 18007 0 #2# nil element t nil 17839 18005 2 nil nil nil #17#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 29) t] :title #9# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #10# :archivedp #11# :commentedp nil)) 0] #91=(headline (:standard-properties [17669 17669 17702 17807 17807 0 #2# nil element t nil 17704 17805 2 nil nil nil #17#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 32) t] :title #9# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #10# :archivedp #11# :commentedp nil)) 0] [nil nil #94=(headline (:standard-properties [18014 18014 18034 18408 18408 0 #19=(:title) section element t nil 18036 18406 2 nil nil nil #18=(headline (:standard-properties [18007 18007 18014 18512 18512 0 (:title) nil element t nil 18016 18510 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 6) t] :title [org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p [org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp [org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil :fragile-cache nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 19) t] :title [org-element-deferred org-element-property-2 (:raw-value) nil] :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p [org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp [org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] #18# -1] [[[nil nil #97=(headline (:standard-properties [18512 18512 18529 19381 19381 0 #13# nil element t nil 18531 19379 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 15) t] :title #14# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #15# :archivedp #16# :commentedp nil)) 0] nil #20=(headline (:standard-properties [19381 19381 19405 19477 19477 0 #5# nil element t nil 19407 19475 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 22) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] [[nil nil #103=(headline (:standard-properties [19469 19469 nil nil 19477 1 #19# nil element t nil nil nil 2 nil [org-element-deferred org-element--headline-deferred nil t] nil #20#] :pre-blank 0 :raw-value #21=[org-element-deferred org-element--headline-parse-title (t) t] :title #21# :level #21# :priority #21# :tags #21# :todo-keyword #21# :todo-type #21# :footnote-section-p #21# :archivedp #21# :commentedp #21#)) 0] [nil [nil nil #26=(headline (:standard-properties [21262 21262 21274 22139 22139 0 #22# nil element t nil 21276 22137 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #23# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #24# :archivedp #25# :commentedp nil)) 0] #106=(headline (:standard-properties [19750 19750 19760 21262 21262 0 #5# nil element t nil 19762 21260 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 9) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil :fragile-cache nil)) 1] #105=(headline (:standard-properties [19477 19477 19488 19750 19750 0 #5# nil element t nil 19490 19748 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 1] #102=(headline (:standard-properties [19405 19405 19412 19469 19469 0 #5# section element t nil 19414 19467 2 nil nil nil #20#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 6) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 1] #96=(headline (:standard-properties [18408 18408 18417 18512 18512 0 #5# nil element t nil 18419 18510 2 nil nil nil #18#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil :fragile-cache nil)) 1] [[[[nil nil #112=(headline (:standard-properties [21444 21444 21469 21637 21637 0 #2# nil element t nil 21471 21635 2 nil nil nil #26#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 23) t] :title #9# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #10# :archivedp #11# :commentedp nil)) 0] [nil nil #114=(headline (:standard-properties [22054 22054 22081 22139 22139 0 #22# nil element t nil 22083 22137 2 nil nil nil #26#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 25) t] :title #23# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #24# :archivedp #25# :commentedp nil)) 0] #113=(headline (:standard-properties [21637 21637 21669 22054 22054 0 #2# nil element t nil 21671 22052 2 nil nil nil #26#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 31) t] :title #9# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #10# :archivedp #11# :commentedp nil :fragile-cache nil)) 0] [[nil nil #27=(headline (:standard-properties [22244 22244 22260 22461 22461 0 #5# nil element t nil 22262 22459 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 14) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #28=(headline (:standard-properties [22461 22461 22485 28949 28949 0 #5# nil element t nil 22487 28947 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 22) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #118=(headline (:standard-properties [22260 22260 22317 22461 22461 0 #5# section element t nil 22319 22459 2 nil nil nil #27#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 56) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #117=(headline (:standard-properties [22139 22139 22153 22244 22244 0 #5# nil element t nil 22155 22242 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 12) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil [nil nil #125=(headline (:standard-properties [28949 28949 28961 29572 29572 0 #5# nil element t nil 28963 29570 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 11) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #122=(headline (:standard-properties [23531 23531 23539 28949 28949 0 #5# nil element t nil 23541 28947 2 nil nil nil #28#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 7) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 1] #121=(headline (:standard-properties [22485 22485 22495 23531 23531 0 #5# section element t nil 22497 23529 2 nil nil nil #28#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 9) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] #109=(headline (:standard-properties [21274 21274 21305 21444 21444 0 #5# section element t nil 21307 21442 2 nil nil nil #26#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 29) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] #87=(headline (:standard-properties [17265 17265 17291 17358 17358 0 #2# nil nil t nil 17293 17356 2 nil nil nil #17#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 25) t] :title #9# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #10# :archivedp #11# :commentedp nil)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[[[[[nil nil #3# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 28 0 nil top-comment element t nil nil nil nil nil nil nil #29=(section (:standard-properties [1 1 1 134 134 0 nil first-section element t nil 1 134 nil nil nil nil #3#]))] :key "TITLE" :value "Work Emacs Config")) 0] #29# 0] [[nil nil (keyword (:standard-properties [51 51 nil nil 89 0 nil nil element t nil nil nil nil nil nil nil #29#] :key "DESCRIPTION" :value "Emacs config for work.")) 0] [nil nil (keyword (:standard-properties [115 115 nil nil 134 2 nil nil element t nil nil nil nil nil nil nil #29#] :key "OPTIONS" :value "toc:2")) 0] (keyword (:standard-properties [89 89 nil nil 115 0 nil nil element t nil nil nil nil nil nil nil #29#] :key "STARTUP" :value "showeverything")) 0] (keyword (:standard-properties [28 28 nil nil 51 0 nil nil element t nil nil nil nil nil nil nil #29#] :key "AUTHOR" :value "Ultrafeeder4")) 0] [[[nil nil #32=(section (:standard-properties [160 160 160 2050 2050 0 nil section element t nil 160 2050 nil nil nil nil #30#])) 0] [nil nil #34=(item (:standard-properties [160 160 162 422 422 0 #35=(:tag) item element t nil nil nil nil nil nil #31=((160 0 "- " nil nil nil 422) (234 2 "- " nil nil nil 290) (290 2 "- " nil nil nil 332) (332 2 "- " nil nil nil 372) (372 2 "- " nil nil nil 422) (422 0 "- " nil nil nil 458) (458 0 "- " nil nil nil 480) (480 0 "- " nil nil nil 504) (504 0 "- " nil nil nil 532) (532 0 "- " nil nil nil 558) (558 0 "- " nil nil nil 578) (578 0 "- " nil nil nil 600) (600 0 "- " nil nil nil 626) (626 0 "- " nil nil nil 747) (646 2 "- " nil nil nil 700) (700 2 "- " nil nil nil 747) (747 0 "- " nil nil nil 1229) (819 2 "- " nil nil nil 910) (910 2 "- " nil nil nil 1002) (1002 2 "- " nil nil nil 1058) (1058 2 "- " nil nil nil 1095) (1095 2 "- " nil nil nil 1165) (1165 2 "- " nil nil nil 1229) (1229 0 "- " nil nil nil 1311) (1245 2 "- " nil nil nil 1289) (1289 2 "- " nil nil nil 1311) (1311 0 "- " nil nil nil 1345) (1345 0 "- " nil nil nil 1430) (1394 2 "- " nil nil nil 1412) (1412 2 "- " nil nil nil 1430) (1430 0 "- " nil nil nil 1456) (1456 0 "- " nil nil nil 1480) (1480 0 "- " nil nil nil 1746) (1506 2 "- " nil nil nil 1570) (1570 2 "- " nil nil nil 1622) (1622 2 "- " nil nil nil 1690) (1690 2 "- " nil nil nil 1746) (1746 0 "- " nil nil nil 1776) (1776 0 "- " nil nil nil 1927) (1810 2 "- " nil nil nil 1927) (1927 0 "- " nil nil nil 2021) (1977 2 "- " nil nil nil 2001) (2001 2 "- " nil nil nil 2021) (2021 0 "- " nil nil nil 2049)) #33=(plain-list (:standard-properties [160 160 160 2049 2050 1 nil planning element t nil nil nil nil nil nil #31# #32#] :type unordered))] :bullet #37="- " :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] #33# 0] [[nil nil #36=(plain-list (:standard-properties [234 234 234 422 422 0 nil nil element t nil nil nil nil nil nil #31# #34#] :type unordered)) 0] [nil nil (item (:standard-properties [290 290 294 332 332 0 #35# item element t nil nil nil nil nil nil #31# #36#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [234 234 238 290 290 0 #35# item element t nil nil nil nil nil nil #31# #36#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (paragraph (:standard-properties [162 162 162 234 234 0 nil nil element t nil nil nil nil nil nil nil #34#])) 0] #30# 0] [[[nil [nil nil (paragraph (:standard-properties [376 376 376 422 422 0 nil nil element t nil nil nil nil nil nil nil #38=(item (:standard-properties [372 372 376 422 422 0 #35# item element t nil nil nil nil nil nil #31# #36#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] #38# 1] [nil nil (item (:standard-properties [458 458 460 480 480 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [422 422 424 458 458 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) -1] [[nil nil (item (:standard-properties [504 504 506 532 532 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (item (:standard-properties [558 558 560 578 578 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [532 532 534 558 558 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [480 480 482 504 504 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) -1] (item (:standard-properties [332 332 336 372 372 0 #35# item element t nil nil nil nil nil nil #31# #36#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[[[[nil nil (item (:standard-properties [600 600 602 626 626 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (paragraph (:standard-properties [628 628 628 646 646 0 nil nil element t nil nil nil nil nil nil nil #39=(item (:standard-properties [626 626 628 747 747 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] #39# 0] [[nil nil (item (:standard-properties [646 646 650 700 700 0 #35# item element t nil nil nil nil nil nil #31# #40=(plain-list (:standard-properties [646 646 646 747 747 0 nil nil element t nil nil nil nil nil nil #31# #39#] :type unordered))] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil #41=(item (:standard-properties [747 747 749 1229 1229 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [700 700 704 747 747 0 #35# item element t nil nil nil nil nil nil #31# #40#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] #40# 0] [[[nil nil #42=(plain-list (:standard-properties [819 819 819 1229 1229 0 nil nil element t nil nil nil nil nil nil #31# #41#] :type unordered)) 0] [nil nil (item (:standard-properties [910 910 914 1002 1002 0 #35# item element t nil nil nil nil nil nil #31# #42#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [819 819 823 910 910 0 #35# item element t nil nil nil nil nil nil #31# #42#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[nil nil (item (:standard-properties [1058 1058 1062 1095 1095 0 #35# item element t nil nil nil nil nil nil #31# #42#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (item (:standard-properties [1165 1165 1169 1229 1229 0 #35# item element t nil nil nil nil nil nil #31# #42#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1095 1095 1099 1165 1165 0 #35# item element t nil nil nil nil nil nil #31# #42#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1002 1002 1006 1058 1058 0 #35# item element t nil nil nil nil nil nil #31# #42#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (paragraph (:standard-properties [749 749 749 819 819 0 nil nil element t nil nil nil nil nil nil nil #41#])) 0] [[[nil nil (paragraph (:standard-properties [1231 1231 1231 1245 1245 0 nil nil element t nil nil nil nil nil nil nil #43=(item (:standard-properties [1229 1229 1231 1311 1311 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] [nil nil (item (:standard-properties [1245 1245 1249 1289 1289 0 #35# item element t nil nil nil nil nil nil #31# #44=(plain-list (:standard-properties [1245 1245 1245 1311 1311 0 nil nil element t nil nil nil nil nil nil #31# #43#] :type unordered))] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] #44# 0] [[[nil nil (paragraph (:standard-properties [1293 1293 1293 1311 1311 0 nil nil element t nil nil nil nil nil nil nil #46=(item (:standard-properties [1289 1289 1293 1311 1311 0 #35# item element t nil nil nil nil nil nil #31# #44#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] nil (item (:standard-properties [1311 1311 1313 1345 1345 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) -1] [nil nil (paragraph (:standard-properties [1347 1347 1347 1394 1394 0 nil nil element t nil nil nil nil nil nil nil #45=(item (:standard-properties [1345 1345 1347 1430 1430 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] #45# -1] #46# 1] #43# 0] (item (:standard-properties [578 578 580 600 600 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[[[[[nil nil (item (:standard-properties [1394 1394 1398 1412 1412 0 #35# item element t nil nil nil nil nil nil #31# #47=(plain-list (:standard-properties [1394 1394 1394 1430 1430 0 nil nil element t nil nil nil nil nil nil #31# #45#] :type unordered))] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (item (:standard-properties [1430 1430 1432 1456 1456 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1412 1412 1416 1430 1430 0 #35# item element t nil nil nil nil nil nil #31# #47#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[nil nil #48=(item (:standard-properties [1480 1480 1482 1746 1746 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil #49=(plain-list (:standard-properties [1506 1506 1506 1746 1746 0 nil nil element t nil nil nil nil nil nil #31# #48#] :type unordered)) 0] (paragraph (:standard-properties [1482 1482 1482 1506 1506 0 nil nil element t nil nil nil nil nil nil nil #48#])) 0] (item (:standard-properties [1456 1456 1458 1480 1480 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[nil nil (item (:standard-properties [1570 1570 1574 1622 1622 0 #35# item element t nil nil nil nil nil nil #31# #49#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[nil nil (paragraph (:standard-properties [1626 1626 1626 1690 1690 0 nil nil element t nil nil nil nil nil nil nil #50=(item (:standard-properties [1622 1622 1626 1690 1690 0 #35# item element t nil nil nil nil nil nil #31# #49#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] nil (item (:standard-properties [1690 1690 1694 1746 1746 0 #35# item element t nil nil nil nil nil nil #31# #49#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) -1] #50# 1] (item (:standard-properties [1506 1506 1510 1570 1570 0 #35# item element t nil nil nil nil nil nil #31# #49#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[[nil nil #51=(item (:standard-properties [1776 1776 1778 1927 1927 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (plain-list (:standard-properties [1810 1810 1810 1927 1927 0 nil nil element t nil nil nil nil nil nil #31# #51#] :type unordered)) 0] (paragraph (:standard-properties [1778 1778 1778 1810 1810 0 nil nil element t nil nil nil nil nil nil nil #51#])) 0] [[[nil nil (paragraph (:standard-properties [1929 1929 1929 1977 1977 0 nil nil element t nil nil nil nil nil nil nil #52=(item (:standard-properties [1927 1927 1929 2021 2021 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] [nil nil (item (:standard-properties [1977 1977 1981 2001 2001 0 #35# item element t nil nil nil nil nil nil #31# #53=(plain-list (:standard-properties [1977 1977 1977 2021 2021 0 nil nil element t nil nil nil nil nil nil #31# #52#] :type unordered))] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] #53# 0] [nil [nil nil #4# 0] (item (:standard-properties [2021 2021 2023 2049 2049 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 1] (item (:standard-properties [2001 2001 2005 2021 2021 0 #35# item element t nil nil nil nil nil nil #31# #53#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] #52# 1] (item (:standard-properties [1746 1746 1748 1776 1776 0 #35# item element t nil nil nil nil nil nil #31# #33#] :bullet #37# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[[[nil nil #55=(section (:standard-properties [2113 2113 2113 2418 2418 0 nil section element t nil 2113 2418 nil nil nil nil #54#])) 0] [nil nil (src-block (:standard-properties [2295 2295 nil nil 2418 1 nil nil element t nil nil nil nil nil nil nil #55#] :language #57="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq use-package-always-ensure t)\12  (add-to-list 'load-path \"~\\\\.emacs.d\\\\scripts\\\\\")\12")) 0] (paragraph (:standard-properties [2113 2113 2113 2294 2295 1 nil planning element t nil nil nil nil nil nil nil #55#])) 0] [nil [nil nil (src-block (:standard-properties [2437 2437 nil nil 2522 1 nil planning element t nil nil nil nil nil nil nil #58=(section (:standard-properties [2437 2437 2437 2522 2522 0 nil section element t nil 2437 2522 nil nil nil nil #56#]))] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (require 'elpaca-setup)\12  (require 'buffer-move)\12")) 0] #58# 1] #56# 0] [[nil nil #60=(section (:standard-properties [2541 2541 2541 3626 3626 0 nil section element t nil 2541 3626 nil nil nil nil #59#] :fragile-cache nil)) 0] nil (src-block (:standard-properties [2541 2541 nil nil 3626 1 nil planning element t nil nil nil nil nil nil nil #60#] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      (use-package evil\12            :init\12            (setq evil-want-integration t)\12            (setq evil-want-keybinding nil)\12            (setq evil-vsplit-window-right t)\12            (setq evil-split-window-below t)\12            (evil-mode ))\12      (use-package evil-collection\12        :after evil\12        :config\12        (setq evil-collection-mode-list '(dashboard dired ibuffer))\12        (evil-collection-init))\12      (use-package evil-tutor)\12\12          ;;Turns off elpaca-use-package-mode current declaration\12          ;;Note this will cause evaluate the declaration immediately. It is not deferred.\12          ;;Useful for configuring built-in emacs features.\12          (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))\12  ;; Don't install anything. Defer execution of BODY\12  (with-eval-after-load 'evil-maps\12    (define-key evil-motion-state-map (kbd \"SPC\") nil)\12    (define-key evil-motion-state-map (kbd \"RET\") nil)\12    (define-key evil-motion-state-map (kbd \"TAB\") nil))\12  (setq org-return-follows-link t)\12          \12")) -1] #59# -1] #54# -1] #47# 0] [[[[[[nil nil #63=(section (:standard-properties [3650 3650 3650 11211 11211 0 nil section element t nil 3650 11211 nil nil nil nil #61#] :fragile-cache nil)) 0] [nil nil #62# 0] (src-block (:standard-properties [3650 3650 nil nil 11211 1 nil planning element t nil nil nil nil nil nil nil #63#] :language #108="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package general\12        :config\12      (general-evil-setup)\12      (general-create-definer ult/leader-keys\12        :states '(normal insert visual emacs)\12        :keymaps 'override\12        :prefix \"SPC\"\12        :global-prefix \"M-SPC\")\12      (ult/leader-keys\12        \".\" '(find-file :wk \"Find file\")\12        \"TAB TAB\" '(comment-line :wk \"Comment lines\")\12  \11  \"p s\" '(powershell :wk \"Powershell\")\12  \11  \"o e\" '(elfeed :wk \"Open Elfeed\"))\12      (ult/leader-keys\12        \"b\" '(:ignore t :wk \"buffer\")\12        \"b b\" '(switch-to-buffer :wk \"Switch buffer\")\12        \"b i\" '(ibuffer :wk \"Ibuffer\")\12        \"b k\" '(kill-current-buffer :wk \"Kill this buffer\")\12        \"b n\" '(next-buffer :wk \"Next buffer\")\12        \"b p\" '(previous-buffer :wk \"Previous buffer\")\12        \"b r\" '(revert-buffer :wk \"Reload buffer\"))\12      (ult/leader-keys\12    \"d\" '(:ignore t :wk \"Dired\")\12    \"d d\" '(dired :wk \"Open dired\")\12    \"d j\" '(dired-jump :wk \"Dired jump to current\")\12    \"d n\" '(neotree-dir :wk \"Open directory in neotree\")\12    \"d p\" '(peep-dired :wk \"Peep-dired\"))\12  (ult/leader-keys\12      \"e\" '(:ignore t :wk \"Evaluate\")\12      \"e b\" '(eval-buffer :wk \"Evaluate elisp in buffer\")\12      \"e d\" '(eval-defun :wk \"Evaluate defun containing or after point\")\12      \"e e\" '(eval-expression :wk \"Evaluate an elisp expresssion\")\12      \"e h\" '(counsel-esh-history :wk \"Eshell history\")\12      \"e l\" '(eval-last-sexp :wk \"Evaluate elisp expression before point\")\12      \"e r\" '(eval-region :wk \"Evaluate elisp in region\")\12      \"e s\" '(eshell :wk \"Eshell\"))\12  (ult/leader-keys\12    \"f\" '(:ignore t :wk \"Files\")    \12    \"f c\" '((lambda () (interactive)\12              (find-file \"~/.config/emacs/config.org\")) \12            :wk \"Open emacs config.org\")\12    \"f e\" '((lambda () (interactive)\12              (dired \"~/.config/emacs/\")) \12            :wk \"Open user-emacs-directory in dired\")\12    \"f d\" '(find-grep-dired :wk \"Search for string in files in DIR\")\12    \"f g\" '(counsel-grep-or-swiper :wk \"Search for string current file\")\12    \"f i\" '((lambda () (interactive)\12              (find-file \"~/.config/emacs/init.el\")) \12            :wk \"Open emacs init.el\")\12    \"f j\" '(counsel-file-jump :wk \"Jump to a file below current directory\")\12    \"f l\" '(counsel-locate :wk \"Locate a file\")\12    \"f r\" '(counsel-recentf :wk \"Find recent files\")\12    \"f u\" '(sudo-edit-find-file :wk \"Sudo find file\")\12    \"f U\" '(sudo-edit :wk \"Sudo edit file\"))\12    (ult/leader-keys\12    \"g\" '(:ignore t :wk \"Git\")    \12    \"g /\" '(magit-dispatch :wk \"Magit dispatch\")\12    \"g .\" '(magit-file-dispatch :wk \"Magit file dispatch\")\12    \"g b\" '(magit-branch-checkout :wk \"Switch branch\")\12    \"g c\" '(:ignore t :wk \"Create\") \12    \"g c b\" '(magit-branch-and-checkout :wk \"Create branch and checkout\")\12    \"g c c\" '(magit-commit-create :wk \"Create commit\")\12    \"g c f\" '(magit-commit-fixup :wk \"Create fixup commit\")\12    \"g C\" '(magit-clone :wk \"Clone repo\")\12    \"g f\" '(:ignore t :wk \"Find\") \12    \"g f c\" '(magit-show-commit :wk \"Show commit\")\12    \"g f f\" '(magit-find-file :wk \"Magit find file\")\12    \"g f g\" '(magit-find-git-config-file :wk \"Find gitconfig file\")\12    \"g F\" '(magit-fetch :wk \"Git fetch\")\12    \"g g\" '(magit-status :wk \"Magit status\")\12    \"g i\" '(magit-init :wk \"Initialize git repo\")\12    \"g l\" '(magit-log-buffer-file :wk \"Magit buffer log\")\12    \"g r\" '(vc-revert :wk \"Git revert file\")\12    \"g s\" '(magit-stage-file :wk \"Git stage file\")\12    \"g t\" '(git-timemachine :wk \"Git time machine\")\12    \"g u\" '(magit-stage-file :wk \"Git unstage file\"))\12  (ult/leader-keys\12\12    \"h\" '(:ignore t :wk \"Help\")\12    \"h a\" '(counsel-apropos :wk \"Apropos\")\12    \"h b\" '(describe-bindings :wk \"Describe bindings\")\12    \"h c\" '(describe-char :wk \"Describe character under cursor\")\12    \"h d\" '(:ignore t :wk \"Emacs documentation\")\12    \"h d a\" '(about-emacs :wk \"About Emacs\")\12    \"h d d\" '(view-emacs-debugging :wk \"View Emacs debugging\")\12    \"h d f\" '(view-emacs-FAQ :wk \"View Emacs FAQ\")\12    \"h d m\" '(info-emacs-manual :wk \"The Emacs manual\")\12    \"h d n\" '(view-emacs-news :wk \"View Emacs news\")\12    \"h d o\" '(describe-distribution :wk \"How to obtain Emacs\")\12    \"h d p\" '(view-emacs-problems :wk \"View Emacs problems\")\12    \"h d t\" '(view-emacs-todo :wk \"View Emacs todo\")\12    \"h d w\" '(describe-no-warranty :wk \"Describe no warranty\")\12    \"h e\" '(view-echo-area-messages :wk \"View echo area messages\")\12    \"h f\" '(describe-function :wk \"Describe function\")\12    \"h F\" '(describe-face :wk \"Describe face\")\12    \"h g\" '(describe-gnu-project :wk \"Describe GNU Project\")\12    \"h i\" '(info :wk \"Info\")\12    \"h I\" '(describe-input-method :wk \"Describe input method\")\12    \"h k\" '(describe-key :wk \"Describe key\")\12    \"h l\" '(view-lossage :wk \"Display recent keystrokes and the commands run\")\12    \"h L\" '(describe-language-environment :wk \"Describe language environment\")\12    \"h m\" '(describe-mode :wk \"Describe mode\")\12    \"h r\" '(:ignore t :wk \"Reload\")\12    \"h r r\" '((lambda () (interactive)\12                (load-file \"~/.emacs.d/init.el\")\12                (ignore (elpaca-process-queues)))\12              :wk \"Reload emacs config\")\12    \"h t\" '(load-theme :wk \"Load theme\")\12    \"h v\" '(describe-variable :wk \"Describe variable\")\12    \"h w\" '(where-is :wk \"Prints keybinding for command if set\")\12    \"h x\" '(describe-command :wk \"Display full documentation for command\"))\12\12      (ult/leader-keys\12    \"m\" '(:ignore t :wk \"Org\")\12    \"m a\" '(org-agenda :wk \"Org agenda\")\12    \"m e\" '(org-export-dispatch :wk \"Org export dispatch\")\12    \"m i\" '(org-toggle-item :wk \"Org toggle item\")\12    \"m t\" '(org-todo :wk \"Org todo\")\12    \"m B\" '(org-babel-tangle :wk \"Org babel tangle\")\12    \"m T\" '(org-todo-list :wk \"Org todo list\"))\12\12  (ult/leader-keys\12    \"m b\" '(:ignore t :wk \"Tables\")\12    \"m b -\" '(org-table-insert-hline :wk \"Insert hline in table\"))\12\12  (ult/leader-keys\12    \"m d\" '(:ignore t :wk \"Date/deadline\")\12    \"m d t\" '(org-time-stamp :wk \"Org time stamp\"))\12  (ult/leader-keys\12    \"o\" '(:ignore t :wk \"Open\")\12    \"o d\" '(dashboard-open :wk \"Dashboard\")\12    \"o e\" '(elfeed :wk \"Elfeed RSS\")\12    \"o f\" '(make-frame :wk \"Open buffer in new frame\")\12    \"o F\" '(select-frame-by-name :wk \"Select frame by name\"))\12  (ult/leader-keys\12    \"p\" '(projectile-command-map :wk \"Projectile\"))\12  (ult/leader-keys\12    \"t\" '(:ignore t :wk \"Toggle\")\12    \"t e\" '(eshell-toggle :wk \"Toggle eshell\")\12    \"t l\" '(display-line-numbers-mode :wk \"Toggle line numbers\")\12    \"t n\" '(neotree-toggle :wk \"Toggle neotree file viewer\")\12    \"t t\" '(visual-line-mode :wk \"Toggle truncated lines\"))\12    (ult/leader-keys\12    \"s\" '(:ignore t :wk \"Search\")\12    \"s d\" '(dictionary-search :wk \"Search dictionary\")\12    \"s m\" '(man :wk \"Man pages\")\12    \"s t\" '(tldr :wk \"Lookup TLDR docs for a command\")\12    \"s w\" '(woman :wk \"Similar to man but doesn't require man\"))\12  (ult/leader-keys\12    \"w\" '(:ignore t :wk \"Windows\")\12    ;; Window splits\12    \"w c\" '(evil-window-delete :wk \"Close window\")\12    \"w n\" '(evil-window-new :wk \"New window\")\12    \"w s\" '(evil-window-split :wk \"Horizontal split window\")\12    \"w v\" '(evil-window-vsplit :wk \"Vertical split window\")\12    ;; Window motions\12    \"w h\" '(evil-window-left :wk \"Window left\")\12    \"w j\" '(evil-window-down :wk \"Window down\")\12    \"w k\" '(evil-window-up :wk \"Window up\")\12    \"w l\" '(evil-window-right :wk \"Window right\")\12    \"w w\" '(evil-window-next :wk \"Goto next window\")\12    ;; Move Windows\12    \"w H\" '(buf-move-left :wk \"Buffer move left\")\12    \"w J\" '(buf-move-down :wk \"Buffer move down\")\12    \"w K\" '(buf-move-up :wk \"Buffer move up\")\12    \"w L\" '(buf-move-right :wk \"Buffer move right\"))\12      ) \12")) 0] [nil nil (src-block (:standard-properties [11228 11228 nil nil 11431 1 nil planning element t nil nil nil nil nil nil nil #64=(section (:standard-properties [11228 11228 11228 11431 11431 0 nil section element t nil 11228 11431 nil nil nil nil #62#]))] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package nerd-icons\12      ;; (nerd-icons-font-family \"Tinos Nerd Font\")\12  )\12    (use-package nerd-icons-dired\12      :hook (dired-mode . nerd-icons-dired-mode ))\12")) 0] #64# -1] [nil [nil nil (src-block (:standard-properties [11441 11441 nil nil 11531 1 nil planning element t nil nil nil nil nil nil nil #66=(section (:standard-properties [11441 11441 11441 11531 11531 0 nil section element t nil 11441 11531 nil nil nil nil #65#]))] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(setq backup-directory-alist '((\".*\" . \"~\\\\.backups\")))\12")) 0] #66# 1] #65# -1] [[[nil nil #69=(section (:standard-properties [11542 11542 11542 11981 11981 0 nil section element t nil 11542 11981 nil nil nil nil #67#])) 0] [nil nil #68# 0] (src-block (:standard-properties [11542 11542 nil nil 11981 1 nil planning element t nil nil nil nil nil nil nil #69#] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package company\12      :defer 2\12      :diminish\12      :custom\12      (company-begin-commands '(self-insert-command))\12      (comany-idle-delay .1)\12      (company-minimum-prefix-length 2)\12      (company-show-numbers t)\12      (company-tooltip-align-annotations 't)\12      (global-company-mode t))\12  (use-package company-box\12    :after company\12    :diminish\12    :hook (company-mode . company-box-mode))\12")) 0] [[[nil nil (src-block (:standard-properties [11994 11994 nil nil 12645 1 nil planning element t nil nil nil nil nil nil nil #74=(section (:standard-properties [11994 11994 11994 12645 12645 0 nil section element t nil 11994 12645 nil nil nil nil #68#] :fragile-cache nil))] :language #90="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package dashboard\12    :init\12    (setq initial-buffer-choice 'dashboard-open)\12    (setq dashboard-set-heading-icons t)\12    (setq dashboard-set-file-icons t)\12    (setq dashboard-banner-logo-title \"Many bugs to catch!\")\12    (setq dashboard-startup-banner \"~/.emacs.d/themes/pngegg.png\")\12    (setq dashboard-center-content nil)\12    (setq dashboard-items '((recents . 5)\12  \11\11\11  (agenda . 5)\12  \11\11\11  (bookmarks . 3)\12  \11\11\11  (projects . 3)\12 \11\11\11  (registers . 3)))\12    :custom\12    (dashboard-modify-heading-icons '((recents . \"file-text\")\12  \11\11\11\11    (bookmarks . \"book\")))\12    :config\12    (dashboard-setup-startup-hook))\12")) 0] [nil nil #73=(section (:standard-properties [12657 12657 12657 12716 12716 0 nil section element t nil 12657 12716 nil nil nil nil #70#])) 0] #70# 0] [[nil nil #71# 0] [nil nil (src-block (:standard-properties [12724 12724 nil nil 13514 1 nil planning element t nil nil nil nil nil nil nil #72=(section (:standard-properties [12724 12724 12724 13514 13514 0 nil section element t nil 12724 13514 nil nil nil nil #71#]))] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package dired-open\12  :config\12  (setq dired-open-extensions '((\"gif\" . \"sxiv\")\12                                (\"jpg\" . \"sxiv\")\12                                (\"png\" . \"sxiv\")\12                                (\"mkv\" . \"mpv\")\12                                (\"mp4\" . \"mpv\"))))\12\12(use-package peep-dired\12  :after dired\12  :hook (evil-normalize-keymaps . peep-dired-hook)\12  :config\12    (evil-define-key 'normal dired-mode-map (kbd \"h\") 'dired-up-directory)\12    (evil-define-key 'normal dired-mode-map (kbd \"l\") 'dired-open-file) ; use dired-find-file instead if not using dired-open package\12    (evil-define-key 'normal peep-dired-mode-map (kbd \"j\") 'peep-dired-next-file)\12    (evil-define-key 'normal peep-dired-mode-map (kbd \"k\") 'peep-dired-prev-file)\12)\12")) 0] #72# 0] (src-block (:standard-properties [12657 12657 nil nil 12716 1 nil planning element t nil nil nil nil nil nil nil #73#] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package diminish)\12")) 0] #74# 1] #67# 0] [[[[[nil nil #77=(section (:standard-properties [13523 13523 13523 15388 15388 0 nil section element t nil 13523 15388 nil nil nil nil #75#] :fragile-cache nil)) 0] [nil nil #76# 0] (src-block (:standard-properties [13523 13523 nil nil 15388 0 nil planning element t nil nil nil nil nil nil nil #77#] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package elfeed\12      :config\12      (setq elfeed-search-feed-face \":foreground #ffffff :weight bold\"\12            elfeed-feeds (quote\12                           ((\"https://www.reddit.com/r/linux.rss\" reddit linux)\12                            (\"https://www.reddit.com/r/commandline.rss\" reddit commandline)\12                            (\"https://www.reddit.com/r/distrotube.rss\" reddit distrotube)\12                            (\"https://www.reddit.com/r/emacs.rss\" reddit emacs)\12                            (\"https://www.gamingonlinux.com/article_rss.php\" gaming linux)\12                            (\"https://hackaday.com/blog/feed/\" hackaday linux)\12                            (\"https://opensource.com/feed\" opensource linux)\12                            (\"https://linux.softpedia.com/backend.xml\" softpedia linux)\12                            (\"https://itsfoss.com/feed/\" itsfoss linux)\12                            (\"https://www.zdnet.com/topic/linux/rss.xml\" zdnet linux)\12                            (\"https://www.phoronix.com/rss.php\" phoronix linux)\12                            (\"http://feeds.feedburner.com/d0od\" omgubuntu linux)\12                            (\"https://www.computerworld.com/index.rss\" computerworld linux)\12                            (\"https://www.networkworld.com/category/linux/index.rss\" networkworld linux)\12                            (\"https://www.techrepublic.com/rssfeeds/topic/open-source/\" techrepublic linux)\12                            (\"https://betanews.com/feed\" betanews linux)\12                            (\"http://lxer.com/module/newswire/headlines.rss\" lxer linux)\12                            (\"https://distrowatch.com/news/dwd.xml\" distrowatch linux)))))\12\12    (use-package elfeed-goodies\12      :init\12      (elfeed-goodies/setup)\12      :config\12      (setq elfeed-goodies/entry-pane-size 0.5))\12")) 0] [nil nil (src-block (:standard-properties [15400 15400 nil nil 15519 1 nil planning element t nil nil nil nil nil nil nil #78=(section (:standard-properties [15400 15400 15400 15519 15519 0 nil section element t nil 15400 15519 nil nil nil nil #76#]))] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package flycheck\12    :defer t\12    :diminish\12    :init (global-flycheck-mode))\12")) 0] #78# -1] [[nil nil #79# 0] [[nil nil (src-block (:standard-properties [15554 15554 nil nil 16672 1 nil planning element t nil nil nil nil nil nil nil #81=(section (:standard-properties [15554 15554 15554 16672 16672 0 nil section element t nil 15554 16672 nil nil nil nil #79#]))] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (set-face-attribute 'default nil\12    :family \"BigBlueTerm437 Nerd Font Mono\"\12    :height 110\12    :weight 'medium)\12  (set-face-attribute 'variable-pitch nil\12    :family \"BigBlueTerm437 Nerd Font Mono\"\12    :height 120\12    :weight 'medium)\12  (set-face-attribute 'fixed-pitch nil\12    :family \"BigBlueTerm437 Nerd Font Mono\"\12    :height 110\12    :weight 'medium)\12  ;; Makes commented text and keywords italics.\12  ;; This is working in emacsclient but not emacs.\12  ;; Your font must have an italic face available.\12  (set-face-attribute 'font-lock-comment-face nil\12    :slant 'italic)\12  (set-face-attribute 'font-lock-keyword-face nil\12    :slant 'italic)\12\12  ;; This sets the default font on all graphical frames created after restarting Emacs.\12  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts\12  ;; are not right unless I also add this method of setting the default font.\12  (add-to-list 'default-frame-alist '(font . \"BigBlueTerm437 Nerd Font Mono\"))\12\12  ;; Uncomment the following line if line spacing needs adjusting.\12  (setq-default line-spacing 0.12)\12")) 0] nil #80# -1] #81# 1] #12# 0] [[[[nil nil (src-block (:standard-properties [16694 16694 nil nil 16947 0 nil planning element t nil nil nil nil nil nil nil #82=(section (:standard-properties [16694 16694 16694 16949 16949 0 nil section element t nil 16694 16949 nil nil nil nil #80#] :fragile-cache nil))] :language #99="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(global-set-key (kbd \"C-=\") 'text-scale-increase)\12(global-set-key (kbd \"C--\") 'text-scale-decrease)\12(global-set-key (kbd \"<C-wheel-up>\") 'text-scale-increase)\12(global-set-key (kbd \"<C-wheel-down>\") 'text-scale-decrease)\12")) 0] [nil nil #17# 0] (paragraph (:standard-properties [16947 16947 16947 16949 16949 0 nil nil element t nil nil nil nil nil nil nil #82#])) 0] [nil [nil nil (src-block (:standard-properties [17029 17029 nil nil 17122 1 nil planning element t nil nil nil nil nil nil nil #84=(section (:standard-properties [17029 17029 17029 17122 17122 0 nil section element t nil 17029 17122 nil nil nil nil #83#]))] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(menu-bar-mode -1)\12(tool-bar-mode -1)\12(scroll-bar-mode -1)\12")) 0] #84# 1] #83# 0] [[nil nil #86=(section (:standard-properties [17166 17166 17166 17265 17265 0 nil section element t nil 17166 17265 nil nil nil nil #85#])) 0] nil (src-block (:standard-properties [17166 17166 nil nil 17265 1 nil planning element t nil nil nil nil nil nil nil #86#] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(global-display-line-numbers-mode 1)\12(global-visual-line-mode t)\12")) -1] #85# -1] #82# 0] #75# 0] #61# -1] [[[[[[nil nil #89=(section (:standard-properties [17291 17291 17291 17358 17358 0 nil section element t nil 17291 17358 nil nil nil nil #87#])) 0] [nil nil #88# 0] (src-block (:standard-properties [17291 17291 nil nil 17358 0 nil planning element t nil nil nil nil nil nil nil #89#] :language #90# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq inhibit-startup-screen t)\12")) 0] [[nil nil (src-block (:standard-properties [17375 17375 nil nil 17669 1 nil planning element t nil nil nil nil nil nil nil #92=(section (:standard-properties [17375 17375 17375 17669 17669 0 nil section element t nil 17375 17669 nil nil nil nil #88#]))] :language #90# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (add-to-list 'custom-theme-load-path \"~/.emacs.d/themes/\")\12  (use-package doom-themes\12  :custom\12  (doom-themes-enable-bold t )   ; if nil, bold is universally disabled\12      (doom-themes-enable-italic t)\12      :config\12  (load-theme 'doom-sourcerer t)\12  )  ;\12")) 0] [nil nil #101=(section (:standard-properties [17702 17702 17702 17807 17807 0 nil section element t nil 17702 17807 nil nil nil nil #91#])) 0] #91# 0] #92# 0] [[[[nil nil #93# 0] nil #95=(section (:standard-properties [17837 17837 17837 18007 18007 0 nil section element t nil 17837 18007 nil nil nil nil #93#] :fragile-cache nil)) -1] [[nil nil #18# 0] nil #94# -1] (src-block (:standard-properties [17837 17837 nil nil 18007 1 nil planning element t nil nil nil nil nil nil nil #95#] :language "emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package rainbow-delimiters\12    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)\12  \11 (clojure-mode . rainbow-delimiters-mode)))\12")) 0] [[nil nil (src-block (:standard-properties [18034 18034 nil nil 18408 1 nil planning element t nil nil nil nil nil nil nil #100=(section (:standard-properties [18034 18034 18034 18408 18408 0 nil section element t nil 18034 18408 nil nil nil nil #94#]))] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package git-timemachine\12    :after git-timemachine\12    :hook (evil-normalize-keymaps . git-timemachine-hook)\12    :config\12    (evil-define-key 'normal git-timemachine-mode-map (kbd \"C-j\") 'git-timemachine-show-previous-revision)\12    (evil-define-key 'normal git-timemachine-mode-map (kbd \"C-k\") 'git-timemachine-show-next-revision)\12)\12")) 0] [[nil nil #98=(section (:standard-properties [18417 18417 18417 18512 18512 0 nil section element t nil 18417 18512 nil nil nil nil #96#] :fragile-cache nil)) 0] [nil nil #97# 0] (src-block (:standard-properties [18417 18417 nil nil 18512 1 nil planning element t nil nil nil nil nil nil nil #98#] :language #99# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package transient)\12(use-package magit :after transient)\12")) 0] #96# 1] #100# 0] (src-block (:standard-properties [17702 17702 nil nil 17807 0 nil planning element t nil nil nil nil nil nil nil #101#] :language #90# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package rainbow-mode\12    :diminish\12    :hook org-mode prog-mode)\12")) 1] [[[nil [nil nil #20# 0] (src-block (:standard-properties [18529 18529 nil nil 19381 1 nil planning element t nil nil nil nil nil nil nil #111=(section (:standard-properties [18529 18529 18529 19381 19381 0 nil section element t nil 18529 19381 nil nil nil nil #97#]))] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "        (use-package counsel\12  \11:diminish\12          :after ivy\12          :config (counsel-mode))\12      (use-package ivy\12        :diminish\12        :bind\12        ((\"C-c C-r\" . ivy-resume)\12         (\"C-x B\" . ivy-switch-buffer-other-window))\12        :custom\12    (setq ivy-use-virtual-buffers t)\12    (setq ivy-count-format \"(%d/%d) \")\12    (setq enable-recursive-minibuffers t)\12    :config\12  (ivy-mode))\12  (use-package nerd-icons-ivy-rich\12    :diminish\12    :init (nerd-icons-ivy-rich-mode 1))\12  (use-package ivy-rich\12    :diminish\12    :after ivy\12    :init (ivy-rich-mode 1)\12    :custom\12    (ivy-virtual-abbreviate 'full\12  \11\11\11  ivy-rich-switch-buffer-align-virtual-buffer t\12  \11\11\11  ivy-rich-path-style 'abbrev)\12    :config\12    (ivy-set-display-transformer 'ivy-switch-buffer\12  \11\11\11       'ivy-rich-switch-buffer-transformer))\12")) 1] [[nil nil #104=(section (:standard-properties [19412 19412 19412 19469 19469 0 nil section element t nil 19412 19469 nil nil nil nil #102#])) 0] [nil nil #103# 0] (src-block (:standard-properties [19412 19412 nil nil 19469 1 nil planning element t nil nil nil nil nil nil nil #104#] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package lua-mode)\12")) 0] #102# 0] [[[nil nil #107=(section (:standard-properties [19488 19488 19488 19750 19750 0 nil section element t nil 19488 19750 nil nil nil nil #105#])) 0] [nil nil #106# 0] (src-block (:standard-properties [19488 19488 nil nil 19750 0 nil planning element t nil nil nil nil nil nil nil #107#] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package doom-modeline\12  \11      :init (doom-modeline-mode 1)\12  \11      :config\12  \11      (setq doom-modeline-height 20\12  \11\11    doom-modeline-bar-width 5\12  \11\11    doom-modeline-persp-name t\12  \11\11    doom-modeline-persp-icon t))\12")) 0] [[nil nil (src-block (:standard-properties [19760 19760 nil nil 21262 0 nil planning element t nil nil nil nil nil nil nil #110=(section (:standard-properties [19760 19760 19760 21262 21262 0 nil section element t nil 19760 21262 nil nil nil nil #106#] :fragile-cache nil))] :language #108# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package neotree\12  :config\12  (setq neo-smart-open t\12        neo-show-hidden-files t\12        neo-window-width 55\12        neo-window-fixed-size nil\12        inhibit-compacting-font-caches R\12        projectile-switch-project-action 'neotree-projectile-action) \12        ;; truncate long file names in neotree\12        (add-hook 'neo-after-create-hook\12           #'(lambda (_)\12               (with-current-buffer (get-buffer neo-buffer-name)\12                 (setq truncate-lines t)\12                 (setq word-wrap nil)\12                 (make-local-variable 'auto-hscroll-mode)\12                 (setq auto-hscroll-mode nil))))\12(evil-define-key 'normal neotree-mode-map (kbd \"TAB\") 'neotree-enter)\12    (evil-define-key 'normal neotree-mode-map (kbd \"SPC\") 'neotree-quick-look)\12    (evil-define-key 'normal neotree-mode-map (kbd \"q\") 'neotree-hide)\12    (evil-define-key 'normal neotree-mode-map (kbd \"RET\") 'neotree-enter)\12    (evil-define-key 'normal neotree-mode-map (kbd \"g\") 'neotree-refresh)\12    (evil-define-key 'normal neotree-mode-map (kbd \"j\") 'neotree-next-line)\12    (evil-define-key 'normal neotree-mode-map (kbd \"k\") 'neotree-previous-line)\12    (evil-define-key 'normal neotree-mode-map (kbd \"A\") 'neotree-stretch-toggle)\12    (evil-define-key 'normal neotree-mode-map (kbd \"H\") 'neotree-hidden-file-toggle)\12(evil-define-key 'insert neotree-mode-map (kbd \"j\") 'neotree-next-line)\12    (evil-define-key 'insert neotree-mode-map (kbd \"k\") 'neotree-previous-line)\12)\12")) 0] [nil nil #109# 0] #26# 0] #110# 0] #105# 0] #111# -1] [[[[[nil nil (src-block (:standard-properties [21305 21305 nil nil 21444 1 nil planning element t nil nil nil nil nil nil nil #128=(section (:standard-properties [21305 21305 21305 21444 21444 0 nil section element t nil 21305 21444 nil nil nil nil #109#]))] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package toc-org\12    :commands toc-org-enable\12    :init (add-hook 'org-mode-hook 'toc-org-enable))\12")) 0] [nil nil #116=(section (:standard-properties [21469 21469 21469 21637 21637 0 nil section element t nil 21469 21637 nil nil nil nil #112#])) 0] #112# 0] [[nil nil #113# 0] [[nil nil (src-block (:standard-properties [21669 21669 nil nil 22054 1 nil planning element t nil nil nil nil nil nil nil #115=(section (:standard-properties [21669 21669 21669 22054 22054 0 nil section element t nil 21669 22054 nil nil nil nil #113#] :fragile-cache nil))] :language #108# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(electric-indent-mode -1)\12(electric-pair-mode 1)\12(add-hook 'org-mode-hook (lambda ()\12\11\11\11   (setq-local electric-pair-inhibit-predicate\12\11\11\11\11       '(lambda (c)\12\11\11\11\11\11  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))\12(global-auto-revert-mode t)\12(setq org-edit-src-content-indentation 0)\12(global-set-key [escape] 'keyboard-escape-quit)\12")) 0] [nil nil #120=(section (:standard-properties [22081 22081 22081 22139 22139 0 nil section element t nil 22081 22139 nil nil nil nil #114#])) 0] #114# 0] #115# 1] (src-block (:standard-properties [21469 21469 nil nil 21637 1 nil planning element t nil nil nil nil nil nil nil #116#] :language #90# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (add-hook 'org-mode-hook 'org-indent-mode)\12  (use-package org-bullets)\12  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))\12")) 1] [[nil nil #117# 0] [[nil nil (src-block (:standard-properties [22153 22153 nil nil 22244 1 nil planning element t nil nil nil nil nil nil nil #119=(section (:standard-properties [22153 22153 22153 22244 22244 0 nil section element t nil 22153 22244 nil nil nil nil #117#]))] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package projectile\12  :config\12  (projectile-mode 1))\12")) 0] [nil nil #118# 0] #27# 0] #119# 1] (src-block (:standard-properties [22081 22081 nil nil 22139 1 nil planning element t nil nil nil nil nil nil nil #120#] :language #90# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (require 'org-tempo)\12")) -1] [[[[nil nil (src-block (:standard-properties [22317 22317 nil nil 22461 1 nil planning element t nil nil nil nil nil nil nil #127=(section (:standard-properties [22317 22317 22317 22461 22461 0 nil section element t nil 22317 22461 nil nil nil nil #118#]))] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun reload-init-file ()\12    (interactive)\12    (load-file user-init-file)\12    (load-file user-init-file))\12")) 0] [nil nil #121# 0] #28# 0] [[nil nil (src-block (:standard-properties [22495 22495 nil nil 23531 0 nil planning element t nil nil nil nil nil nil nil #123=(section (:standard-properties [22495 22495 22495 23531 23531 0 nil section element t nil 22495 23531 nil nil nil nil #121#]))] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    ;; on windows, make pwsh the default shell\12  (when (eq system-type 'windows-nt)\12    (let ((xlist\12           '(\12            \"~/AppData/Local/Microsoft/WindowsApps/pwsh.exe\"\12            \"C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe\"\12            ))\12          xfound)\12      (setq xfound (seq-some (lambda (x) (if (file-exists-p x) x nil)) xlist))\12      (when xfound (setq explicit-shell-file-name xfound))))\12      (use-package eshell-syntax-highlighting\12      :after esh-mode\12      :config\12      (eshell-syntax-highlighting-global-mode +1))\12      \12    (setq eshell-rc-script (concat user-emacs-directory \"eshell/profile\")\12          eshell-aliases-file (concat user-emacs-directory \"eshell/aliases\")\12          eshell-history-size 5000\12          eshell-buffer-maximum-lines 5000\12          eshell-hist-ignoredups t\12          eshell-scroll-to-bottom-on-input t\12          eshell-destroy-buffer-when-process-dies t\12          eshell-visual-commands '(\"bash\", \"fish\", \"htop\", \"ssh\", \"top\", \"zsh\"))\12")) 0] [nil nil #124=(section (:standard-properties [23539 23539 23539 28949 28949 0 nil section element t nil 23539 28949 nil nil nil nil #122#])) 0] #122# 0] #123# 0] [[[nil nil (comment (:standard-properties [28130 28130 nil nil 28319 1 nil nil element t nil nil nil nil nil nil nil #124#] :value "** Vterm\12#+begin_src emacs-lisp\12  (use-package vterm\12    :config\12  (setq shell-file-name \"C:\\\\Program Files\\\\Git\\\\git-bash.exe\"\12        vterm-max-scrollback 5000))\12#+end_src")) 0] [nil nil #125# 0] (comment (:standard-properties [28319 28319 nil nil 28949 1 nil nil element t nil nil nil nil nil nil nil #124#] :value "** Vterm-Toggle\12#+begin_src emacs-lisp\12  (use-package vterm-toggle\12    :after vterm\12    :config\12    (setq vterm-toggle-fullscreen-p nil)\12    (setq vterm-toggle-scope 'project)\12    (add-to-list 'display-buffer-alist\12  \11\11     '((lambda (buffer-or-name _)\12  \11\11 (let ((buffer (get-buffer buffer-or-name)))\12  \11\11   (with-current-buffer buffer\12  \11\11     (or (equal major-mode 'vterm-mode)\12  \11\11\11 (string-prefix-p vterm-buffer-name (buffer-name buffer))))))\12  \11       (display-buffer-reuse-window display-buffer-at-bottom)\12  \11       (reusable-frams . visible)\12  \11       (window-height . 0.3))))\12#+end_src")) 0] [nil nil (src-block (:standard-properties [28961 28961 nil nil 29572 0 nil planning element t nil nil nil nil nil nil nil #126=(section (:standard-properties [28961 28961 28961 29572 29572 0 nil section element t nil 28961 29572 nil nil nil nil #125#]))] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package which-key\12    :diminish\12    :init\12     (which-key-mode 1)\12    :config\12    (setq which-key-side-window-location 'bottom\12      which-key-sort-order #'which-key-key-order-alpha\12      whick-key-sort-uppercase-first nil\12      which-key-add-column-padding 1\12      which-key-max-display-columns nil\12      which-key-min-display-lines 6\12      which-key-side-window-slot -10\12      which-key-side-window-max-height 0.25\12      which-key-idle-delay 0.8\12      which-key-max-description-length 25\12      which-key-allow-imprecise-window-fit t\12      which-key-separator \" > \" ))\12")) 0] #126# -1] (src-block (:standard-properties [23539 23539 nil nil 28130 1 nil planning element t nil nil nil nil nil nil nil #124#] :language #57# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value " (require 'shell)\12(autoload 'powershell \"powershell\" \"Run powershell as a shell within emacs.\" t)\12\12(defun powershell-gen-window-width-string ()\12  (concat  \"$a = (Get-Host).UI.RawUI\\n\" \12            \"$b = $a.WindowSize\\n\"\12            \"$b.Width = \" (number-to-string  (window-width)) \"\\n\"\12            \"$a.BufferSize = $b\\n\"\12            \"$a.WindowSize = $b\")\12  )\12  \12\12(defvar powershell-prompt-pattern  \"PS [^#$%>]+>\" \12  \"Regexp for powershell prompt.  This isn't really used, because I couldn't figure out how to get it to work.\"\12  )\12\12(defgroup powershell nil\12  \"Running shell from within Emacs buffers.\"\12  :group 'processes\12  )\12\12\12(defcustom powershell-need-rawui-resize t\12  \"set when powershell needs to be resized\"\12  :group 'powershell\12)\12\12;;;###autoload\12(defun powershell (&optional buffer)\12  \"Run an inferior powershell, by invoking the shell function. See the help for shell for more details.\12\\(Type \\\\[describe-mode] in the shell buffer for a list of commands.)\"\12  (interactive\12   (list\12    (and current-prefix-arg\12         (read-buffer \"Shell buffer: \"\12                      (generate-new-buffer-name \"*PowerShell*\")))))\12  ; get a name for the buffer\12  (setq buffer (get-buffer-create (or buffer \"*PowerShell*\")))\12\12  (let (\12        (tmp-shellfile explicit-shell-file-name)\12        )\12                                        ; set arguments for the powershell exe.\12                                        ; This needs to be tunable.\12    (setq explicit-shell-file-name \"c:\\\\windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\")  \12    (setq explicit-powershell.exe-args '(\"-Command\" \"-\" )) ; interactive, but no command prompt\12  \12                                        ; launch the shell\12    (shell buffer)\12\12    ; restore the original shell\12    (if explicit-shell-file-name\12        (setq explicit-shell-file-name tmp-shellfile)\12      )\12    )\12  \12  (let (\12        (proc (get-buffer-process buffer))\12        )\12    \12    ; This sets up the powershell RawUI screen width. By default,\12    ; the powershell v1.0 assumes terminal width of 80 chars.\12    ;This means input gets wrapped at the 80th column.  We reset the\12    ; width of the PS terminal to the window width. \12    (add-hook 'window-size-change-functions 'powershell-window-size-changed)\12\12    (powershell-window-size-changed)\12    \12    ; ask for initial prompt\12    (comint-simple-send proc \"prompt\")\12    )\12\12  ; hook the kill-buffer action so we can kill the inferior process?\12  (add-hook 'kill-buffer-hook 'powershell-delete-process)\12\12  ; wrap the comint-input-sender with a PS version\12  ; must do this after launching the shell! \12  (make-local-variable 'comint-input-sender)\12  (setq comint-input-sender 'powershell-simple-send)\12\12  ; set a preoutput filter for powershell.  This will trim newlines after the prompt.\12  (add-hook 'comint-preoutput-filter-functions 'powershell-preoutput-filter-for-prompt)\12\12  ;(run-hooks 'powershell-launch-hook)\12\12  ; return the buffer created\12  buffer\12)\12\12\12(defun powershell-window-size-changed (&optional frame)\12  ; do not actually resize here. instead just set a flag.\12  (setq powershell-need-rawui-resize t)\12)\12\12\12\12(defun powershell-delete-process (&optional proc)\12  (or proc\12      (setq proc (get-buffer-process (current-buffer))))\12  (and (processp proc)\12       (delete-process proc))\12  )\12\12\12\12;; This function trims the newline from the prompt that we\12;; get back from powershell.  It is set into the preoutput\12;; filters, so the newline is trimmed before being put into\12;; the output buffer.\12(defun powershell-preoutput-filter-for-prompt (string)\12   (if\12       ; not sure why, but I have not succeeded in using a variable here???  \12       ;(string-match  powershell-prompt-pattern  string)\12\12       (string-match  \"PS [^#$%>]+>\" string)\12       (substring string 0 -1)\12     \12     string\12\12     )\12   )\12\12\12\12(defun powershell-simple-send (proc string)\12  \"Override of the comint-simple-send function, specific for powershell.\12This just sends STRING, plus the prompt command. Normally powershell is in\12noninteractive model when run as an inferior shell with stdin/stdout\12redirected, which is the case when running as a shell within emacs.\12This function insures we get and display the prompt. \"\12  ; resize if necessary. We do this by sending a resize string to the shell,\12  ; before sending the actual command to the shell. \12  (if powershell-need-rawui-resize\12      (and\12       (comint-simple-send proc (powershell-gen-window-width-string))\12       (setq powershell-need-rawui-resize nil)\12       )\12    )\12  (comint-simple-send proc string)\12  (comint-simple-send proc \"prompt\")\12) \12")) 0] #127# -1] #128# 0] #87# -1] nil nil 0] org-element--cache-compare)) ((version "2.3")))