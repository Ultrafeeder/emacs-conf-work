;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[[[nil nil #16=(headline (:standard-properties [134 134 160 2176 2176 0 #2=(:title) nil element t nil 162 2176 1 nil [org-element-deferred org-element--headline-deferred nil t] nil #3=(org-data (:standard-properties [1 1 1 31999 31999 0 nil org-data nil t nil 3 31999 nil nil nil nil nil] :path "c:/Users/stratjm/.emacs.d/config.org" :fragile-cache nil :CATEGORY "config"))] :pre-blank 0 :raw-value #1=[org-element-deferred org-element--headline-parse-title (t) t] :title #1# :level #1# :priority #1# :tags #1# :todo-keyword #1# :todo-type #1# :footnote-section-p #1# :archivedp #1# :commentedp #1#)) 0] [nil nil #39=(headline (:standard-properties [2212 2212 2239 2544 2544 0 #2# section element t nil 2241 2542 2 nil nil nil #7=(headline (:standard-properties [2176 2176 2212 11945 11945 0 #2# nil element t nil 2214 11943 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 34) t] :title #4=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #6=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 25) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #7# 0] [[nil nil #42=(headline (:standard-properties [2739 2739 2758 3791 3791 0 #2# nil element t nil 2760 3789 2 nil nil nil #7#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 17) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #46=(headline (:standard-properties [4412 4412 4436 11945 11945 0 #2# nil element t nil 4438 11943 2 nil nil nil #7#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 22) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #45=(headline (:standard-properties [3791 3791 3804 4412 4412 0 #2# nil element t nil 3806 4410 2 nil nil nil #7#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 12) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #41=(headline (:standard-properties [2544 2544 2563 2739 2739 0 #2# nil element t nil 2565 2737 2 nil nil nil #7#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 18) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[[nil nil #51=(headline (:standard-properties [12165 12165 12180 12629 12629 0 #2# nil element t nil 12182 12627 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 14) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #55=(headline (:standard-properties [12729 12729 12740 13179 13179 0 #2# nil element t nil 12742 13177 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 9) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #54=(headline (:standard-properties [12629 12629 12639 12729 12729 0 #2# nil element t nil 12641 12727 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 8) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #59=(headline (:standard-properties [13843 13843 13855 13914 13914 0 #2# nil element t nil 13857 13912 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #58=(headline (:standard-properties [13179 13179 13192 13843 13843 0 #2# nil element t nil 13194 13841 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 11) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) -1] #50=(headline (:standard-properties [11945 11945 11962 12165 12165 0 #2# nil element t nil 11964 12163 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 15) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[[[nil nil #63=(headline (:standard-properties [14712 14712 14721 16586 16586 0 #2# nil element t nil 14723 16584 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 8) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #8=(headline (:standard-properties [16717 16717 16726 18147 18147 0 #2# nil element t nil 16728 18145 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 7) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #66=(headline (:standard-properties [16586 16586 16598 16717 16717 0 #2# nil element t nil 16600 16715 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #69=(headline (:standard-properties [17870 17870 17892 18147 18147 0 #2# nil element t nil 17894 18145 2 nil nil nil #8#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 21) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #68=(headline (:standard-properties [16726 16726 16752 17870 17870 0 #2# section element t nil 16754 17868 2 nil nil nil #8#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 24) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) -1] [[[nil nil #71=(headline (:standard-properties [18182 18182 18227 18320 18320 0 #2# section element t nil 18229 18318 2 nil nil nil #9=(headline (:standard-properties [18147 18147 18182 19208 19208 0 #2# nil element t nil 18184 19206 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 33) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 43) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #74=(headline (:standard-properties [18463 18463 18489 18556 18556 0 #2# nil element t nil 18491 18554 2 nil nil nil #9#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 25) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #73=(headline (:standard-properties [18320 18320 18364 18463 18463 0 #2# nil element t nil 18366 18461 2 nil nil nil #9#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 43) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #77=(headline (:standard-properties [18870 18870 18903 19008 19008 0 #2# nil element t nil 18905 19006 2 nil nil nil #9#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 32) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #76=(headline (:standard-properties [18556 18556 18573 18870 18870 0 #2# nil element t nil 18575 18868 2 nil nil nil #9#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 16) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) -1] #9# 0] #62=(headline (:standard-properties [13914 13914 13922 14712 14712 0 #2# nil element t nil 13924 14710 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 7) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[[[nil nil #10=(headline (:standard-properties [19208 19208 19215 19713 19713 0 #2# nil element t nil 19217 19711 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 6) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[nil nil #84=(headline (:standard-properties [19609 19609 19618 19713 19713 0 #2# nil element t nil 19620 19711 2 nil nil nil #10#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #89=(headline (:standard-properties [20126 20126 20143 20995 20995 0 #2# nil element t nil 20145 20993 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 15) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #87=(headline (:standard-properties [19713 19713 19730 20126 20126 0 #2# nil element t nil 19732 20124 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 16) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #83=(headline (:standard-properties [19215 19215 19235 19609 19609 0 #2# section element t nil 19237 19607 2 nil nil nil #10#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 19) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 1] [[[nil nil #91=(headline (:standard-properties [21018 21018 21030 21532 21532 0 #2# section element t nil 21032 21530 2 nil nil nil #11=(headline (:standard-properties [20995 20995 21018 23119 23119 0 #2# nil nil t nil 21020 23117 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 22) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil :fragile-cache nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 11) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil :fragile-cache nil)) 0] [nil nil #95=(headline (:standard-properties [22950 22950 22956 23012 23012 0 #2# nil element t nil 22958 23010 2 nil nil nil #11#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 5) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #92=(headline (:standard-properties [21532 21532 21544 22950 22950 0 #2# nil element t nil 21546 22948 2 nil nil nil #11#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 11) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[nil nil #98=(headline (:standard-properties [23055 23055 23062 23119 23119 0 #2# nil element t nil 23064 23117 2 nil nil nil #11#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 6) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #102=(headline (:standard-properties [23392 23392 23402 24906 24906 0 #2# nil element t nil 23404 24904 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 9) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #100=(headline (:standard-properties [23119 23119 23130 23392 23392 0 #2# nil element t nil 23132 23390 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #96=(headline (:standard-properties [23012 23012 23021 23055 23055 0 #2# nil element t nil 23023 23053 2 nil nil nil #11#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #11# 0] [[[nil nil #104=(headline (:standard-properties [24918 24918 24949 25088 25088 0 #2# section element t nil 24951 25086 2 nil nil nil #12=(headline (:standard-properties [24906 24906 24918 25783 25783 0 #2# nil element t nil 24920 25781 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 29) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #107=(headline (:standard-properties [25281 25281 25313 25698 25698 0 #2# nil element t nil 25315 25696 2 nil nil nil #12#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 31) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #105=(headline (:standard-properties [25088 25088 25113 25281 25281 0 #2# nil element t nil 25115 25279 2 nil nil nil #12#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 23) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[nil nil #111=(headline (:standard-properties [25783 25783 25797 25888 25888 0 #2# nil element t nil 25799 25886 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 12) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [[nil nil #113=(headline (:standard-properties [25904 25904 25961 26105 26105 0 #2# section element t nil 25963 26103 2 nil nil nil #14=(headline (:standard-properties [25888 25888 25904 26105 26105 0 #2# nil element t nil 25906 26103 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 14) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 56) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #115=(headline (:standard-properties [26129 26129 26139 31999 31999 0 #2# section element t nil 26141 31997 2 nil nil nil #13=(headline (:standard-properties [26105 26105 26129 31999 31999 0 #2# nil element t nil 26131 31997 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 22) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 9) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #13# 0] #14# 1] #109=(headline (:standard-properties [25698 25698 25725 25783 25783 0 #2# nil element t nil 25727 25781 2 nil nil nil #12#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 25) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 1] #12# 0] #80=(headline (:standard-properties [19008 19008 19038 19208 19208 0 #2# nil element t nil 19040 19206 2 nil nil nil #9#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 29) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[[[[nil nil #3# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 28 0 nil top-comment element t nil nil nil nil nil nil nil #15=(section (:standard-properties [1 1 1 134 134 0 nil first-section element t nil 1 134 nil nil nil nil #3#]))] :key "TITLE" :value "Work Emacs Config")) 0] #15# 0] [[nil nil (keyword (:standard-properties [51 51 nil nil 89 0 nil nil element t nil nil nil nil nil nil nil #15#] :key "DESCRIPTION" :value "Emacs config for work.")) 0] [nil nil (keyword (:standard-properties [115 115 nil nil 134 2 nil nil element t nil nil nil nil nil nil nil #15#] :key "OPTIONS" :value "toc:2")) 0] (keyword (:standard-properties [89 89 nil nil 115 0 nil nil element t nil nil nil nil nil nil nil #15#] :key "STARTUP" :value "showeverything")) 0] (keyword (:standard-properties [28 28 nil nil 51 0 nil nil element t nil nil nil nil nil nil nil #15#] :key "AUTHOR" :value "Ultrafeeder4")) 0] [[[nil nil #18=(section (:standard-properties [160 160 160 2176 2176 0 nil section element t nil 160 2176 nil nil nil nil #16#])) 0] [nil nil #20=(item (:standard-properties [160 160 162 452 452 0 #24=(:tag) item element t nil nil nil nil nil nil #17=((160 0 "- " nil nil nil 452) (234 2 "- " nil nil nil 290) (290 2 "- " nil nil nil 332) (332 2 "- " nil nil nil 372) (372 2 "- " nil nil nil 402) (402 2 "- " nil nil nil 452) (452 0 "- " nil nil nil 488) (488 0 "- " nil nil nil 522) (522 0 "- " nil nil nil 544) (544 0 "- " nil nil nil 568) (568 0 "- " nil nil nil 596) (596 0 "- " nil nil nil 622) (622 0 "- " nil nil nil 642) (642 0 "- " nil nil nil 664) (664 0 "- " nil nil nil 690) (690 0 "- " nil nil nil 811) (710 2 "- " nil nil nil 764) (764 2 "- " nil nil nil 811) (811 0 "- " nil nil nil 1293) (883 2 "- " nil nil nil 974) (974 2 "- " nil nil nil 1066) (1066 2 "- " nil nil nil 1122) (1122 2 "- " nil nil nil 1159) (1159 2 "- " nil nil nil 1229) (1229 2 "- " nil nil nil 1293) (1293 0 "- " nil nil nil 1375) (1309 2 "- " nil nil nil 1353) (1353 2 "- " nil nil nil 1375) (1375 0 "- " nil nil nil 1413) (1413 0 "- " nil nil nil 1447) (1447 0 "- " nil nil nil 1604) (1496 2 "- " nil nil nil 1524) (1524 2 "- " nil nil nil 1552) (1552 2 "- " nil nil nil 1567) (1567 2 "- " nil nil nil 1586) (1586 2 "- " nil nil nil 1604) (1604 0 "- " nil nil nil 1630) (1630 0 "- " nil nil nil 1654) (1654 0 "- " nil nil nil 1920) (1680 2 "- " nil nil nil 1744) (1744 2 "- " nil nil nil 1796) (1796 2 "- " nil nil nil 1864) (1864 2 "- " nil nil nil 1920) (1920 0 "- " nil nil nil 1950) (1950 0 "- " nil nil nil 2101) (1984 2 "- " nil nil nil 2101) (2101 0 "- " nil nil nil 2175) (2151 2 "- " nil nil nil 2175)) #19=(plain-list (:standard-properties [160 160 160 2175 2176 1 nil planning element t nil nil nil nil nil nil #17# #18#] :type unordered))] :bullet #25="- " :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] #19# 0] [[[nil nil #21=(plain-list (:standard-properties [234 234 234 452 452 0 nil nil element t nil nil nil nil nil nil #17# #20#] :type unordered)) 0] [nil nil (item (:standard-properties [290 290 294 332 332 0 #22=(:tag) item element t nil nil nil nil nil nil #17# #21#] :bullet #23="- " :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [234 234 238 290 290 0 #22# item element t nil nil nil nil nil nil #17# #21#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil [nil nil (item (:standard-properties [402 402 406 452 452 0 #22# item element t nil nil nil nil nil nil #17# #21#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [372 372 376 402 402 0 #22# item element t nil nil nil nil nil nil #17# #21#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 1] (item (:standard-properties [332 332 336 372 372 0 #22# item element t nil nil nil nil nil nil #17# #21#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (paragraph (:standard-properties [162 162 162 234 234 0 nil nil element t nil nil nil nil nil nil nil #20#])) 1] #16# 1] [[[[nil nil (item (:standard-properties [488 488 490 522 522 0 #24# item element t nil nil nil nil nil nil #17# #19#] :bullet #25# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (item (:standard-properties [544 544 546 568 568 0 #24# item element t nil nil nil nil nil nil #17# #19#] :bullet #25# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [522 522 524 544 544 0 #24# item element t nil nil nil nil nil nil #17# #19#] :bullet #25# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[nil nil (item (:standard-properties [596 596 598 622 622 0 #24# item element t nil nil nil nil nil nil #17# #19#] :bullet #25# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (item (:standard-properties [642 642 644 664 664 0 #24# item element t nil nil nil nil nil nil #17# #19#] :bullet #25# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [622 622 624 642 642 0 #24# item element t nil nil nil nil nil nil #17# #19#] :bullet #25# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [568 568 570 596 596 0 #24# item element t nil nil nil nil nil nil #17# #19#] :bullet #25# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[[nil nil #26=(item (:standard-properties [690 690 692 811 811 0 #24# item element t nil nil nil nil nil nil #17# #19#] :bullet #25# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] nil (paragraph (:standard-properties [692 692 692 710 710 0 nil nil element t nil nil nil nil nil nil nil #26#])) -1] [nil [nil nil (item (:standard-properties [764 764 768 811 811 0 #22# item element t nil nil nil nil nil nil #17# #27=(plain-list (:standard-properties [710 710 710 811 811 0 nil nil element t nil nil nil nil nil nil #17# #26#] :type unordered))] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [710 710 714 764 764 0 #22# item element t nil nil nil nil nil nil #17# #27#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 1] #27# 0] (item (:standard-properties [664 664 666 690 690 0 #24# item element t nil nil nil nil nil nil #17# #19#] :bullet #25# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [452 452 454 488 488 0 #24# item element t nil nil nil nil nil nil #17# #19#] :bullet #25# :checkbox nil :counter nil :pre-blank 0 :tag nil)) -1] [[[[nil nil (paragraph (:standard-properties [813 813 813 883 883 0 nil nil element t nil nil nil nil nil nil nil #28=(item (:standard-properties [811 811 813 1293 1293 0 #24# item element t nil nil nil nil nil nil #17# #19#] :bullet #25# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] [nil nil (item (:standard-properties [883 883 887 974 974 0 #22# item element t nil nil nil nil nil nil #17# #29=(plain-list (:standard-properties [883 883 883 1293 1293 0 nil nil element t nil nil nil nil nil nil #17# #28#] :type unordered))] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] #29# 0] [nil nil (item (:standard-properties [1066 1066 1070 1122 1122 0 #22# item element t nil nil nil nil nil nil #17# #29#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [974 974 978 1066 1066 0 #22# item element t nil nil nil nil nil nil #17# #29#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) -1] [[[[nil nil (item (:standard-properties [1159 1159 1163 1229 1229 0 #22# item element t nil nil nil nil nil nil #17# #29#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil #30=(item (:standard-properties [1293 1293 1295 1375 1375 0 #24# item element t nil nil nil nil nil nil #17# #19#] :bullet #25# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1229 1229 1233 1293 1293 0 #22# item element t nil nil nil nil nil nil #17# #29#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[nil nil #31=(plain-list (:standard-properties [1309 1309 1309 1375 1375 0 nil nil element t nil nil nil nil nil nil #17# #30#] :type unordered)) 0] [nil nil (item (:standard-properties [1353 1353 1357 1375 1375 0 #22# item element t nil nil nil nil nil nil #17# #31#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1309 1309 1313 1353 1353 0 #22# item element t nil nil nil nil nil nil #17# #31#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (paragraph (:standard-properties [1295 1295 1295 1309 1309 0 nil nil element t nil nil nil nil nil nil nil #30#])) 0] [[nil nil (item (:standard-properties [1413 1413 1415 1447 1447 0 #24# item element t nil nil nil nil nil nil #17# #19#] :bullet #25# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (paragraph (:standard-properties [1449 1449 1449 1496 1496 0 nil nil element t nil nil nil nil nil nil nil #32=(item (:standard-properties [1447 1447 1449 1604 1604 0 #24# item element t nil nil nil nil nil nil #17# #19#] :bullet #25# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] #32# 0] (item (:standard-properties [1375 1375 1377 1413 1413 0 #24# item element t nil nil nil nil nil nil #17# #19#] :bullet #25# :checkbox nil :counter nil :pre-blank 0 :tag nil)) -1] (item (:standard-properties [1122 1122 1126 1159 1159 0 #22# item element t nil nil nil nil nil nil #17# #29#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 1] #28# -1] [[[[[[[nil nil #34=(item (:standard-properties [1496 1496 1500 1524 1524 0 #24# item element t nil nil nil nil nil nil #17# #33=(plain-list (:standard-properties [1496 1496 1496 1604 1604 0 nil nil element t nil nil nil nil nil nil #17# #32#] :type unordered))] :bullet #25# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (item (:standard-properties [1524 1524 1528 1552 1552 0 #22# item element t nil nil nil nil nil nil #17# #33#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (paragraph (:standard-properties [1500 1500 1500 1524 1524 0 nil nil element t nil nil nil nil nil nil nil #34#])) 0] [nil nil (item (:standard-properties [1567 1567 1571 1586 1586 0 #22# item element t nil nil nil nil nil nil #17# #33#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1552 1552 1556 1567 1567 0 #22# item element t nil nil nil nil nil nil #17# #33#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) -1] [[[nil nil (item (:standard-properties [1604 1604 1606 1630 1630 0 #22# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil #35=(item (:standard-properties [1654 1654 1656 1920 1920 0 #22# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1630 1630 1632 1654 1654 0 #22# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil #36=(plain-list (:standard-properties [1680 1680 1680 1920 1920 0 nil nil element t nil nil nil nil nil nil #17# #35#] :type unordered)) 0] (paragraph (:standard-properties [1656 1656 1656 1680 1680 0 nil nil element t nil nil nil nil nil nil nil #35#])) -1] (item (:standard-properties [1586 1586 1590 1604 1604 0 #22# item element t nil nil nil nil nil nil #17# #33#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[[nil nil (item (:standard-properties [1744 1744 1748 1796 1796 0 #22# item element t nil nil nil nil nil nil #17# #36#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (item (:standard-properties [1864 1864 1868 1920 1920 0 #22# item element t nil nil nil nil nil nil #17# #36#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1796 1796 1800 1864 1864 0 #22# item element t nil nil nil nil nil nil #17# #36#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil #37=(item (:standard-properties [1950 1950 1952 2101 2101 0 #22# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [1920 1920 1922 1950 1950 0 #22# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) -1] (item (:standard-properties [1680 1680 1684 1744 1744 0 #22# item element t nil nil nil nil nil nil #17# #36#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil)) -1] [[[[nil nil (plain-list (:standard-properties [1984 1984 1984 2101 2101 0 nil nil element t nil nil nil nil nil nil #17# #37#] :type unordered)) 0] [nil [nil nil (plain-list (:standard-properties [2151 2151 2151 2175 2175 0 nil nil element t nil nil nil nil nil nil #17# #38=(item (:standard-properties [2101 2101 2103 2175 2175 0 #22# item element t nil nil nil nil nil nil #17# #19#] :bullet #23# :checkbox nil :counter nil :pre-blank 0 :tag nil))] :type unordered)) 0] (paragraph (:standard-properties [2103 2103 2103 2151 2151 0 nil nil element t nil nil nil nil nil nil nil #38#])) 1] #38# 1] [nil [nil nil #40=(section (:standard-properties [2239 2239 2239 2544 2544 0 nil section element t nil 2239 2544 nil nil nil nil #39#])) 0] #39# 1] #7# -1] [[[[nil nil (src-block (:standard-properties [2421 2421 nil nil 2544 1 nil nil element t nil nil nil nil nil nil nil #40#] :language #44="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq use-package-always-ensure t)\12  (add-to-list 'load-path \"~\\\\.emacs.d\\\\scripts\\\\\")\12")) 0] [nil nil #43=(section (:standard-properties [2563 2563 2563 2739 2739 0 nil section element t nil 2563 2739 nil nil nil nil #41#])) 0] #41# 0] [nil nil #42# 0] (src-block (:standard-properties [2563 2563 nil nil 2739 1 nil planning element t nil nil nil nil nil nil nil #43#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(require 'elpaca-setup)\12(require 'buffer-move)\12(require 'package)\12(add-to-list 'package-archives '(\"melpa\" . \"http://melpa.org/packages/\") t)\12")) -1] [[[nil nil (src-block (:standard-properties [2758 2758 nil nil 3791 1 nil planning element t nil nil nil nil nil nil nil #49=(section (:standard-properties [2758 2758 2758 3791 3791 0 nil section element t nil 2758 3791 nil nil nil nil #42#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package evil\12          :init\12          (setq evil-want-integration t)\12          (setq evil-want-keybinding nil)\12          (setq evil-vsplit-window-right t)\12          (setq evil-split-window-below t)\12          (evil-mode ))\12    (use-package evil-collection\12      :after evil\12      :config\12      (setq evil-collection-mode-list '(dashboard dired ibuffer))\12      (evil-collection-init))\12(use-package evil-tutor)\12\12        ;;Turns off elpaca-use-package-mode current declaration\12        ;;Note this will cause evaluate the declaration immediately. It is not deferred.\12        ;;Useful for configuring built-in emacs features.\12        (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))\12;; Don't install anything. Defer execution of BODY\12(with-eval-after-load 'evil-maps\12  (define-key evil-motion-state-map (kbd \"SPC\") nil)\12  (define-key evil-motion-state-map (kbd \"RET\") nil)\12  (define-key evil-motion-state-map (kbd \"TAB\") nil))\12(setq org-return-follows-link t)\12        \12")) 0] [nil nil #48=(section (:standard-properties [3804 3804 3804 4412 4412 0 nil section element t nil 3804 4412 nil nil nil nil #45#])) 0] #45# 0] [[nil nil #46# 0] [nil nil (src-block (:standard-properties [4436 4436 nil nil 11945 1 nil planning element t nil nil nil nil nil nil nil #47=(section (:standard-properties [4436 4436 4436 11945 11945 0 nil section element t nil 4436 11945 nil nil nil nil #46#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package general\12        :config\12      (general-evil-setup)\12      (general-create-definer ult/leader-keys\12        :states '(normal insert visual emacs)\12        :keymaps 'override\12        :prefix \"SPC\"\12        :global-prefix \"M-SPC\")\12      (ult/leader-keys\12        \".\" '(find-file :wk \"Find file\")\12        \"TAB TAB\" '(comment-line :wk \"Comment lines\")\12  \11  \"o e\" '(elfeed :wk \"Open Elfeed\"))\12      (ult/leader-keys\12        \"b\" '(:ignore t :wk \"buffer\")\12        \"b b\" '(switch-to-buffer :wk \"Switch buffer\")\12        \"b i\" '(ibuffer :wk \"Ibuffer\")\12        \"b k\" '(kill-current-buffer :wk \"Kill this buffer\")\12        \"b n\" '(next-buffer :wk \"Next buffer\")\12        \"b p\" '(previous-buffer :wk \"Previous buffer\")\12        \"b r\" '(revert-buffer :wk \"Reload buffer\"))\12      (ult/leader-keys\12    \"d\" '(:ignore t :wk \"Dired\")\12    \"d d\" '(dired :wk \"Open dired\")\12    \"d j\" '(dired-jump :wk \"Dired jump to current\")\12    \"d n\" '(neotree-dir :wk \"Open directory in neotree\")\12    \"d p\" '(peep-dired :wk \"Peep-dired\"))\12  (ult/leader-keys\12      \"e\" '(:ignore t :wk \"Evaluate\")\12      \"e b\" '(eval-buffer :wk \"Evaluate elisp in buffer\")\12      \"e d\" '(eval-defun :wk \"Evaluate defun containing or after point\")\12      \"e e\" '(eval-expression :wk \"Evaluate an elisp expresssion\")\12      \"e h\" '(counsel-esh-history :wk \"Eshell history\")\12      \"e l\" '(eval-last-sexp :wk \"Evaluate elisp expression before point\")\12      \"e r\" '(eval-region :wk \"Evaluate elisp in region\")\12      \"e s\" '(eshell :wk \"Eshell\"))\12  (ult/leader-keys\12    \"f\" '(:ignore t :wk \"Files\")    \12    \"f c\" '((lambda () (interactive)\12              (find-file \"~/.emacs.d/config.org\")) \12            :wk \"Open emacs config.org\")\12    \"f e\" '((lambda () (interactive)\12              (dired \"~/.emacs.d/\")) \12            :wk \"Open user-emacs-directory in dired\")\12    \"f d\" '(find-grep-dired :wk \"Search for string in files in DIR\")\12    \"f g\" '(counsel-grep-or-swiper :wk \"Search for string current file\")\12    \"f i\" '((lambda () (interactive)\12              (find-file \"~/.config/emacs/init.el\")) \12            :wk \"Open emacs init.el\")\12    \"f j\" '(counsel-file-jump :wk \"Jump to a file below current directory\")\12    \"f l\" '(counsel-locate :wk \"Locate a file\")\12    \"f r\" '(counsel-recentf :wk \"Find recent files\")\12    \"f u\" '(sudo-edit-find-file :wk \"Sudo find file\")\12    \"f U\" '(sudo-edit :wk \"Sudo edit file\"))\12    (ult/leader-keys\12    \"g\" '(:ignore t :wk \"Git\")    \12    \"g /\" '(magit-dispatch :wk \"Magit dispatch\")\12    \"g .\" '(magit-file-dispatch :wk \"Magit file dispatch\")\12    \"g b\" '(magit-branch-checkout :wk \"Switch branch\")\12    \"g c\" '(:ignore t :wk \"Create\") \12    \"g c b\" '(magit-branch-and-checkout :wk \"Create branch and checkout\")\12    \"g c c\" '(magit-commit-create :wk \"Create commit\")\12    \"g c f\" '(magit-commit-fixup :wk \"Create fixup commit\")\12    \"g C\" '(magit-clone :wk \"Clone repo\")\12    \"g f\" '(:ignore t :wk \"Find\") \12    \"g f c\" '(magit-show-commit :wk \"Show commit\")\12    \"g f f\" '(magit-find-file :wk \"Magit find file\")\12    \"g f g\" '(magit-find-git-config-file :wk \"Find gitconfig file\")\12    \"g F\" '(magit-fetch :wk \"Git fetch\")\12    \"g g\" '(magit-status :wk \"Magit status\")\12    \"g i\" '(magit-init :wk \"Initialize git repo\")\12    \"g l\" '(magit-log-buffer-file :wk \"Magit buffer log\")\12    \"g r\" '(vc-revert :wk \"Git revert file\")\12    \"g s\" '(magit-stage-file :wk \"Git stage file\")\12    \"g t\" '(git-timemachine :wk \"Git time machine\")\12    \"g u\" '(magit-stage-file :wk \"Git unstage file\"))\12  (ult/leader-keys\12\12    \"h\" '(:ignore t :wk \"Help\")\12    \"h a\" '(counsel-apropos :wk \"Apropos\")\12    \"h b\" '(describe-bindings :wk \"Describe bindings\")\12    \"h c\" '(describe-char :wk \"Describe character under cursor\")\12    \"h d\" '(:ignore t :wk \"Emacs documentation\")\12    \"h d a\" '(about-emacs :wk \"About Emacs\")\12    \"h d d\" '(view-emacs-debugging :wk \"View Emacs debugging\")\12    \"h d f\" '(view-emacs-FAQ :wk \"View Emacs FAQ\")\12    \"h d m\" '(info-emacs-manual :wk \"The Emacs manual\")\12    \"h d n\" '(view-emacs-news :wk \"View Emacs news\")\12    \"h d o\" '(describe-distribution :wk \"How to obtain Emacs\")\12    \"h d p\" '(view-emacs-problems :wk \"View Emacs problems\")\12    \"h d t\" '(view-emacs-todo :wk \"View Emacs todo\")\12    \"h d w\" '(describe-no-warranty :wk \"Describe no warranty\")\12    \"h e\" '(view-echo-area-messages :wk \"View echo area messages\")\12    \"h f\" '(describe-function :wk \"Describe function\")\12    \"h F\" '(describe-face :wk \"Describe face\")\12    \"h g\" '(describe-gnu-project :wk \"Describe GNU Project\")\12    \"h i\" '(info :wk \"Info\")\12    \"h I\" '(describe-input-method :wk \"Describe input method\")\12    \"h k\" '(describe-key :wk \"Describe key\")\12    \"h l\" '(view-lossage :wk \"Display recent keystrokes and the commands run\")\12    \"h L\" '(describe-language-environment :wk \"Describe language environment\")\12    \"h m\" '(describe-mode :wk \"Describe mode\")\12    \"h r\" '(:ignore t :wk \"Reload\")\12    \"h r r\" '((lambda () (interactive)\12                (load-file \"~/.emacs.d/init.el\")\12                (ignore (elpaca-process-queues)))\12              :wk \"Reload emacs config\")\12    \"h t\" '(load-theme :wk \"Load theme\")\12    \"h v\" '(describe-variable :wk \"Describe variable\")\12    \"h w\" '(where-is :wk \"Prints keybinding for command if set\")\12    \"h x\" '(describe-command :wk \"Display full documentation for command\"))\12\12      (ult/leader-keys\12    \"m\" '(:ignore t :wk \"Org\")\12    \"m a\" '(org-agenda :wk \"Org agenda\")\12    \"m e\" '(org-export-dispatch :wk \"Org export dispatch\")\12    \"m i\" '(org-toggle-item :wk \"Org toggle item\")\12    \"m t\" '(org-todo :wk \"Org todo\")\12    \"m B\" '(org-babel-tangle :wk \"Org babel tangle\")\12    \"m T\" '(org-todo-list :wk \"Org todo list\"))\12\12  (ult/leader-keys\12    \"m b\" '(:ignore t :wk \"Tables\")\12    \"m b -\" '(org-table-insert-hline :wk \"Insert hline in table\"))\12\12  (ult/leader-keys\12    \"m d\" '(:ignore t :wk \"Date/deadline\")\12    \"m d t\" '(org-time-stamp :wk \"Org time stamp\"))\12  (ult/leader-keys\12    \"o\" '(:ignore t :wk \"Open\")\12    \"o d\" '(dashboard-open :wk \"Dashboard\")\12    \"o e\" '(elfeed :wk \"Elfeed RSS\")\12    \"o f\" '(make-frame :wk \"Open buffer in new frame\")\12    \"o F\" '(select-frame-by-name :wk \"Select frame by name\"))\12  (ult/leader-keys\12    \"p\" '(projectile-command-map :wk \"Projectile\"))\12  (ult/leader-keys\12    \"t\" '(:ignore t :wk \"Toggle\")\12    \"t e\" '(eshell-toggle :wk \"Toggle eshell\")\12    \"t l\" '(display-line-numbers-mode :wk \"Toggle line numbers\")\12    \"t n\" '(neotree-toggle :wk \"Toggle neotree file viewer\")\12    \"t t\" '(visual-line-mode :wk \"Toggle truncated lines\"))\12    (ult/leader-keys\12    \"s\" '(:ignore t :wk \"Search\")\12    \"s d\" '(dictionary-search :wk \"Search dictionary\")\12    \"s m\" '(man :wk \"Man pages\")\12    \"s t\" '(tldr :wk \"Lookup TLDR docs for a command\")\12    \"s w\" '(woman :wk \"Similar to man but doesn't require man\"))\12  (ult/leader-keys\12    \"w\" '(:ignore t :wk \"Windows\")\12    ;; Window splits\12    \"w c\" '(evil-window-delete :wk \"Close window\")\12    \"w n\" '(evil-window-new :wk \"New window\")\12    \"w s\" '(evil-window-split :wk \"Horizontal split window\")\12    \"w v\" '(evil-window-vsplit :wk \"Vertical split window\")\12    ;; Window motions\12    \"w h\" '(evil-window-left :wk \"Window left\")\12    \"w j\" '(evil-window-down :wk \"Window down\")\12    \"w k\" '(evil-window-up :wk \"Window up\")\12    \"w l\" '(evil-window-right :wk \"Window right\")\12    \"w w\" '(evil-window-next :wk \"Goto next window\")\12    ;; Move Windows\12    \"w H\" '(buf-move-left :wk \"Buffer move left\")\12    \"w J\" '(buf-move-down :wk \"Buffer move down\")\12    \"w K\" '(buf-move-up :wk \"Buffer move up\")\12    \"w L\" '(buf-move-right :wk \"Buffer move right\"))\12      ) \12")) 0] #47# 0] (src-block (:standard-properties [3804 3804 nil nil 4412 0 nil planning element t nil nil nil nil nil nil nil #48#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package which-key\12    :diminish\12    :init\12     (which-key-mode 1)\12    :config\12    (setq which-key-side-window-location 'bottom\12      which-key-sort-order #'which-key-key-order-alpha\12      whick-key-sort-uppercase-first nil\12      which-key-add-column-padding 1\12      which-key-max-display-columns nil\12      which-key-min-display-lines 6\12      which-key-side-window-slot -10\12      which-key-side-window-max-height 0.25\12      which-key-idle-delay 0.8\12      which-key-max-description-length 25\12      which-key-allow-imprecise-window-fit t\12      which-key-separator \" > \" ))\12")) 0] #49# 0] (paragraph (:standard-properties [2239 2239 2239 2420 2421 1 nil planning element t nil nil nil nil nil nil nil #40#])) 0] (paragraph (:standard-properties [1952 1952 1952 1984 1984 0 nil nil element t nil nil nil nil nil nil nil #37#])) 0] [[[[[[nil nil #52=(section (:standard-properties [11962 11962 11962 12165 12165 0 nil section element t nil 11962 12165 nil nil nil nil #50#])) 0] [nil nil #51# 0] (src-block (:standard-properties [11962 11962 nil nil 12165 1 nil planning element t nil nil nil nil nil nil nil #52#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package nerd-icons\12      ;; (nerd-icons-font-family \"Tinos Nerd Font\")\12  )\12    (use-package nerd-icons-dired\12      :hook (dired-mode . nerd-icons-dired-mode ))\12")) 0] [nil nil (src-block (:standard-properties [12180 12180 nil nil 12629 0 nil planning element t nil nil nil nil nil nil nil #53=(section (:standard-properties [12180 12180 12180 12629 12629 0 nil section element t nil 12180 12629 nil nil nil nil #51#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package app-launcher\12  :ensure '(app-launcher :host github :repo \"SebastienWae/app-launcher\"))\12(defun emacs-run-launcher ()\12  (interactive)\12  (with-selected-frame\12      (make-frame '((name . \"emacs-run-launcher\")\12\11\11    (minibuffer . only)\12\11\11    (fullscreen . 0)\12\11\11    (undecorated . t)\12\11\11    (internal-border-width . 10)\12\11\11    (height . 11)))\12    (unwind-protect\12\11(app-launcher-run-app)\12      (delete-frame))))\12")) 0] #53# -1] [[[nil nil #56=(section (:standard-properties [12639 12639 12639 12729 12729 0 nil section element t nil 12639 12729 nil nil nil nil #54#])) 0] [nil nil #55# 0] (src-block (:standard-properties [12639 12639 nil nil 12729 1 nil planning element t nil nil nil nil nil nil nil #56#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(setq backup-directory-alist '((\".*\" . \"~\\\\.backups\")))\12")) 0] [nil nil (src-block (:standard-properties [12740 12740 nil nil 13179 1 nil planning element t nil nil nil nil nil nil nil #57=(section (:standard-properties [12740 12740 12740 13179 13179 0 nil section element t nil 12740 13179 nil nil nil nil #55#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package company\12      :defer 2\12      :diminish\12      :custom\12      (company-begin-commands '(self-insert-command))\12      (comany-idle-delay .1)\12      (company-minimum-prefix-length 2)\12      (company-show-numbers t)\12      (company-tooltip-align-annotations 't)\12      (global-company-mode t))\12  (use-package company-box\12    :after company\12    :diminish\12    :hook (company-mode . company-box-mode))\12")) 0] #57# -1] #54# 0] [[[nil nil #60=(section (:standard-properties [13192 13192 13192 13843 13843 0 nil section element t nil 13192 13843 nil nil nil nil #58#])) 0] [nil nil #59# 0] (src-block (:standard-properties [13192 13192 nil nil 13843 1 nil planning element t nil nil nil nil nil nil nil #60#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package dashboard\12    :init\12    (setq initial-buffer-choice 'dashboard-open)\12    (setq dashboard-set-heading-icons t)\12    (setq dashboard-set-file-icons t)\12    (setq dashboard-banner-logo-title \"Many bugs to catch!\")\12    (setq dashboard-startup-banner \"~/.emacs.d/themes/pngegg.png\")\12    (setq dashboard-center-content nil)\12    (setq dashboard-items '((recents . 5)\12  \11\11\11  (agenda . 5)\12  \11\11\11  (bookmarks . 3)\12  \11\11\11  (projects . 3)\12 \11\11\11  (registers . 3)))\12    :custom\12    (dashboard-modify-heading-icons '((recents . \"file-text\")\12  \11\11\11\11    (bookmarks . \"book\")))\12    :config\12    (dashboard-setup-startup-hook))\12")) 0] [nil nil (src-block (:standard-properties [13855 13855 nil nil 13914 1 nil planning element t nil nil nil nil nil nil nil #61=(section (:standard-properties [13855 13855 13855 13914 13914 0 nil section element t nil 13855 13914 nil nil nil nil #59#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package diminish)\12")) 0] #61# -1] #58# -1] [[[[[nil nil #64=(section (:standard-properties [13922 13922 13922 14712 14712 0 nil section element t nil 13922 14712 nil nil nil nil #62#])) 0] [nil nil #63# 0] (src-block (:standard-properties [13922 13922 nil nil 14712 1 nil planning element t nil nil nil nil nil nil nil #64#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package dired-open\12  :config\12  (setq dired-open-extensions '((\"gif\" . \"sxiv\")\12                                (\"jpg\" . \"sxiv\")\12                                (\"png\" . \"sxiv\")\12                                (\"mkv\" . \"mpv\")\12                                (\"mp4\" . \"mpv\"))))\12\12(use-package peep-dired\12  :after dired\12  :hook (evil-normalize-keymaps . peep-dired-hook)\12  :config\12    (evil-define-key 'normal dired-mode-map (kbd \"h\") 'dired-up-directory)\12    (evil-define-key 'normal dired-mode-map (kbd \"l\") 'dired-open-file) ; use dired-find-file instead if not using dired-open package\12    (evil-define-key 'normal peep-dired-mode-map (kbd \"j\") 'peep-dired-next-file)\12    (evil-define-key 'normal peep-dired-mode-map (kbd \"k\") 'peep-dired-prev-file)\12)\12")) 0] [nil nil (src-block (:standard-properties [14721 14721 nil nil 16586 0 nil planning element t nil nil nil nil nil nil nil #65=(section (:standard-properties [14721 14721 14721 16586 16586 0 nil section element t nil 14721 16586 nil nil nil nil #63#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package elfeed\12      :config\12      (setq elfeed-search-feed-face \":foreground #ffffff :weight bold\"\12            elfeed-feeds (quote\12                           ((\"https://www.reddit.com/r/linux.rss\" reddit linux)\12                            (\"https://www.reddit.com/r/commandline.rss\" reddit commandline)\12                            (\"https://www.reddit.com/r/distrotube.rss\" reddit distrotube)\12                            (\"https://www.reddit.com/r/emacs.rss\" reddit emacs)\12                            (\"https://www.gamingonlinux.com/article_rss.php\" gaming linux)\12                            (\"https://hackaday.com/blog/feed/\" hackaday linux)\12                            (\"https://opensource.com/feed\" opensource linux)\12                            (\"https://linux.softpedia.com/backend.xml\" softpedia linux)\12                            (\"https://itsfoss.com/feed/\" itsfoss linux)\12                            (\"https://www.zdnet.com/topic/linux/rss.xml\" zdnet linux)\12                            (\"https://www.phoronix.com/rss.php\" phoronix linux)\12                            (\"http://feeds.feedburner.com/d0od\" omgubuntu linux)\12                            (\"https://www.computerworld.com/index.rss\" computerworld linux)\12                            (\"https://www.networkworld.com/category/linux/index.rss\" networkworld linux)\12                            (\"https://www.techrepublic.com/rssfeeds/topic/open-source/\" techrepublic linux)\12                            (\"https://betanews.com/feed\" betanews linux)\12                            (\"http://lxer.com/module/newswire/headlines.rss\" lxer linux)\12                            (\"https://distrowatch.com/news/dwd.xml\" distrowatch linux)))))\12\12    (use-package elfeed-goodies\12      :init\12      (elfeed-goodies/setup)\12      :config\12      (setq elfeed-goodies/entry-pane-size 0.5))\12")) 0] #65# -1] [[[nil nil #67=(section (:standard-properties [16598 16598 16598 16717 16717 0 nil section element t nil 16598 16717 nil nil nil nil #66#])) 0] [nil nil #8# 0] (src-block (:standard-properties [16598 16598 nil nil 16717 1 nil planning element t nil nil nil nil nil nil nil #67#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package flycheck\12    :defer t\12    :diminish\12    :init (global-flycheck-mode))\12")) 0] [nil nil #72=(section (:standard-properties [16752 16752 16752 17870 17870 0 nil section element t nil 16752 17870 nil nil nil nil #68#])) 0] #68# -1] #66# 0] [[[nil nil #69# 0] nil #70=(section (:standard-properties [17892 17892 17892 18147 18147 0 nil section element t nil 17892 18147 nil nil nil nil #69#])) -1] [[nil nil (paragraph (:standard-properties [18145 18145 18145 18147 18147 0 nil nil element t nil nil nil nil nil nil nil #70#])) 0] [nil nil #71# 0] #9# 0] (src-block (:standard-properties [17892 17892 nil nil 18145 0 nil planning element t nil nil nil nil nil nil nil #70#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(global-set-key (kbd \"C-=\") 'text-scale-increase)\12(global-set-key (kbd \"C--\") 'text-scale-decrease)\12(global-set-key (kbd \"<C-wheel-up>\") 'text-scale-increase)\12(global-set-key (kbd \"<C-wheel-down>\") 'text-scale-decrease)\12")) 0] (src-block (:standard-properties [16752 16752 nil nil 17870 1 nil planning element t nil nil nil nil nil nil nil #72#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (set-face-attribute 'default nil\12    :family \"BigBlueTerm437 Nerd Font Mono\"\12    :height 110\12    :weight 'medium)\12  (set-face-attribute 'variable-pitch nil\12    :family \"BigBlueTerm437 Nerd Font Mono\"\12    :height 120\12    :weight 'medium)\12  (set-face-attribute 'fixed-pitch nil\12    :family \"BigBlueTerm437 Nerd Font Mono\"\12    :height 110\12    :weight 'medium)\12  ;; Makes commented text and keywords italics.\12  ;; This is working in emacsclient but not emacs.\12  ;; Your font must have an italic face available.\12  (set-face-attribute 'font-lock-comment-face nil\12    :slant 'italic)\12  (set-face-attribute 'font-lock-keyword-face nil\12    :slant 'italic)\12\12  ;; This sets the default font on all graphical frames created after restarting Emacs.\12  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts\12  ;; are not right unless I also add this method of setting the default font.\12  (add-to-list 'default-frame-alist '(font . \"BigBlueTerm437 Nerd Font Mono\"))\12\12  ;; Uncomment the following line if line spacing needs adjusting.\12  (setq-default line-spacing 0.12)\12")) -1] #62# 0] #50# 0] #33# 0] [[[[[[[nil nil (src-block (:standard-properties [18227 18227 nil nil 18320 1 nil planning element t nil nil nil nil nil nil nil #119=(section (:standard-properties [18227 18227 18227 18320 18320 0 nil section element t nil 18227 18320 nil nil nil nil #71#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(menu-bar-mode -1)\12(tool-bar-mode -1)\12(scroll-bar-mode -1)\12")) 0] [nil nil #75=(section (:standard-properties [18364 18364 18364 18463 18463 0 nil section element t nil 18364 18463 nil nil nil nil #73#])) 0] #73# 0] [nil nil #74# 0] (src-block (:standard-properties [18364 18364 nil nil 18463 1 nil planning element t nil nil nil nil nil nil nil #75#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(global-display-line-numbers-mode 1)\12(global-visual-line-mode t)\12")) -1] [[[nil nil (src-block (:standard-properties [18489 18489 nil nil 18556 0 nil planning element t nil nil nil nil nil nil nil #79=(section (:standard-properties [18489 18489 18489 18556 18556 0 nil section element t nil 18489 18556 nil nil nil nil #74#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq inhibit-startup-screen t)\12")) 0] [nil nil #78=(section (:standard-properties [18573 18573 18573 18870 18870 0 nil section element t nil 18573 18870 nil nil nil nil #76#])) 0] #76# 0] [nil nil #77# 0] (src-block (:standard-properties [18573 18573 nil nil 18870 1 nil planning element t nil nil nil nil nil nil nil #78#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (add-to-list 'custom-theme-load-path \"~/.emacs.d/themes/\")\12  (use-package doom-themes\12  :custom\12  (doom-themes-enable-bold t )   ; if nil, bold is universally disabled\12      (doom-themes-enable-italic t)\12      :config\12  (load-theme 'doom-bluloco-dark t)\12  )  ;\12")) -1] #79# 0] [[[nil nil (src-block (:standard-properties [18903 18903 nil nil 19008 0 nil planning element t nil nil nil nil nil nil nil #82=(section (:standard-properties [18903 18903 18903 19008 19008 0 nil section element t nil 18903 19008 nil nil nil nil #77#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package rainbow-mode\12    :diminish\12    :hook org-mode prog-mode)\12")) 0] [nil nil #81=(section (:standard-properties [19038 19038 19038 19208 19208 0 nil section element t nil 19038 19208 nil nil nil nil #80#])) 0] #80# 0] [nil nil #10# 0] (src-block (:standard-properties [19038 19038 nil nil 19208 1 nil planning element t nil nil nil nil nil nil nil #81#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package rainbow-delimiters\12    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)\12  \11 (clojure-mode . rainbow-delimiters-mode)))\12")) -1] #82# -1] [[[[[nil nil #85=(section (:standard-properties [19235 19235 19235 19609 19609 0 nil section element t nil 19235 19609 nil nil nil nil #83#])) 0] [nil nil #84# 0] (src-block (:standard-properties [19235 19235 nil nil 19609 1 nil planning element t nil nil nil nil nil nil nil #85#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package git-timemachine\12    :after git-timemachine\12    :hook (evil-normalize-keymaps . git-timemachine-hook)\12    :config\12    (evil-define-key 'normal git-timemachine-mode-map (kbd \"C-j\") 'git-timemachine-show-previous-revision)\12    (evil-define-key 'normal git-timemachine-mode-map (kbd \"C-k\") 'git-timemachine-show-next-revision)\12)\12")) 0] [nil nil (src-block (:standard-properties [19618 19618 nil nil 19713 1 nil planning element t nil nil nil nil nil nil nil #86=(section (:standard-properties [19618 19618 19618 19713 19713 0 nil section element t nil 19618 19713 nil nil nil nil #84#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package transient)\12(use-package magit :after transient)\12")) 0] #86# -1] [[nil [nil nil (src-block (:standard-properties [19730 19730 nil nil 20126 0 nil planning element t nil nil nil nil nil nil nil #88=(section (:standard-properties [19730 19730 19730 20126 20126 0 nil section element t nil 19730 20126 nil nil nil nil #87#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package hl-todo\12  :hook ((org-mode . hl-todo-mode)\12\11 (prog-mode . hl-todo-mode))\12  :config\12  (setq hl-todo-highlight-punctuation \":\"\12\11hl-todo-keyword-faces\12\11`((\"TODO\" warning bold)\12\11  (\"FIXME\" error bold)\12\11  (\"HACK\" font-lock-constant-face bold)\12\11  (\"REVIEW\" font-lock-keyword-face bold)\12\11  (\"NOTE\" success bold)\12\11  (\"DEPRECATED\" font-lock-doc-face bold))))\12")) 0] #88# 1] [nil [nil nil (src-block (:standard-properties [20143 20143 nil nil 20995 1 nil planning element t nil nil nil nil nil nil nil #90=(section (:standard-properties [20143 20143 20143 20995 20995 0 nil section element t nil 20143 20995 nil nil nil nil #89#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "        (use-package counsel\12  \11:diminish\12          :after ivy\12          :config (counsel-mode))\12      (use-package ivy\12        :diminish\12        :bind\12        ((\"C-c C-r\" . ivy-resume)\12         (\"C-x B\" . ivy-switch-buffer-other-window))\12        :custom\12    (setq ivy-use-virtual-buffers t)\12    (setq ivy-count-format \"(%d/%d) \")\12    (setq enable-recursive-minibuffers t)\12    :config\12  (ivy-mode))\12  (use-package nerd-icons-ivy-rich\12    :diminish\12    :init (nerd-icons-ivy-rich-mode 1))\12  (use-package ivy-rich\12    :diminish\12    :after ivy\12    :init (ivy-rich-mode 1)\12    :custom\12    (ivy-virtual-abbreviate 'full\12  \11\11\11  ivy-rich-switch-buffer-align-virtual-buffer t\12  \11\11\11  ivy-rich-path-style 'abbrev)\12    :config\12    (ivy-set-display-transformer 'ivy-switch-buffer\12  \11\11\11       'ivy-rich-switch-buffer-transformer))\12")) 0] #90# 1] #89# 0] #87# 0] [[[[nil nil #91# 0] nil #94=(section (:standard-properties [21030 21030 21030 21532 21532 0 nil section element t nil 21030 21532 nil nil nil nil #91#] :fragile-cache nil)) -1] [[nil nil #92# 0] [nil nil (src-block (:standard-properties [21544 21544 nil nil 22950 0 nil planning element t nil nil nil nil nil nil nil #93=(section (:standard-properties [21544 21544 21544 22950 22950 0 nil section element t nil 21544 22950 nil nil nil nil #92#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(require 'package)\12(add-to-list 'package-archives '(\"melpa\" . \"http://melpa.org/packages/\") t)\12(package-initialize)\12\12(use-package lsp-mode \12  :ensure\12  :hook \12((csharp-mode . lsp)\12(powershell-mode . lsp))\12  :commands lsp)\12(use-package yasnippet :ensure (:wait t))\12(use-package lsp-ui :commands lsp-ui-mode)\12(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)\12(use-package lsp-treemacs \12  :ensure \12  :commands lsp-treemacs-errors-list)\12(use-package dap-mode :ensure (:wait t))\12(lsp-register-client (make-lsp-client\12\11\11      :new-connection (lsp-stdio-connection \"csharp-roslyn\")\12\11\11      :activation-fn (lsp-activate-on \"csharp\") \12\11\11      :server-id 'Microsoft.CodeAnalysis.LanguageServer))\12(add-to-list 'lsp-language-id-configuration '(\".*\\\\.razor$\" . \"csharp\"))\12(when (cl-find-if-not #'package-installed-p package-selected-packages)\12  (package-refresh-contents)\12  (mapc #'package-install package-selected-packages))\12\12;; sample `helm' configuration use https://github.com/emacs-helm/helm/ for details\12\12(which-key-mode)\12(add-hook 'c-mode-hook 'lsp)\12(add-hook 'c++-mode-hook 'lsp)\12\12(setq gc-cons-threshold (* 100 1024 1024)\12      read-process-output-max (* 1024 1024)\12      treemacs-space-between-root-nodes nil\12      company-idle-delay 0.0\12      company-minimum-prefix-length 1\12      lsp-idle-delay 0.1)  ;; clangd is fast\12\12  (require 'dap-cpptools)\12  (yas-global-mode)\12\12")) 0] #93# 0] (src-block (:standard-properties [21030 21030 nil nil 21532 0 nil planning element t nil nil nil nil nil nil nil #94#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun razor_engine ()\12  (if( = file-name-extension \".cshtml\")\12      (web-mode-set-engine \"razor\"))\12  )\12(use-package web-mode\12  :mode\12  (\12   (\"\\\\.html\\\\'\" . web-mode)\12   (\"\\\\.cshtml\\\\'\" . web-mode)\12   (\"\\\\.svelte\\\\'\" . web-mode))\12 :config\12 (setq web-mode-engines-alist\12      '((\"blade\" . \"\\\\.blade\\\\.\")\12      (\"razor\" . \"\\\\.cshtml\\\\'\")\12\11(\"svelte\" . \"\\\\.svelte\\\\.\")))\12)\12(add-to-list 'auto-mode-alist '(\"\\\\.cshtml\\\\'\" . web-mode))\12(add-hook 'web-mode-hook 'razor-engine)\12")) 0] [[[nil nil #97=(section (:standard-properties [22956 22956 22956 23012 23012 0 nil section element t nil 22956 23012 nil nil nil nil #95#])) 0] [nil nil #96# 0] (src-block (:standard-properties [22956 22956 nil nil 23012 0 nil planning element t nil nil nil nil nil nil nil #97#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(require 'dap-netcore)\12")) 0] [[nil nil (src-block (:standard-properties [23021 23021 nil nil 23055 0 nil planning element t nil nil nil nil nil nil nil #99=(section (:standard-properties [23021 23021 23021 23055 23055 0 nil section element t nil 23021 23055 nil nil nil nil #96#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12")) 0] [nil nil #118=(section (:standard-properties [23062 23062 23062 23119 23119 0 nil section element t nil 23062 23119 nil nil nil nil #98#])) 0] #98# 0] #99# 0] #95# 0] #11# 0] #83# 0] [[[[[[nil nil #100# 0] [nil nil (src-block (:standard-properties [23130 23130 nil nil 23392 0 nil planning element t nil nil nil nil nil nil nil #101=(section (:standard-properties [23130 23130 23130 23392 23392 0 nil section element t nil 23130 23392 nil nil nil nil #100#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package doom-modeline\12  \11      :init (doom-modeline-mode 1)\12  \11      :config\12  \11      (setq doom-modeline-height 20\12  \11\11    doom-modeline-bar-width 5\12  \11\11    doom-modeline-persp-name t\12  \11\11    doom-modeline-persp-icon t))\12")) 0] #101# 0] [[nil nil #103=(section (:standard-properties [23402 23402 23402 24906 24906 0 nil section element t nil 23402 24906 nil nil nil nil #102#])) 0] [nil nil #12# 0] (src-block (:standard-properties [23402 23402 nil nil 24906 0 nil planning element t nil nil nil nil nil nil nil #103#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package neotree\12  :config\12  (setq neo-smart-open t\12        neo-show-hidden-files t\12        neo-window-width 55\12        neo-window-fixed-size nil\12        inhibit-compacting-font-caches \12\12t\12        projectile-switch-project-action 'neotree-projectile-action) \12        ;; truncate long file names in neotree\12        (add-hook 'neo-after-create-hook\12           #'(lambda (_)\12               (with-current-buffer (get-buffer neo-buffer-name)\12                 (setq truncate-lines t)\12                 (setq word-wrap nil)\12                 (make-local-variable 'auto-hscroll-mode)\12                 (setq auto-hscroll-mode nil))))\12(evil-define-key 'normal neotree-mode-map (kbd \"TAB\") 'neotree-enter)\12    (evil-define-key 'normal neotree-mode-map (kbd \"SPC\") 'neotree-quick-look)\12    (evil-define-key 'normal neotree-mode-map (kbd \"q\") 'neotree-hide)\12    (evil-define-key 'normal neotree-mode-map (kbd \"RET\") 'neotree-enter)\12    (evil-define-key 'normal neotree-mode-map (kbd \"g\") 'neotree-refresh)\12    (evil-define-key 'normal neotree-mode-map (kbd \"j\") 'neotree-next-line)\12    (evil-define-key 'normal neotree-mode-map (kbd \"k\") 'neotree-previous-line)\12    (evil-define-key 'normal neotree-mode-map (kbd \"A\") 'neotree-stretch-toggle)\12    (evil-define-key 'normal neotree-mode-map (kbd \"H\") 'neotree-hidden-file-toggle)\12(evil-define-key 'insert neotree-mode-map (kbd \"j\") 'neotree-next-line)\12    (evil-define-key 'insert neotree-mode-map (kbd \"k\") 'neotree-previous-line)\12)\12")) 0] #102# 0] [[[nil nil #106=(section (:standard-properties [24949 24949 24949 25088 25088 0 nil section element t nil 24949 25088 nil nil nil nil #104#])) 0] [nil nil #105# 0] (src-block (:standard-properties [24949 24949 nil nil 25088 1 nil planning element t nil nil nil nil nil nil nil #106#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package toc-org\12    :commands toc-org-enable\12    :init (add-hook 'org-mode-hook 'toc-org-enable))\12")) 0] [[nil nil (src-block (:standard-properties [25113 25113 nil nil 25281 1 nil planning element t nil nil nil nil nil nil nil #108=(section (:standard-properties [25113 25113 25113 25281 25281 0 nil section element t nil 25113 25281 nil nil nil nil #105#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (add-hook 'org-mode-hook 'org-indent-mode)\12  (use-package org-bullets)\12  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))\12")) 0] [nil nil #117=(section (:standard-properties [25313 25313 25313 25698 25698 0 nil section element t nil 25313 25698 nil nil nil nil #107#])) 0] #107# 0] #108# 0] #104# 0] [[[[nil nil #109# 0] [nil nil (src-block (:standard-properties [25725 25725 nil nil 25783 1 nil planning element t nil nil nil nil nil nil nil #110=(section (:standard-properties [25725 25725 25725 25783 25783 0 nil section element t nil 25725 25783 nil nil nil nil #109#]))] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (require 'org-tempo)\12")) 0] #110# 0] [[nil nil #112=(section (:standard-properties [25797 25797 25797 25888 25888 0 nil section element t nil 25797 25888 nil nil nil nil #111#])) 0] [nil nil #14# 0] (src-block (:standard-properties [25797 25797 nil nil 25888 1 nil planning element t nil nil nil nil nil nil nil #112#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package projectile\12  :config\12  (projectile-mode 1))\12")) 0] #111# 0] [[[nil nil #114=(section (:standard-properties [25961 25961 25961 26105 26105 0 nil section element t nil 25961 26105 nil nil nil nil #113#])) 0] [nil nil #13# 0] (src-block (:standard-properties [25961 25961 nil nil 26105 1 nil planning element t nil nil nil nil nil nil nil #114#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun reload-init-file ()\12    (interactive)\12    (load-file user-init-file)\12    (load-file user-init-file))\12")) 0] [[nil nil #116=(section (:standard-properties [26139 26139 26139 31999 31999 0 nil section element t nil 26139 31999 nil nil nil nil #115#])) 0] [nil nil (comment (:standard-properties [27176 27176 nil nil 27314 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "** Pwsh\12#+begin_src emacs-lisp\12 (require 'shell)\12(autoload 'powershell \"powershell\" \"Run powershell as a shell within emacs.\" t)")) 0] (src-block (:standard-properties [26139 26139 nil nil 27176 1 nil planning element t nil nil nil nil nil nil nil #116#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    ;; on windows, make pwsh the default shell\12  (when (eq system-type 'windows-nt)\12    (let ((xlist\12           '(\12            \"~/AppData/Local/Microsoft/WindowsApps/pwsh.exe\"\12            \"C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe\"\12            ))\12          xfound)\12      (setq xfound (seq-some (lambda (x) (if (file-exists-p x) x nil)) xlist))\12      (when xfound (setq explicit-shell-file-name xfound))))\12      (use-package eshell-syntax-highlighting\12      :after esh-mode\12      :config\12      (eshell-syntax-highlighting-global-mode +1))\12      \12    (setq eshell-rc-script (concat user-emacs-directory \"eshell/profile\")\12          eshell-aliases-file (concat user-emacs-directory \"eshell/aliases\")\12          eshell-history-size 5000\12          eshell-buffer-maximum-lines 5000\12          eshell-hist-ignoredups t\12          eshell-scroll-to-bottom-on-input t\12          eshell-destroy-buffer-when-process-dies t\12          eshell-visual-commands '(\"bash\", \"fish\", \"htop\", \"ssh\", \"top\", \"zsh\"))\12")) 0] #115# 0] #113# 0] (src-block (:standard-properties [25313 25313 nil nil 25698 1 nil planning element t nil nil nil nil nil nil nil #117#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(electric-indent-mode -1)\12(electric-pair-mode 1)\12(add-hook 'org-mode-hook (lambda ()\12\11\11\11   (setq-local electric-pair-inhibit-predicate\12\11\11\11\11       '(lambda (c)\12\11\11\11\11\11  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))\12(global-auto-revert-mode t)\12(setq org-edit-src-content-indentation 0)\12(global-set-key [escape] 'keyboard-escape-quit)\12")) 0] [[[[nil nil (comment (:standard-properties [27592 27592 nil nil 27766 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "(defvar powershell-prompt-pattern  \"PS [^#$%>]+>\" \12  \"Regexp for powershell prompt.  This isn't really used, because I couldn't figure out how to get it to work.\"\12  )")) 0] [nil nil (comment (:standard-properties [27870 27870 nil nil 27988 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "(defcustom powershell-need-rawui-resize t\12  \"set when powershell needs to be resized\"\12  :group 'powershell\12)")) 0] (comment (:standard-properties [27766 27766 nil nil 27870 2 nil nil element t nil nil nil nil nil nil nil #116#] :value "(defgroup powershell nil\12  \"Running shell from within Emacs buffers.\"\12  :group 'processes\12  )")) 0] [[nil nil (comment (:standard-properties [28490 28490 nil nil 28922 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "  (let (\12        (tmp-shellfile explicit-shell-file-name)\12        )\12                                        ; set arguments for the powershell exe.\12                                        ; This needs to be tunable.\12    (setq explicit-shell-file-name \"c:\\\\windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\")  \12    (setq explicit-powershell.exe-args '(\"-Command\" \"-\" )) ; interactive, but no command prompt")) 0] [nil nil (comment (:standard-properties [29005 29005 nil nil 29152 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "    ; restore the original shell\12    (if explicit-shell-file-name\12        (setq explicit-shell-file-name tmp-shellfile)\12      )\12    )")) 0] (comment (:standard-properties [28922 28922 nil nil 29005 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "                                        ; launch the shell\12    (shell buffer)")) 0] (comment (:standard-properties [27988 27988 nil nil 28490 1 nil nil element t nil nil nil nil nil nil nil #116#] :value ";;;###autoload\12(defun powershell (&optional buffer)\12  \"Run an inferior powershell, by invoking the shell function. See the help for shell for more details.\12\\(Type \\\\[describe-mode] in the shell buffer for a list of commands.)\"\12  (interactive\12   (list\12    (and current-prefix-arg\12         (read-buffer \"Shell buffer: \"\12                      (generate-new-buffer-name \"*PowerShell*\")))))\12  ; get a name for the buffer\12  (setq buffer (get-buffer-create (or buffer \"*PowerShell*\")))")) 0] [[[[nil nil (comment (:standard-properties [29225 29225 nil nil 29563 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "    ; This sets up the powershell RawUI screen width. By default,\12    ; the powershell v1.0 assumes terminal width of 80 chars.\12    ;This means input gets wrapped at the 80th column.  We reset the\12    ; width of the PS terminal to the window width. \12    (add-hook 'window-size-change-functions 'powershell-window-size-changed)")) 0] [nil nil (comment (:standard-properties [29607 29607 nil nil 29688 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "    ; ask for initial prompt\12    (comint-simple-send proc \"prompt\")\12    )")) 0] (comment (:standard-properties [29563 29563 nil nil 29607 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "    (powershell-window-size-changed)")) 0] [[nil nil (comment (:standard-properties [29820 29820 nil nil 30023 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "  ; wrap the comint-input-sender with a PS version\12  ; must do this after launching the shell! \12  (make-local-variable 'comint-input-sender)\12  (setq comint-input-sender 'powershell-simple-send)")) 0] [nil nil (comment (:standard-properties [30202 30202 nil nil 30244 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "  ;(run-hooks 'powershell-launch-hook)")) 0] (comment (:standard-properties [30023 30023 nil nil 30202 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "  ; set a preoutput filter for powershell.  This will trim newlines after the prompt.\12  (add-hook 'comint-preoutput-filter-functions 'powershell-preoutput-filter-for-prompt)")) 0] (comment (:standard-properties [29688 29688 nil nil 29820 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "  ; hook the kill-buffer action so we can kill the inferior process?\12  (add-hook 'kill-buffer-hook 'powershell-delete-process)")) 0] [[[nil nil (comment (:standard-properties [30293 30293 nil nil 30460 3 nil nil element t nil nil nil nil nil nil nil #116#] :value "(defun powershell-window-size-changed (&optional frame)\12  ; do not actually resize here. instead just set a flag.\12  (setq powershell-need-rawui-resize t)\12)")) 0] [nil nil (comment (:standard-properties [30650 30650 nil nil 31065 1 nil nil element t nil nil nil nil nil nil nil #116#] :value ";; This function trims the newline from the prompt that we\12;; get back from powershell.  It is set into the preoutput\12;; filters, so the newline is trimmed before being put into\12;; the output buffer.\12(defun powershell-preoutput-filter-for-prompt (string)\12   (if\12       ; not sure why, but I have not succeeded in using a variable here???  \12       ;(string-match  powershell-prompt-pattern  string)")) 0] (comment (:standard-properties [30460 30460 nil nil 30650 3 nil nil element t nil nil nil nil nil nil nil #116#] :value "(defun powershell-delete-process (&optional proc)\12  (or proc\12      (setq proc (get-buffer-process (current-buffer))))\12  (and (processp proc)\12       (delete-process proc))\12  )")) 0] [[nil nil (comment (:standard-properties [31151 31151 nil nil 31166 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "     string")) 0] [nil nil (comment (:standard-properties [31185 31185 nil nil 31999 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "(defun powershell-simple-send (proc string)\12  \"Override of the comint-simple-send function, specific for powershell.\12This just sends STRING, plus the prompt command. Normally powershell is in\12noninteractive model when run as an inferior shell with stdin/stdout\12redirected, which is the case when running as a shell within emacs.\12This function insures we get and display the prompt. \"\12  ; resize if necessary. We do this by sending a resize string to the shell,\12  ; before sending the actual command to the shell. \12  (if powershell-need-rawui-resize\12      (and\12       (comint-simple-send proc (powershell-gen-window-width-string))\12       (setq powershell-need-rawui-resize nil)\12       )\12    )\12  (comint-simple-send proc string)\12  (comint-simple-send proc \"prompt\")\12) \12#+end_src")) 0] (comment (:standard-properties [31166 31166 nil nil 31185 3 nil nil element t nil nil nil nil nil nil nil #116#] :value "     )\12   )")) 0] (comment (:standard-properties [31065 31065 nil nil 31151 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "       (string-match  \"PS [^#$%>]+>\" string)\12       (substring string 0 -1)")) 0] (comment (:standard-properties [30244 30244 nil nil 30293 2 nil nil element t nil nil nil nil nil nil nil #116#] :value "  ; return the buffer created\12  buffer\12)")) 0] (comment (:standard-properties [29152 29152 nil nil 29225 1 nil nil element t nil nil nil nil nil nil nil #116#] :value "  (let (\12        (proc (get-buffer-process buffer))\12        )")) 1] (comment (:standard-properties [27314 27314 nil nil 27592 2 nil nil element t nil nil nil nil nil nil nil #116#] :value "(defun powershell-gen-window-width-string ()\12  (concat  \"$a = (Get-Host).UI.RawUI\\n\" \12            \"$b = $a.WindowSize\\n\"\12            \"$b.Width = \" (number-to-string  (window-width)) \"\\n\"\12            \"$a.BufferSize = $b\\n\"\12            \"$a.WindowSize = $b\")\12  )")) 0] (src-block (:standard-properties [23062 23062 nil nil 23119 1 nil planning element t nil nil nil nil nil nil nil #118#] :language #44# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package lua-mode)\12")) 0] #119# -1] nil nil 0] org-element--cache-compare)) ((version "2.3")))